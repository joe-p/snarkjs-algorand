{
    "name": "PlonkVerifier",
    "structs": {
        "ObjectC300AAEE": [
            {
                "name": "L",
                "type": "byte[32][]"
            },
            {
                "name": "challenges",
                "type": "Challenges"
            }
        ],
        "Challenges": [
            {
                "name": "beta",
                "type": "byte[32]"
            },
            {
                "name": "gamma",
                "type": "byte[32]"
            },
            {
                "name": "alpha",
                "type": "byte[32]"
            },
            {
                "name": "xi",
                "type": "byte[32]"
            },
            {
                "name": "v",
                "type": "byte[32][6]"
            },
            {
                "name": "u",
                "type": "byte[32]"
            },
            {
                "name": "xin",
                "type": "byte[32]"
            },
            {
                "name": "zh",
                "type": "byte[32]"
            }
        ],
        "Proof": [
            {
                "name": "A",
                "type": "byte[96]"
            },
            {
                "name": "B",
                "type": "byte[96]"
            },
            {
                "name": "C",
                "type": "byte[96]"
            },
            {
                "name": "Z",
                "type": "byte[96]"
            },
            {
                "name": "T1",
                "type": "byte[96]"
            },
            {
                "name": "T2",
                "type": "byte[96]"
            },
            {
                "name": "T3",
                "type": "byte[96]"
            },
            {
                "name": "Wxi",
                "type": "byte[96]"
            },
            {
                "name": "Wxiw",
                "type": "byte[96]"
            },
            {
                "name": "eval_a",
                "type": "byte[32]"
            },
            {
                "name": "eval_b",
                "type": "byte[32]"
            },
            {
                "name": "eval_c",
                "type": "byte[32]"
            },
            {
                "name": "eval_s1",
                "type": "byte[32]"
            },
            {
                "name": "eval_s2",
                "type": "byte[32]"
            },
            {
                "name": "eval_zw",
                "type": "byte[32]"
            }
        ],
        "VerificationKey": [
            {
                "name": "Qm",
                "type": "byte[96]"
            },
            {
                "name": "Ql",
                "type": "byte[96]"
            },
            {
                "name": "Qr",
                "type": "byte[96]"
            },
            {
                "name": "Qo",
                "type": "byte[96]"
            },
            {
                "name": "Qc",
                "type": "byte[96]"
            },
            {
                "name": "S1",
                "type": "byte[96]"
            },
            {
                "name": "S2",
                "type": "byte[96]"
            },
            {
                "name": "S3",
                "type": "byte[96]"
            },
            {
                "name": "power",
                "type": "uint64"
            },
            {
                "name": "nPublic",
                "type": "uint64"
            },
            {
                "name": "omega",
                "type": "byte[32]"
            }
        ]
    },
    "methods": [
        {
            "name": "verify",
            "args": [
                {
                    "type": "(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64,byte[32])",
                    "struct": "VerificationKey",
                    "name": "vk"
                },
                {
                    "type": "byte[32][]",
                    "name": "signals"
                },
                {
                    "type": "(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[32],byte[32],byte[32],byte[32],byte[32],byte[32])",
                    "struct": "Proof",
                    "name": "proof"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "computeChallenges",
            "args": [
                {
                    "type": "(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64,byte[32])",
                    "struct": "VerificationKey",
                    "name": "vk"
                },
                {
                    "type": "byte[32][]",
                    "name": "signals"
                },
                {
                    "type": "(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[32],byte[32],byte[32],byte[32],byte[32],byte[32])",
                    "struct": "Proof",
                    "name": "proof"
                }
            ],
            "returns": {
                "type": "(byte[32],byte[32],byte[32],byte[32],byte[32][6],byte[32],byte[32],byte[32])",
                "struct": "Challenges"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "calculateLagrangeEvaluations",
            "args": [
                {
                    "type": "(byte[32],byte[32],byte[32],byte[32],byte[32][6],byte[32],byte[32],byte[32])",
                    "struct": "Challenges",
                    "name": "challengesInput"
                },
                {
                    "type": "(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64,byte[32])",
                    "struct": "VerificationKey",
                    "name": "vk"
                }
            ],
            "returns": {
                "type": "(byte[32][],(byte[32],byte[32],byte[32],byte[32],byte[32][6],byte[32],byte[32],byte[32]))",
                "struct": "ObjectC300AAEE"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        212,
                        315,
                        515,
                        728,
                        748
                    ],
                    "errorMessage": "Length must be 32"
                },
                {
                    "pc": [
                        87,
                        109,
                        136
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        173
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        90,
                        112,
                        139
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        304,
                        502,
                        505
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        472,
                        554,
                        560,
                        567,
                        580,
                        591
                    ],
                    "errorMessage": "invalid size"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYXJjNC9pbmRleC5kLnRzOjpDb250cmFjdC5hcHByb3ZhbFByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgMzIgOTYgMSAwIDM4NAogICAgYnl0ZWNibG9jayAweDczZWRhNzUzMjk5ZDdkNDgzMzM5ZDgwODA5YTFkODA1NTNiZGE0MDJmZmZlNWJmZWZmZmZmZmZmMDAwMDAwMDEgMHgxNTFmN2M3NQogICAgLy8gY29udHJhY3RzL3ZlcmlmaWVyLmFsZ28udHM6OTIKICAgIC8vIGV4cG9ydCBjbGFzcyBQbG9ua1ZlcmlmaWVyIGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuIE51bUFwcEFyZ3MKICAgIGJ6IG1haW5fYmFyZV9yb3V0aW5nQDgKICAgIHB1c2hieXRlc3MgMHgxZDJjZTgwZCAweDAzYWFkZTY2IDB4MDU1ZjA2ZDYgLy8gbWV0aG9kICJ2ZXJpZnkoKGJ5dGVbOTZdLGJ5dGVbOTZdLGJ5dGVbOTZdLGJ5dGVbOTZdLGJ5dGVbOTZdLGJ5dGVbOTZdLGJ5dGVbOTZdLGJ5dGVbOTZdLHVpbnQ2NCx1aW50NjQsYnl0ZVszMl0pLGJ5dGVbMzJdW10sKGJ5dGVbOTZdLGJ5dGVbOTZdLGJ5dGVbOTZdLGJ5dGVbOTZdLGJ5dGVbOTZdLGJ5dGVbOTZdLGJ5dGVbOTZdLGJ5dGVbOTZdLGJ5dGVbOTZdLGJ5dGVbMzJdLGJ5dGVbMzJdLGJ5dGVbMzJdLGJ5dGVbMzJdLGJ5dGVbMzJdLGJ5dGVbMzJdKSlib29sIiwgbWV0aG9kICJjb21wdXRlQ2hhbGxlbmdlcygoYnl0ZVs5Nl0sYnl0ZVs5Nl0sYnl0ZVs5Nl0sYnl0ZVs5Nl0sYnl0ZVs5Nl0sYnl0ZVs5Nl0sYnl0ZVs5Nl0sYnl0ZVs5Nl0sdWludDY0LHVpbnQ2NCxieXRlWzMyXSksYnl0ZVszMl1bXSwoYnl0ZVs5Nl0sYnl0ZVs5Nl0sYnl0ZVs5Nl0sYnl0ZVs5Nl0sYnl0ZVs5Nl0sYnl0ZVs5Nl0sYnl0ZVs5Nl0sYnl0ZVs5Nl0sYnl0ZVs5Nl0sYnl0ZVszMl0sYnl0ZVszMl0sYnl0ZVszMl0sYnl0ZVszMl0sYnl0ZVszMl0sYnl0ZVszMl0pKShieXRlWzMyXSxieXRlWzMyXSxieXRlWzMyXSxieXRlWzMyXSxieXRlWzMyXVs2XSxieXRlWzMyXSxieXRlWzMyXSxieXRlWzMyXSkiLCBtZXRob2QgImNhbGN1bGF0ZUxhZ3JhbmdlRXZhbHVhdGlvbnMoKGJ5dGVbMzJdLGJ5dGVbMzJdLGJ5dGVbMzJdLGJ5dGVbMzJdLGJ5dGVbMzJdWzZdLGJ5dGVbMzJdLGJ5dGVbMzJdLGJ5dGVbMzJdKSwoYnl0ZVs5Nl0sYnl0ZVs5Nl0sYnl0ZVs5Nl0sYnl0ZVs5Nl0sYnl0ZVs5Nl0sYnl0ZVs5Nl0sYnl0ZVs5Nl0sYnl0ZVs5Nl0sdWludDY0LHVpbnQ2NCxieXRlWzMyXSkpKGJ5dGVbMzJdW10sKGJ5dGVbMzJdLGJ5dGVbMzJdLGJ5dGVbMzJdLGJ5dGVbMzJdLGJ5dGVbMzJdWzZdLGJ5dGVbMzJdLGJ5dGVbMzJdLGJ5dGVbMzJdKSkiCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAwCiAgICBtYXRjaCBtYWluX3ZlcmlmeV9yb3V0ZUAzIG1haW5fY29tcHV0ZUNoYWxsZW5nZXNfcm91dGVANCBtYWluX2NhbGN1bGF0ZUxhZ3JhbmdlRXZhbHVhdGlvbnNfcm91dGVANQoKbWFpbl9hZnRlcl9pZl9lbHNlQDEyOgogICAgLy8gY29udHJhY3RzL3ZlcmlmaWVyLmFsZ28udHM6OTIKICAgIC8vIGV4cG9ydCBjbGFzcyBQbG9ua1ZlcmlmaWVyIGV4dGVuZHMgQ29udHJhY3QgewogICAgaW50Y18zIC8vIDAKICAgIHJldHVybgoKbWFpbl9jYWxjdWxhdGVMYWdyYW5nZUV2YWx1YXRpb25zX3JvdXRlQDU6CiAgICAvLyBjb250cmFjdHMvdmVyaWZpZXIuYWxnby50czoyMDAtMjAzCiAgICAvLyBjYWxjdWxhdGVMYWdyYW5nZUV2YWx1YXRpb25zKAogICAgLy8gICBjaGFsbGVuZ2VzSW5wdXQ6IENoYWxsZW5nZXMsCiAgICAvLyAgIHZrOiBWZXJpZmljYXRpb25LZXksCiAgICAvLyApOiB7IEw6IGJ5dGVzPDMyPltdOyBjaGFsbGVuZ2VzOiBDaGFsbGVuZ2VzIH0gewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBjb250cmFjdHMvdmVyaWZpZXIuYWxnby50czo5MgogICAgLy8gZXhwb3J0IGNsYXNzIFBsb25rVmVyaWZpZXIgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICAvLyBjb250cmFjdHMvdmVyaWZpZXIuYWxnby50czoyMDAtMjAzCiAgICAvLyBjYWxjdWxhdGVMYWdyYW5nZUV2YWx1YXRpb25zKAogICAgLy8gICBjaGFsbGVuZ2VzSW5wdXQ6IENoYWxsZW5nZXMsCiAgICAvLyAgIHZrOiBWZXJpZmljYXRpb25LZXksCiAgICAvLyApOiB7IEw6IGJ5dGVzPDMyPltdOyBjaGFsbGVuZ2VzOiBDaGFsbGVuZ2VzIH0gewogICAgY2FsbHN1YiBjYWxjdWxhdGVMYWdyYW5nZUV2YWx1YXRpb25zCiAgICBieXRlY18xIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzIgLy8gMQogICAgcmV0dXJuCgptYWluX2NvbXB1dGVDaGFsbGVuZ2VzX3JvdXRlQDQ6CiAgICAvLyBjb250cmFjdHMvdmVyaWZpZXIuYWxnby50czoxMTEtMTE1CiAgICAvLyBjb21wdXRlQ2hhbGxlbmdlcygKICAgIC8vICAgdms6IFZlcmlmaWNhdGlvbktleSwKICAgIC8vICAgc2lnbmFsczogUHVibGljU2lnbmFscywKICAgIC8vICAgcHJvb2Y6IFByb29mLAogICAgLy8gKTogQ2hhbGxlbmdlcyB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIGNvbnRyYWN0cy92ZXJpZmllci5hbGdvLnRzOjkyCiAgICAvLyBleHBvcnQgY2xhc3MgUGxvbmtWZXJpZmllciBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDMKICAgIC8vIGNvbnRyYWN0cy92ZXJpZmllci5hbGdvLnRzOjExMS0xMTUKICAgIC8vIGNvbXB1dGVDaGFsbGVuZ2VzKAogICAgLy8gICB2azogVmVyaWZpY2F0aW9uS2V5LAogICAgLy8gICBzaWduYWxzOiBQdWJsaWNTaWduYWxzLAogICAgLy8gICBwcm9vZjogUHJvb2YsCiAgICAvLyApOiBDaGFsbGVuZ2VzIHsKICAgIGNhbGxzdWIgY29tcHV0ZUNoYWxsZW5nZXMKICAgIHBvcG4gMwogICAgYnl0ZWNfMSAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18yIC8vIDEKICAgIHJldHVybgoKbWFpbl92ZXJpZnlfcm91dGVAMzoKICAgIC8vIGNvbnRyYWN0cy92ZXJpZmllci5hbGdvLnRzOjkzLTk3CiAgICAvLyBwdWJsaWMgdmVyaWZ5KAogICAgLy8gICB2azogVmVyaWZpY2F0aW9uS2V5LAogICAgLy8gICBzaWduYWxzOiBQdWJsaWNTaWduYWxzLAogICAgLy8gICBwcm9vZjogUHJvb2YsCiAgICAvLyApOiBib29sZWFuIHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gY29udHJhY3RzL3ZlcmlmaWVyLmFsZ28udHM6OTIKICAgIC8vIGV4cG9ydCBjbGFzcyBQbG9ua1ZlcmlmaWVyIGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwogICAgLy8gY29udHJhY3RzL3ZlcmlmaWVyLmFsZ28udHM6OTMtOTcKICAgIC8vIHB1YmxpYyB2ZXJpZnkoCiAgICAvLyAgIHZrOiBWZXJpZmljYXRpb25LZXksCiAgICAvLyAgIHNpZ25hbHM6IFB1YmxpY1NpZ25hbHMsCiAgICAvLyAgIHByb29mOiBQcm9vZiwKICAgIC8vICk6IGJvb2xlYW4gewogICAgY2FsbHN1YiB2ZXJpZnkKICAgIHB1c2hieXRlcyAweDAwCiAgICBpbnRjXzMgLy8gMAogICAgdW5jb3ZlciAyCiAgICBzZXRiaXQKICAgIGJ5dGVjXzEgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMiAvLyAxCiAgICByZXR1cm4KCm1haW5fYmFyZV9yb3V0aW5nQDg6CiAgICAvLyBjb250cmFjdHMvdmVyaWZpZXIuYWxnby50czo5MgogICAgLy8gZXhwb3J0IGNsYXNzIFBsb25rVmVyaWZpZXIgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICBibnogbWFpbl9hZnRlcl9pZl9lbHNlQDEyCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgIQogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBjcmVhdGluZwogICAgaW50Y18yIC8vIDEKICAgIHJldHVybgoKCi8vIGNvbnRyYWN0cy92ZXJpZmllci5hbGdvLnRzOjpQbG9ua1ZlcmlmaWVyLnZlcmlmeSh2azogYnl0ZXMsIHNpZ25hbHM6IGJ5dGVzLCBwcm9vZjogYnl0ZXMpIC0+IHVpbnQ2NDoKdmVyaWZ5OgogICAgLy8gY29udHJhY3RzL3ZlcmlmaWVyLmFsZ28udHM6OTMtOTcKICAgIC8vIHB1YmxpYyB2ZXJpZnkoCiAgICAvLyAgIHZrOiBWZXJpZmljYXRpb25LZXksCiAgICAvLyAgIHNpZ25hbHM6IFB1YmxpY1NpZ25hbHMsCiAgICAvLyAgIHByb29mOiBQcm9vZiwKICAgIC8vICk6IGJvb2xlYW4gewogICAgcHJvdG8gMyAxCiAgICAvLyBjb250cmFjdHMvdmVyaWZpZXIuYWxnby50czo5OQogICAgLy8gY29uc3QgY2hhbGxlbmdlID0gdGhpcy5jb21wdXRlQ2hhbGxlbmdlcyh2aywgc2lnbmFscywgcHJvb2YpOwogICAgZnJhbWVfZGlnIC0zCiAgICBmcmFtZV9kaWcgLTIKICAgIGZyYW1lX2RpZyAtMQogICAgY2FsbHN1YiBjb21wdXRlQ2hhbGxlbmdlcwogICAgZnJhbWVfYnVyeSAtMQogICAgZnJhbWVfYnVyeSAtMgogICAgZnJhbWVfYnVyeSAtMwogICAgLy8gY29udHJhY3RzL3ZlcmlmaWVyLmFsZ28udHM6MTAwCiAgICAvLyBsb2coY2hhbGxlbmdlLmFscGhhKTsKICAgIGV4dHJhY3QgNjQgMzIKICAgIGxvZwogICAgLy8gY29udHJhY3RzL3ZlcmlmaWVyLmFsZ28udHM6MTAxCiAgICAvLyByZXR1cm4gdHJ1ZTsKICAgIGludGNfMiAvLyAxCiAgICByZXRzdWIKCgovLyBjb250cmFjdHMvdmVyaWZpZXIuYWxnby50czo6UGxvbmtWZXJpZmllci5nZXRDaGFsbGVuZ2UodGQ6IGJ5dGVzKSAtPiBieXRlczoKZ2V0Q2hhbGxlbmdlOgogICAgLy8gY29udHJhY3RzL3ZlcmlmaWVyLmFsZ28udHM6MTA0CiAgICAvLyBwcml2YXRlIGdldENoYWxsZW5nZSh0ZDogYnl0ZXMpOiBieXRlczwzMj4gewogICAgcHJvdG8gMSAxCiAgICAvLyBjb250cmFjdHMvdmVyaWZpZXIuYWxnby50czoxMDUKICAgIC8vIGxldCBoYXNoID0gb3Aua2VjY2FrMjU2KHRkKTsKICAgIGZyYW1lX2RpZyAtMQogICAga2VjY2FrMjU2CiAgICAvLyBjb250cmFjdHMvdmVyaWZpZXIuYWxnby50czoxMDYKICAgIC8vIHJldHVybiBCeXRlcyhCaWdVaW50KGhhc2gpICUgQkxTMTJfMzgxX1NDQUxBUl9NT0RVTFVTKS50b0ZpeGVkKHsKICAgIGJ5dGVjXzAgLy8gMHg3M2VkYTc1MzI5OWQ3ZDQ4MzMzOWQ4MDgwOWExZDgwNTUzYmRhNDAyZmZmZTViZmVmZmZmZmZmZjAwMDAwMDAxCiAgICBiJQogICAgLy8gY29udHJhY3RzL3ZlcmlmaWVyLmFsZ28udHM6MTA2LTEwOAogICAgLy8gcmV0dXJuIEJ5dGVzKEJpZ1VpbnQoaGFzaCkgJSBCTFMxMl8zODFfU0NBTEFSX01PRFVMVVMpLnRvRml4ZWQoewogICAgLy8gICBsZW5ndGg6IDMyLAogICAgLy8gfSk7CiAgICBkdXAKICAgIGxlbgogICAgaW50Y18wIC8vIDMyCiAgICA9PQogICAgYXNzZXJ0IC8vIExlbmd0aCBtdXN0IGJlIDMyCiAgICByZXRzdWIKCgovLyBjb250cmFjdHMvdmVyaWZpZXIuYWxnby50czo6UGxvbmtWZXJpZmllci5jb21wdXRlQ2hhbGxlbmdlcyh2azogYnl0ZXMsIHNpZ25hbHM6IGJ5dGVzLCBwcm9vZjogYnl0ZXMpIC0+IGJ5dGVzLCBieXRlcywgYnl0ZXMsIGJ5dGVzOgpjb21wdXRlQ2hhbGxlbmdlczoKICAgIC8vIGNvbnRyYWN0cy92ZXJpZmllci5hbGdvLnRzOjExMS0xMTUKICAgIC8vIGNvbXB1dGVDaGFsbGVuZ2VzKAogICAgLy8gICB2azogVmVyaWZpY2F0aW9uS2V5LAogICAgLy8gICBzaWduYWxzOiBQdWJsaWNTaWduYWxzLAogICAgLy8gICBwcm9vZjogUHJvb2YsCiAgICAvLyApOiBDaGFsbGVuZ2VzIHsKICAgIHByb3RvIDMgNAogICAgaW50Y18zIC8vIDAKICAgIGR1cG4gNAogICAgcHVzaGJ5dGVzICIiCiAgICAvLyBjb250cmFjdHMvdmVyaWZpZXIuYWxnby50czoxMTkKICAgIC8vIGxldCB0ZCA9IG9wLmNvbmNhdCh2ay5RbSwgdmsuUWwpOwogICAgZnJhbWVfZGlnIC0zCiAgICBleHRyYWN0IDAgOTYKICAgIGZyYW1lX2RpZyAtMwogICAgZXh0cmFjdCA5NiA5NgogICAgY29uY2F0CiAgICAvLyBjb250cmFjdHMvdmVyaWZpZXIuYWxnby50czoxMjAKICAgIC8vIHRkID0gb3AuY29uY2F0KHRkLCB2ay5Rcik7CiAgICBmcmFtZV9kaWcgLTMKICAgIGV4dHJhY3QgMTkyIDk2CiAgICBjb25jYXQKICAgIC8vIGNvbnRyYWN0cy92ZXJpZmllci5hbGdvLnRzOjEyMQogICAgLy8gdGQgPSBvcC5jb25jYXQodGQsIHZrLlFvKTsKICAgIGZyYW1lX2RpZyAtMwogICAgcHVzaGludCAyODggLy8gMjg4CiAgICBpbnRjXzEgLy8gOTYKICAgIGV4dHJhY3QzCiAgICBjb25jYXQKICAgIC8vIGNvbnRyYWN0cy92ZXJpZmllci5hbGdvLnRzOjEyMgogICAgLy8gdGQgPSBvcC5jb25jYXQodGQsIHZrLlFjKTsKICAgIGZyYW1lX2RpZyAtMwogICAgaW50YyA0IC8vIDM4NAogICAgaW50Y18xIC8vIDk2CiAgICBleHRyYWN0MwogICAgY29uY2F0CiAgICAvLyBjb250cmFjdHMvdmVyaWZpZXIuYWxnby50czoxMjMKICAgIC8vIHRkID0gb3AuY29uY2F0KHRkLCB2ay5TMSk7CiAgICBmcmFtZV9kaWcgLTMKICAgIHB1c2hpbnQgNDgwIC8vIDQ4MAogICAgaW50Y18xIC8vIDk2CiAgICBleHRyYWN0MwogICAgY29uY2F0CiAgICAvLyBjb250cmFjdHMvdmVyaWZpZXIuYWxnby50czoxMjQKICAgIC8vIHRkID0gb3AuY29uY2F0KHRkLCB2ay5TMik7CiAgICBmcmFtZV9kaWcgLTMKICAgIHB1c2hpbnQgNTc2IC8vIDU3NgogICAgaW50Y18xIC8vIDk2CiAgICBleHRyYWN0MwogICAgY29uY2F0CiAgICAvLyBjb250cmFjdHMvdmVyaWZpZXIuYWxnby50czoxMjUKICAgIC8vIHRkID0gb3AuY29uY2F0KHRkLCB2ay5TMyk7CiAgICBmcmFtZV9kaWcgLTMKICAgIHB1c2hpbnQgNjcyIC8vIDY3MgogICAgaW50Y18xIC8vIDk2CiAgICBleHRyYWN0MwogICAgY29uY2F0CiAgICAvLyBjb250cmFjdHMvdmVyaWZpZXIuYWxnby50czoxMjcKICAgIC8vIGZvciAoY29uc3Qgc2lnbmFsIG9mIHNpZ25hbHMpIHsKICAgIGZyYW1lX2RpZyAtMgogICAgaW50Y18zIC8vIDAKICAgIGV4dHJhY3RfdWludDE2CiAgICBpbnRjXzMgLy8gMAoKY29tcHV0ZUNoYWxsZW5nZXNfZm9yX2hlYWRlckAxOgogICAgLy8gY29udHJhY3RzL3ZlcmlmaWVyLmFsZ28udHM6MTI3CiAgICAvLyBmb3IgKGNvbnN0IHNpZ25hbCBvZiBzaWduYWxzKSB7CiAgICBmcmFtZV9kaWcgOAogICAgZnJhbWVfZGlnIDcKICAgIDwKICAgIGJ6IGNvbXB1dGVDaGFsbGVuZ2VzX2FmdGVyX2ZvckA0CiAgICBmcmFtZV9kaWcgLTIKICAgIGV4dHJhY3QgMiAwCiAgICBmcmFtZV9kaWcgOAogICAgZHVwCiAgICBjb3ZlciAyCiAgICBpbnRjXzAgLy8gMzIKICAgICoKICAgIGludGNfMCAvLyAzMgogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICAvLyBjb250cmFjdHMvdmVyaWZpZXIuYWxnby50czozOAogICAgLy8gcmV0dXJuICgoYSAlIHIpICsgcikgJSByOyAvLyBlbnN1cmVzIFswLCByKQogICAgYnl0ZWNfMCAvLyAweDczZWRhNzUzMjk5ZDdkNDgzMzM5ZDgwODA5YTFkODA1NTNiZGE0MDJmZmZlNWJmZWZmZmZmZmZmMDAwMDAwMDEKICAgIGIlCiAgICBieXRlY18wIC8vIDB4NzNlZGE3NTMyOTlkN2Q0ODMzMzlkODA4MDlhMWQ4MDU1M2JkYTQwMmZmZmU1YmZlZmZmZmZmZmYwMDAwMDAwMQogICAgYisKICAgIGJ5dGVjXzAgLy8gMHg3M2VkYTc1MzI5OWQ3ZDQ4MzMzOWQ4MDgwOWExZDgwNTUzYmRhNDAyZmZmZTViZmVmZmZmZmZmZjAwMDAwMDAxCiAgICBiJQogICAgLy8gY29udHJhY3RzL3ZlcmlmaWVyLmFsZ28udHM6NDIKICAgIC8vIHJldHVybiBCeXRlcyhhKS50b0ZpeGVkKHsgbGVuZ3RoOiAzMiB9KTsKICAgIGR1cAogICAgbGVuCiAgICBpbnRjXzAgLy8gMzIKICAgID09CiAgICBhc3NlcnQgLy8gTGVuZ3RoIG11c3QgYmUgMzIKICAgIC8vIGNvbnRyYWN0cy92ZXJpZmllci5hbGdvLnRzOjEyOAogICAgLy8gdGQgPSBvcC5jb25jYXQodGQsIGIzMihmck5vcm0oQmlnVWludChzaWduYWwpKSkpOwogICAgZnJhbWVfZGlnIDYKICAgIHN3YXAKICAgIGNvbmNhdAogICAgZnJhbWVfYnVyeSA2CiAgICBpbnRjXzIgLy8gMQogICAgKwogICAgZnJhbWVfYnVyeSA4CiAgICBiIGNvbXB1dGVDaGFsbGVuZ2VzX2Zvcl9oZWFkZXJAMQoKY29tcHV0ZUNoYWxsZW5nZXNfYWZ0ZXJfZm9yQDQ6CiAgICAvLyBjb250cmFjdHMvdmVyaWZpZXIuYWxnby50czoxMzEKICAgIC8vIHRkID0gb3AuY29uY2F0KHRkLCBwcm9vZi5BKTsKICAgIGZyYW1lX2RpZyAtMQogICAgZXh0cmFjdCAwIDk2CiAgICBmcmFtZV9kaWcgNgogICAgc3dhcAogICAgY29uY2F0CiAgICAvLyBjb250cmFjdHMvdmVyaWZpZXIuYWxnby50czoxMzIKICAgIC8vIHRkID0gb3AuY29uY2F0KHRkLCBwcm9vZi5CKTsKICAgIGZyYW1lX2RpZyAtMQogICAgZXh0cmFjdCA5NiA5NgogICAgY29uY2F0CiAgICAvLyBjb250cmFjdHMvdmVyaWZpZXIuYWxnby50czoxMzMKICAgIC8vIHRkID0gb3AuY29uY2F0KHRkLCBwcm9vZi5DKTsKICAgIGZyYW1lX2RpZyAtMQogICAgZXh0cmFjdCAxOTIgOTYKICAgIGNvbmNhdAogICAgLy8gY29udHJhY3RzL3ZlcmlmaWVyLmFsZ28udHM6MTM1CiAgICAvLyBjb25zdCBiZXRhID0gdGhpcy5nZXRDaGFsbGVuZ2UodGQpOwogICAgY2FsbHN1YiBnZXRDaGFsbGVuZ2UKICAgIGR1cAogICAgZnJhbWVfYnVyeSAxCiAgICAvLyBjb250cmFjdHMvdmVyaWZpZXIuYWxnby50czoxNDAKICAgIC8vIGNvbnN0IGdhbW1hID0gdGhpcy5nZXRDaGFsbGVuZ2UodGQpOwogICAgZHVwCiAgICBjYWxsc3ViIGdldENoYWxsZW5nZQogICAgZHVwCiAgICBmcmFtZV9idXJ5IDIKICAgIC8vIGNvbnRyYWN0cy92ZXJpZmllci5hbGdvLnRzOjE0NwogICAgLy8gdGQgPSBvcC5jb25jYXQodGQsIGdhbW1hKTsKICAgIGRpZyAxCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGR1cAogICAgZnJhbWVfYnVyeSA2CiAgICAvLyBjb250cmFjdHMvdmVyaWZpZXIuYWxnby50czoxNDgKICAgIC8vIHRkID0gb3AuY29uY2F0KHRkLCBwcm9vZi5aKTsKICAgIGZyYW1lX2RpZyAtMQogICAgcHVzaGludCAyODggLy8gMjg4CiAgICBpbnRjXzEgLy8gOTYKICAgIGV4dHJhY3QzCiAgICBjb25jYXQKICAgIC8vIGNvbnRyYWN0cy92ZXJpZmllci5hbGdvLnRzOjE0OQogICAgLy8gY29uc3QgYWxwaGEgPSB0aGlzLmdldENoYWxsZW5nZSh0ZCk7CiAgICBjYWxsc3ViIGdldENoYWxsZW5nZQogICAgZnJhbWVfYnVyeSAwCiAgICAvLyBjb250cmFjdHMvdmVyaWZpZXIuYWxnby50czoxNTYKICAgIC8vIHRkID0gb3AuY29uY2F0KHRkLCBwcm9vZi5UMSk7CiAgICBmcmFtZV9kaWcgLTEKICAgIGludGMgNCAvLyAzODQKICAgIGludGNfMSAvLyA5NgogICAgZXh0cmFjdDMKICAgIGNvbmNhdAogICAgLy8gY29udHJhY3RzL3ZlcmlmaWVyLmFsZ28udHM6MTU3CiAgICAvLyB0ZCA9IG9wLmNvbmNhdCh0ZCwgcHJvb2YuVDIpOwogICAgZnJhbWVfZGlnIC0xCiAgICBwdXNoaW50IDQ4MCAvLyA0ODAKICAgIGludGNfMSAvLyA5NgogICAgZXh0cmFjdDMKICAgIGNvbmNhdAogICAgLy8gY29udHJhY3RzL3ZlcmlmaWVyLmFsZ28udHM6MTU4CiAgICAvLyB0ZCA9IG9wLmNvbmNhdCh0ZCwgcHJvb2YuVDMpOwogICAgZnJhbWVfZGlnIC0xCiAgICBwdXNoaW50IDU3NiAvLyA1NzYKICAgIGludGNfMSAvLyA5NgogICAgZXh0cmFjdDMKICAgIGNvbmNhdAogICAgLy8gY29udHJhY3RzL3ZlcmlmaWVyLmFsZ28udHM6MTU5CiAgICAvLyBjb25zdCB4aSA9IHRoaXMuZ2V0Q2hhbGxlbmdlKHRkKTsKICAgIGNhbGxzdWIgZ2V0Q2hhbGxlbmdlCiAgICBkdXAKICAgIGZyYW1lX2J1cnkgNAogICAgLy8gY29udHJhY3RzL3ZlcmlmaWVyLmFsZ28udHM6MTY2CiAgICAvLyB0ZCA9IG9wLmNvbmNhdCh0ZCwgcHJvb2YuZXZhbF9hKTsKICAgIGZyYW1lX2RpZyAtMQogICAgcHVzaGludCA4NjQgLy8gODY0CiAgICBpbnRjXzAgLy8gMzIKICAgIGV4dHJhY3QzCiAgICBjb25jYXQKICAgIC8vIGNvbnRyYWN0cy92ZXJpZmllci5hbGdvLnRzOjE2NwogICAgLy8gdGQgPSBvcC5jb25jYXQodGQsIHByb29mLmV2YWxfYik7CiAgICBmcmFtZV9kaWcgLTEKICAgIHB1c2hpbnQgODk2IC8vIDg5NgogICAgaW50Y18wIC8vIDMyCiAgICBleHRyYWN0MwogICAgY29uY2F0CiAgICAvLyBjb250cmFjdHMvdmVyaWZpZXIuYWxnby50czoxNjgKICAgIC8vIHRkID0gb3AuY29uY2F0KHRkLCBwcm9vZi5ldmFsX2MpOwogICAgZnJhbWVfZGlnIC0xCiAgICBwdXNoaW50IDkyOCAvLyA5MjgKICAgIGludGNfMCAvLyAzMgogICAgZXh0cmFjdDMKICAgIGNvbmNhdAogICAgLy8gY29udHJhY3RzL3ZlcmlmaWVyLmFsZ28udHM6MTY5CiAgICAvLyB0ZCA9IG9wLmNvbmNhdCh0ZCwgcHJvb2YuZXZhbF9zMSk7CiAgICBmcmFtZV9kaWcgLTEKICAgIHB1c2hpbnQgOTYwIC8vIDk2MAogICAgaW50Y18wIC8vIDMyCiAgICBleHRyYWN0MwogICAgY29uY2F0CiAgICAvLyBjb250cmFjdHMvdmVyaWZpZXIuYWxnby50czoxNzAKICAgIC8vIHRkID0gb3AuY29uY2F0KHRkLCBwcm9vZi5ldmFsX3MyKTsKICAgIGZyYW1lX2RpZyAtMQogICAgcHVzaGludCA5OTIgLy8gOTkyCiAgICBpbnRjXzAgLy8gMzIKICAgIGV4dHJhY3QzCiAgICBjb25jYXQKICAgIC8vIGNvbnRyYWN0cy92ZXJpZmllci5hbGdvLnRzOjE3MQogICAgLy8gdGQgPSBvcC5jb25jYXQodGQsIHByb29mLmV2YWxfencpOwogICAgZnJhbWVfZGlnIC0xCiAgICBwdXNoaW50IDEwMjQgLy8gMTAyNAogICAgaW50Y18wIC8vIDMyCiAgICBleHRyYWN0MwogICAgY29uY2F0CiAgICAvLyBjb250cmFjdHMvdmVyaWZpZXIuYWxnby50czoxNzMKICAgIC8vIGNvbnN0IHYgPSBuZXcgRml4ZWRBcnJheTxieXRlczwzMj4sIDY+KCk7CiAgICBwdXNoaW50IDE5MiAvLyAxOTIKICAgIGJ6ZXJvCiAgICAvLyBjb250cmFjdHMvdmVyaWZpZXIuYWxnby50czoxNzQKICAgIC8vIHZbMV0gPSB0aGlzLmdldENoYWxsZW5nZSh0ZCk7CiAgICBzd2FwCiAgICBjYWxsc3ViIGdldENoYWxsZW5nZQogICAgZHVwCiAgICBsZW4KICAgIGludGNfMCAvLyAzMgogICAgPT0KICAgIGFzc2VydCAvLyBpbnZhbGlkIHNpemUKICAgIHJlcGxhY2UyIDMyCiAgICBmcmFtZV9idXJ5IDMKICAgIC8vIGNvbnRyYWN0cy92ZXJpZmllci5hbGdvLnRzOjE3NgogICAgLy8gZm9yIChsZXQgaTogdWludDY0ID0gMjsgaSA8IDY7IGkrKykgewogICAgcHVzaGludCAyIC8vIDIKICAgIGZyYW1lX2J1cnkgNQoKY29tcHV0ZUNoYWxsZW5nZXNfd2hpbGVfdG9wQDU6CiAgICAvLyBjb250cmFjdHMvdmVyaWZpZXIuYWxnby50czoxNzYKICAgIC8vIGZvciAobGV0IGk6IHVpbnQ2NCA9IDI7IGkgPCA2OyBpKyspIHsKICAgIGZyYW1lX2RpZyA1CiAgICBwdXNoaW50IDYgLy8gNgogICAgPAogICAgYnogY29tcHV0ZUNoYWxsZW5nZXNfYWZ0ZXJfd2hpbGVANwogICAgLy8gY29udHJhY3RzL3ZlcmlmaWVyLmFsZ28udHM6MTc3CiAgICAvLyB2W2ldID0gYjMyKGZyTXVsKEJpZ1VpbnQodltpIC0gMV0gYXMgYnl0ZXM8MzI+KSwgQmlnVWludCh2WzFdKSkpOwogICAgZnJhbWVfZGlnIDUKICAgIGR1cAogICAgaW50Y18yIC8vIDEKICAgIC0KICAgIGludGNfMCAvLyAzMgogICAgKgogICAgZnJhbWVfZGlnIDMKICAgIGR1cAogICAgdW5jb3ZlciAyCiAgICBpbnRjXzAgLy8gMzIKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgZGlnIDEKICAgIGV4dHJhY3QgMzIgMzIgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICAvLyBjb250cmFjdHMvdmVyaWZpZXIuYWxnby50czoyNgogICAgLy8gcmV0dXJuIChhICogYikgJSBCTFMxMl8zODFfU0NBTEFSX01PRFVMVVM7CiAgICBiKgogICAgYnl0ZWNfMCAvLyAweDczZWRhNzUzMjk5ZDdkNDgzMzM5ZDgwODA5YTFkODA1NTNiZGE0MDJmZmZlNWJmZWZmZmZmZmZmMDAwMDAwMDEKICAgIGIlCiAgICAvLyBjb250cmFjdHMvdmVyaWZpZXIuYWxnby50czo0MgogICAgLy8gcmV0dXJuIEJ5dGVzKGEpLnRvRml4ZWQoeyBsZW5ndGg6IDMyIH0pOwogICAgZHVwCiAgICBsZW4KICAgIGludGNfMCAvLyAzMgogICAgPT0KICAgIGFzc2VydCAvLyBMZW5ndGggbXVzdCBiZSAzMgogICAgLy8gY29udHJhY3RzL3ZlcmlmaWVyLmFsZ28udHM6MTc3CiAgICAvLyB2W2ldID0gYjMyKGZyTXVsKEJpZ1VpbnQodltpIC0gMV0gYXMgYnl0ZXM8MzI+KSwgQmlnVWludCh2WzFdKSkpOwogICAgZGlnIDIKICAgIGludGNfMCAvLyAzMgogICAgKgogICAgc3dhcAogICAgcmVwbGFjZTMKICAgIGZyYW1lX2J1cnkgMwogICAgLy8gY29udHJhY3RzL3ZlcmlmaWVyLmFsZ28udHM6MTc2CiAgICAvLyBmb3IgKGxldCBpOiB1aW50NjQgPSAyOyBpIDwgNjsgaSsrKSB7CiAgICBpbnRjXzIgLy8gMQogICAgKwogICAgZnJhbWVfYnVyeSA1CiAgICBiIGNvbXB1dGVDaGFsbGVuZ2VzX3doaWxlX3RvcEA1Cgpjb21wdXRlQ2hhbGxlbmdlc19hZnRlcl93aGlsZUA3OgogICAgLy8gY29udHJhY3RzL3ZlcmlmaWVyLmFsZ28udHM6MTg0CiAgICAvLyB0ZCA9IG9wLmNvbmNhdCh0ZCwgcHJvb2YuV3hpKTsKICAgIGZyYW1lX2RpZyAtMQogICAgcHVzaGludCA2NzIgLy8gNjcyCiAgICBpbnRjXzEgLy8gOTYKICAgIGV4dHJhY3QzCiAgICAvLyBjb250cmFjdHMvdmVyaWZpZXIuYWxnby50czoxODUKICAgIC8vIHRkID0gb3AuY29uY2F0KHRkLCBwcm9vZi5XeGl3KTsKICAgIGZyYW1lX2RpZyAtMQogICAgcHVzaGludCA3NjggLy8gNzY4CiAgICBpbnRjXzEgLy8gOTYKICAgIGV4dHJhY3QzCiAgICBjb25jYXQKICAgIC8vIGNvbnRyYWN0cy92ZXJpZmllci5hbGdvLnRzOjE4NgogICAgLy8gY29uc3QgdSA9IHRoaXMuZ2V0Q2hhbGxlbmdlKHRkKTsKICAgIGNhbGxzdWIgZ2V0Q2hhbGxlbmdlCiAgICAvLyBjb250cmFjdHMvdmVyaWZpZXIuYWxnby50czoxODgtMTk3CiAgICAvLyByZXR1cm4gewogICAgLy8gICBiZXRhLAogICAgLy8gICBnYW1tYSwKICAgIC8vICAgYWxwaGEsCiAgICAvLyAgIHhpLAogICAgLy8gICB2LAogICAgLy8gICB1LAogICAgLy8gICB4aW46IEJ5dGVzPDMyPigpLAogICAgLy8gICB6aDogQnl0ZXM8MzI+KCksCiAgICAvLyB9OwogICAgZnJhbWVfZGlnIDEKICAgIGxlbgogICAgaW50Y18wIC8vIDMyCiAgICA9PQogICAgYXNzZXJ0IC8vIGludmFsaWQgc2l6ZQogICAgZnJhbWVfZGlnIDIKICAgIGxlbgogICAgaW50Y18wIC8vIDMyCiAgICA9PQogICAgYXNzZXJ0IC8vIGludmFsaWQgc2l6ZQogICAgZnJhbWVfZGlnIDAKICAgIGR1cAogICAgbGVuCiAgICBpbnRjXzAgLy8gMzIKICAgID09CiAgICBhc3NlcnQgLy8gaW52YWxpZCBzaXplCiAgICBmcmFtZV9kaWcgNgogICAgc3dhcAogICAgY29uY2F0CiAgICBmcmFtZV9kaWcgNAogICAgZHVwCiAgICBjb3ZlciAyCiAgICBsZW4KICAgIGludGNfMCAvLyAzMgogICAgPT0KICAgIGFzc2VydCAvLyBpbnZhbGlkIHNpemUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIDMKICAgIGNvbmNhdAogICAgZGlnIDEKICAgIGxlbgogICAgaW50Y18wIC8vIDMyCiAgICA9PQogICAgYXNzZXJ0IC8vIGludmFsaWQgc2l6ZQogICAgc3dhcAogICAgY29uY2F0CiAgICBwdXNoYnl0ZXMgMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMAogICAgY29uY2F0CiAgICBmcmFtZV9kaWcgLTMKICAgIGZyYW1lX2RpZyAtMgogICAgZnJhbWVfZGlnIC0xCiAgICBmcmFtZV9idXJ5IDMKICAgIGZyYW1lX2J1cnkgMgogICAgZnJhbWVfYnVyeSAxCiAgICBmcmFtZV9idXJ5IDAKICAgIHJldHN1YgoKCi8vIGNvbnRyYWN0cy92ZXJpZmllci5hbGdvLnRzOjpQbG9ua1ZlcmlmaWVyLmNhbGN1bGF0ZUxhZ3JhbmdlRXZhbHVhdGlvbnMoY2hhbGxlbmdlc0lucHV0OiBieXRlcywgdms6IGJ5dGVzKSAtPiBieXRlczoKY2FsY3VsYXRlTGFncmFuZ2VFdmFsdWF0aW9uczoKICAgIC8vIGNvbnRyYWN0cy92ZXJpZmllci5hbGdvLnRzOjIwMC0yMDMKICAgIC8vIGNhbGN1bGF0ZUxhZ3JhbmdlRXZhbHVhdGlvbnMoCiAgICAvLyAgIGNoYWxsZW5nZXNJbnB1dDogQ2hhbGxlbmdlcywKICAgIC8vICAgdms6IFZlcmlmaWNhdGlvbktleSwKICAgIC8vICk6IHsgTDogYnl0ZXM8MzI+W107IGNoYWxsZW5nZXM6IENoYWxsZW5nZXMgfSB7CiAgICBwcm90byAyIDEKICAgIC8vIGNvbnRyYWN0cy92ZXJpZmllci5hbGdvLnRzOjIwNQogICAgLy8gbGV0IHhpbiA9IEJpZ1VpbnQoY2hhbGxlbmdlcy54aSk7CiAgICBmcmFtZV9kaWcgLTIKICAgIGV4dHJhY3QgOTYgMzIKICAgIC8vIGNvbnRyYWN0cy92ZXJpZmllci5hbGdvLnRzOjIwNwogICAgLy8gbGV0IGRvbWFpblNpemU6IHVpbnQ2NCA9IDE7CiAgICBpbnRjXzIgLy8gMQogICAgLy8gY29udHJhY3RzL3ZlcmlmaWVyLmFsZ28udHM6MjA4CiAgICAvLyBmb3IgKGxldCBpOiB1aW50NjQgPSAwOyBpIDwgdmsucG93ZXI7IGkrKykgewogICAgaW50Y18zIC8vIDAKCmNhbGN1bGF0ZUxhZ3JhbmdlRXZhbHVhdGlvbnNfd2hpbGVfdG9wQDE6CiAgICAvLyBjb250cmFjdHMvdmVyaWZpZXIuYWxnby50czoyMDgKICAgIC8vIGZvciAobGV0IGk6IHVpbnQ2NCA9IDA7IGkgPCB2ay5wb3dlcjsgaSsrKSB7CiAgICBmcmFtZV9kaWcgLTEKICAgIHB1c2hpbnQgNzY4IC8vIDc2OAogICAgZXh0cmFjdF91aW50NjQKICAgIGZyYW1lX2RpZyAyCiAgICA+CiAgICBieiBjYWxjdWxhdGVMYWdyYW5nZUV2YWx1YXRpb25zX2FmdGVyX3doaWxlQDMKICAgIC8vIGNvbnRyYWN0cy92ZXJpZmllci5hbGdvLnRzOjI2CiAgICAvLyByZXR1cm4gKGEgKiBiKSAlIEJMUzEyXzM4MV9TQ0FMQVJfTU9EVUxVUzsKICAgIGZyYW1lX2RpZyAwCiAgICBkdXAKICAgIGIqCiAgICBieXRlY18wIC8vIDB4NzNlZGE3NTMyOTlkN2Q0ODMzMzlkODA4MDlhMWQ4MDU1M2JkYTQwMmZmZmU1YmZlZmZmZmZmZmYwMDAwMDAwMQogICAgYiUKICAgIGZyYW1lX2J1cnkgMAogICAgLy8gY29udHJhY3RzL3ZlcmlmaWVyLmFsZ28udHM6MjEwCiAgICAvLyBkb21haW5TaXplICo9IDI7CiAgICBmcmFtZV9kaWcgMQogICAgcHVzaGludCAyIC8vIDIKICAgICoKICAgIGZyYW1lX2J1cnkgMQogICAgLy8gY29udHJhY3RzL3ZlcmlmaWVyLmFsZ28udHM6MjA4CiAgICAvLyBmb3IgKGxldCBpOiB1aW50NjQgPSAwOyBpIDwgdmsucG93ZXI7IGkrKykgewogICAgZnJhbWVfZGlnIDIKICAgIGludGNfMiAvLyAxCiAgICArCiAgICBmcmFtZV9idXJ5IDIKICAgIGIgY2FsY3VsYXRlTGFncmFuZ2VFdmFsdWF0aW9uc193aGlsZV90b3BAMQoKY2FsY3VsYXRlTGFncmFuZ2VFdmFsdWF0aW9uc19hZnRlcl93aGlsZUAzOgogICAgLy8gY29udHJhY3RzL3ZlcmlmaWVyLmFsZ28udHM6MjEzCiAgICAvLyBjaGFsbGVuZ2VzLnhpbiA9IEJ5dGVzPDMyPih4aW4pOwogICAgZnJhbWVfZGlnIDAKICAgIGR1cAogICAgbGVuCiAgICBpbnRjXzAgLy8gMzIKICAgID09CiAgICBhc3NlcnQgLy8gTGVuZ3RoIG11c3QgYmUgMzIKICAgIGZyYW1lX2RpZyAtMgogICAgcHVzaGludCAzNTIgLy8gMzUyCiAgICBkaWcgMgogICAgcmVwbGFjZTMKICAgIC8vIGNvbnRyYWN0cy92ZXJpZmllci5hbGdvLnRzOjMxCiAgICAvLyBjb25zdCBhTjogYmlndWludCA9IGEgJSByOwogICAgc3dhcAogICAgYnl0ZWNfMCAvLyAweDczZWRhNzUzMjk5ZDdkNDgzMzM5ZDgwODA5YTFkODA1NTNiZGE0MDJmZmZlNWJmZWZmZmZmZmZmMDAwMDAwMDEKICAgIGIlCiAgICAvLyBjb250cmFjdHMvdmVyaWZpZXIuYWxnby50czozMwogICAgLy8gcmV0dXJuIChhTiArIHIgLSBiTikgJSByOyAvLyAoYSAtIGIpIG1vZCByLCBndWFyYW50ZWVkIG5vbi1uZWdhdGl2ZQogICAgYnl0ZWNfMCAvLyAweDczZWRhNzUzMjk5ZDdkNDgzMzM5ZDgwODA5YTFkODA1NTNiZGE0MDJmZmZlNWJmZWZmZmZmZmZmMDAwMDAwMDEKICAgIGIrCiAgICBieXRlY18wIC8vIDB4NzNlZGE3NTMyOTlkN2Q0ODMzMzlkODA4MDlhMWQ4MDU1M2JkYTQwMmZmZmU1YmZlZmZmZmZmZmYwMDAwMDAwMQogICAgYiUKICAgIC8vIGNvbnRyYWN0cy92ZXJpZmllci5hbGdvLnRzOjQyCiAgICAvLyByZXR1cm4gQnl0ZXMoYSkudG9GaXhlZCh7IGxlbmd0aDogMzIgfSk7CiAgICBkdXAKICAgIGxlbgogICAgaW50Y18wIC8vIDMyCiAgICA9PQogICAgYXNzZXJ0IC8vIExlbmd0aCBtdXN0IGJlIDMyCiAgICAvLyBjb250cmFjdHMvdmVyaWZpZXIuYWxnby50czoyMTQKICAgIC8vIGNoYWxsZW5nZXMuemggPSBiMzIoZnJTdWIoeGluLCBCaWdVaW50KCkpKTsKICAgIGludGMgNCAvLyAzODQKICAgIHN3YXAKICAgIHJlcGxhY2UzCiAgICAvLyBjb250cmFjdHMvdmVyaWZpZXIuYWxnby50czoyMTgKICAgIC8vIHJldHVybiB7IEwsIGNoYWxsZW5nZXMgfTsKICAgIHB1c2hieXRlcyAweDAxYTIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgLy8gY29udHJhY3RzL3ZlcmlmaWVyLmFsZ28udHM6MjE2CiAgICAvLyBjb25zdCBMOiBieXRlczwzMj5bXSA9IFtdOwogICAgcHVzaGJ5dGVzIDB4MDAwMAogICAgLy8gY29udHJhY3RzL3ZlcmlmaWVyLmFsZ28udHM6MjE4CiAgICAvLyByZXR1cm4geyBMLCBjaGFsbGVuZ2VzIH07CiAgICBjb25jYXQKICAgIGZyYW1lX2J1cnkgMAogICAgcmV0c3ViCg==",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAFIGABAIADJgIgc+2nUymdfUgzOdgICaHYBVO9pAL//lv+/////wAAAAEEFR98dTEbQQBvggMEHSzoDQQDqt5mBAVfBtY2GgCOAwAzABgAAiVDMRkURDEYRDYaATYaAogCQClMULAkQzEZFEQxGEQ2GgE2GgI2GgOIAFlGAylMULAkQzEZFEQxGEQ2GgE2GgI2GgOIABiAAQAlTwJUKUxQsCRDMRlA/6gxGBREJEOKAwGL/Yv+i/+IABqM/4z+jP1XQCCwJImKAQGL/wIoqkkVIhJEiYoDBCVHBIAAi/1XAGCL/VdgYFCL/VfAYFCL/YGgAiNYUIv9IQQjWFCL/YHgAyNYUIv9gcAEI1hQi/2BoAUjWFCL/iVZJYsIiwcMQQAmi/5XAgCLCElOAiILIlgoqiigKKpJFSISRIsGTFCMBiQIjAhC/9KL/1cAYIsGTFCL/1dgYFCL/1fAYFCI/2dJjAFJiP9gSYwCSwFMUEmMBov/gaACI1hQiP9LjACL/yEEI1hQi/+B4AMjWFCL/4HABCNYUIj/L0mMBIv/geAGIlhQi/+BgAciWFCL/4GgByJYUIv/gcAHIlhQi/+B4AciWFCL/4GACCJYUIHAAa9MiP70SRUiEkRcIIwDgQKMBYsFgQYMQQAqiwVJJAkiC4sDSU8CIlhLAVcgIKMoqkkVIhJESwIiC0xdjAMkCIwFQv/Oi/+BoAUjWIv/gYAGI1hQiP6jiwEVIhJEiwIVIhJEiwBJFSISRIsGTFCLBElOAhUiEkRMUIsDUEsBFSISRExQgEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUIv9i/6L/4wDjAKMAYwAiYoCAYv+V2AgJCWL/4GABluLAg1BABiLAEmjKKqMAIsBgQILjAGLAiQIjAJC/9yLAEkVIhJEi/6B4AJLAl1MKKoooCiqSRUiEkQhBExdgAIBokxQgAIAAFCMAIk=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 0,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}