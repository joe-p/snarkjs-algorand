{
    "name": "PlonkVerifier",
    "structs": {
        "Proof": [
            {
                "name": "A",
                "type": "byte[96]"
            },
            {
                "name": "B",
                "type": "byte[96]"
            },
            {
                "name": "C",
                "type": "byte[96]"
            },
            {
                "name": "Z",
                "type": "byte[96]"
            },
            {
                "name": "T1",
                "type": "byte[96]"
            },
            {
                "name": "T2",
                "type": "byte[96]"
            },
            {
                "name": "T3",
                "type": "byte[96]"
            },
            {
                "name": "Wxi",
                "type": "byte[96]"
            },
            {
                "name": "Wxiw",
                "type": "byte[96]"
            },
            {
                "name": "eval_a",
                "type": "uint256"
            },
            {
                "name": "eval_b",
                "type": "uint256"
            },
            {
                "name": "eval_c",
                "type": "uint256"
            },
            {
                "name": "eval_s1",
                "type": "uint256"
            },
            {
                "name": "eval_s2",
                "type": "uint256"
            },
            {
                "name": "eval_zw",
                "type": "uint256"
            }
        ],
        "VerificationKey": [
            {
                "name": "Qm",
                "type": "byte[96]"
            },
            {
                "name": "Ql",
                "type": "byte[96]"
            },
            {
                "name": "Qr",
                "type": "byte[96]"
            },
            {
                "name": "Qo",
                "type": "byte[96]"
            },
            {
                "name": "Qc",
                "type": "byte[96]"
            },
            {
                "name": "S1",
                "type": "byte[96]"
            },
            {
                "name": "S2",
                "type": "byte[96]"
            },
            {
                "name": "S3",
                "type": "byte[96]"
            },
            {
                "name": "power",
                "type": "uint64"
            },
            {
                "name": "nPublic",
                "type": "uint64"
            },
            {
                "name": "k1",
                "type": "uint64"
            },
            {
                "name": "k2",
                "type": "uint64"
            },
            {
                "name": "X_2",
                "type": "byte[192]"
            }
        ]
    },
    "methods": [
        {
            "name": "_dummy",
            "args": [
                {
                    "type": "(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64,uint64,uint64,byte[192])",
                    "struct": "VerificationKey",
                    "name": "_vk"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "CloseOut"
                ]
            },
            "readonly": false,
            "desc": "Dummy function that only exists so we can have the VerificationKey type in the generated client",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "verify",
            "args": [
                {
                    "type": "uint256[]",
                    "name": "signals"
                },
                {
                    "type": "(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint256,uint256,uint256,uint256,uint256,uint256)",
                    "struct": "Proof",
                    "name": "proof"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        1293
                    ],
                    "errorMessage": "Fr inverse of zero"
                },
                {
                    "pc": [
                        440
                    ],
                    "errorMessage": "Length must be 192"
                },
                {
                    "pc": [
                        104
                    ],
                    "errorMessage": "Length must be 32"
                },
                {
                    "pc": [
                        179,
                        202,
                        225,
                        248,
                        271,
                        294,
                        317,
                        340,
                        1849,
                        1858,
                        1989,
                        1999,
                        2026,
                        2035,
                        2042,
                        2109,
                        2119,
                        2345,
                        2364,
                        2374,
                        2403,
                        2412,
                        2423,
                        2430,
                        2458
                    ],
                    "errorMessage": "Length must be 96"
                },
                {
                    "pc": [
                        50
                    ],
                    "errorMessage": "OnCompletion is not CloseOut"
                },
                {
                    "pc": [
                        30
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        2516
                    ],
                    "errorMessage": "Verification failed"
                },
                {
                    "pc": [
                        64
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        33,
                        53
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        574,
                        758,
                        787,
                        790,
                        809,
                        1030,
                        1044,
                        1058,
                        1072,
                        1085,
                        1513,
                        1528,
                        2063,
                        2068,
                        2075,
                        2084,
                        2093
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        1410
                    ],
                    "errorMessage": "max array length exceeded"
                },
                {
                    "pc": [
                        94,
                        133,
                        800,
                        1145,
                        1170,
                        1401,
                        1549,
                        1724
                    ],
                    "errorMessage": "overflow"
                }
            ],
            "pcOffsetMethod": "cblocks"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "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",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 0,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {
        "DEBUG_LOGGING": {
            "type": "AVMUint64"
        },
        "VERIFICATION_KEY": {
            "type": "AVMBytes"
        },
        "ROOT_OF_UNITY": {
            "type": "AVMBytes"
        }
    }
}