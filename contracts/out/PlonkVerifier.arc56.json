{
    "name": "PlonkVerifier",
    "structs": {
        "Proof": [
            {
                "name": "A",
                "type": "byte[96]"
            },
            {
                "name": "B",
                "type": "byte[96]"
            },
            {
                "name": "C",
                "type": "byte[96]"
            },
            {
                "name": "Z",
                "type": "byte[96]"
            },
            {
                "name": "T1",
                "type": "byte[96]"
            },
            {
                "name": "T2",
                "type": "byte[96]"
            },
            {
                "name": "T3",
                "type": "byte[96]"
            },
            {
                "name": "Wxi",
                "type": "byte[96]"
            },
            {
                "name": "Wxiw",
                "type": "byte[96]"
            },
            {
                "name": "eval_a",
                "type": "byte[32]"
            },
            {
                "name": "eval_b",
                "type": "byte[32]"
            },
            {
                "name": "eval_c",
                "type": "byte[32]"
            },
            {
                "name": "eval_s1",
                "type": "byte[32]"
            },
            {
                "name": "eval_s2",
                "type": "byte[32]"
            },
            {
                "name": "eval_zw",
                "type": "byte[32]"
            }
        ],
        "VerificationKey": [
            {
                "name": "Qm",
                "type": "byte[96]"
            },
            {
                "name": "Ql",
                "type": "byte[96]"
            },
            {
                "name": "Qr",
                "type": "byte[96]"
            },
            {
                "name": "Qo",
                "type": "byte[96]"
            },
            {
                "name": "Qc",
                "type": "byte[96]"
            },
            {
                "name": "S1",
                "type": "byte[96]"
            },
            {
                "name": "S2",
                "type": "byte[96]"
            },
            {
                "name": "S3",
                "type": "byte[96]"
            },
            {
                "name": "power",
                "type": "uint64"
            },
            {
                "name": "nPublic",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "verify",
            "args": [
                {
                    "type": "(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64)",
                    "struct": "VerificationKey",
                    "name": "vk"
                },
                {
                    "type": "byte[32][]",
                    "name": "signals"
                },
                {
                    "type": "(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[32],byte[32],byte[32],byte[32],byte[32],byte[32])",
                    "struct": "Proof",
                    "name": "proof"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        992
                    ],
                    "errorMessage": "Fr inverse of zero"
                },
                {
                    "pc": [
                        152
                    ],
                    "errorMessage": "Length must be 32"
                },
                {
                    "pc": [
                        70
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        112
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        73
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        245,
                        450,
                        453,
                        708,
                        720,
                        732,
                        744,
                        755,
                        1233,
                        1248
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        420,
                        466,
                        508,
                        514,
                        521,
                        534,
                        545,
                        818,
                        839,
                        1103
                    ],
                    "errorMessage": "invalid size"
                },
                {
                    "pc": [
                        142
                    ],
                    "errorMessage": "overflow"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAFIAFgAIADJgMgc+2nUymdfUgzOdgICaHYBVO9pAL//lv+/////wAAAAEAAQExG0EANIAEWBLQ9DYaAI4BAAIlQzEZFEQxGEQ2GgE2GgI2GgOIAESAAQAlTwJUgAQVH3x1TFCwI0MxGUD/1DEYFEQjQ4oCAYv+KKqL/yiqTCigTKEoqomKAQGL/xUiDkQir4v/q0kVIhJEiYoDASVHEClHBIv9VwBgi/1XYGBQi/1XwGBQi/2BoAIkWFCL/SEEJFhQi/2B4AMkWFCL/YHABCRYUIv9gaAFJFhQi/4lWSWLGIsXDEEAIIv+VwIAixhJTgIiCyJYKKqI/4uLFkxQjBYjCIwYQv/Yi/9XAGCLFkxQi/9XYGBQi/9XwGBQAiiqiP9jSYwFSQIoqoj/WUmMCFBJjBaL/4GgAiRYUAIoqoj/REmMA4v/IQQkWFCL/4HgAyRYUIv/gcAEJFhQAiiqiP8kSYwPi/+B4AYiWFCL/4GAByJYUIv/gaAHIlhQi/+BwAciWFCL/4HgByJYUIv/gYAIIlhQgcABr0wCKKqI/uZJFSISRFwgjA2BAowSixKBBgxBAC2LEkkjCSILiw1JTwIiWEsBVyAgoyiqiP64SRUiEkRLAiILTF2MDSMIjBJC/8uL/4GgBSRYi/+BgAYkWFACKKqI/o+LBRUiEkSLCBUiEkSLA0kVIhJEixZMUIsPSU4CFSISRExQiw1QSwEVIhJETFCAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQSYwGSVcAIIAEYmV0YbCwSVcgIIAFZ2FtbWGwsElXQCCABWFscGhhsLBJV2AgSYwQgAJ4abCwSYHAAiJYgAF1sLBJgeACIliAA3hpbrCwSSEEIliAAnposLBXgMBJVyAggAR2WzFdsLBJV0AggAR2WzJdsLBJV2AggAR2WzNdsLBJV4AggAR2WzRdsLBXoCCABHZbNV2wsCOMESWMEov9gYAGW4sSDUEAGIsQSaMoqowQixGBAguMEYsSIwiMEkL/3IsQSYj9WEkVIhJEiwaB4AJPAl1MKoj9M4j9Q0kVIhJEIQRMXYwGixEWKKqMCSqMDoBCAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAjACL/YGIBltJjBVAAVgjjBMjjBSLFIsTDkEA2osGSSEEIliLDklPAqMoqk8CV2AgTwKI/KKLCaMoqkwoqowBKKpJKalEgCBz7adTKZ19SDM52AgJodgFU72kAv/+W/7////+/////yqMC0woqowEjAeLBymlQQAtiwcqrCmpiwuMDEEACYsLiwSjKKqMDIsMjAuLBEmjKKqMBIsHgAECoowHQv/MiwGLC6Moqoj8O0kVIhJEixRJTgIiC4ECCIsATE8CXYwAiw6AIENSeovKJSRy62dKGmIIkNelNK8Uth4KvnSh9nGMEwR3oyiqjA4jCIwUQv8egAIBoosGUIsAUEklWUsBFVJJVwIAjAJXIiCABkwxKHhpKbCwKYwKJYwSixKLFwxBACuL/lcCAIsSSU4CIgsiWCiqTCMISYwSIguLAkwiWKMoqosKTIj7iYwKQv/NiwqI+5KABlBJKHhpKbCwI4wAiYsVjBNC/qQ=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 0,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}