{
    "name": "PlonkVerifier",
    "structs": {
        "ObjectC300AAEE": [
            {
                "name": "L",
                "type": "byte[32][]"
            },
            {
                "name": "challenges",
                "type": "Challenges"
            }
        ],
        "Challenges": [
            {
                "name": "beta",
                "type": "byte[32]"
            },
            {
                "name": "gamma",
                "type": "byte[32]"
            },
            {
                "name": "alpha",
                "type": "byte[32]"
            },
            {
                "name": "xi",
                "type": "byte[32]"
            },
            {
                "name": "v",
                "type": "byte[32][6]"
            },
            {
                "name": "u",
                "type": "byte[32]"
            },
            {
                "name": "xin",
                "type": "byte[32]"
            },
            {
                "name": "zh",
                "type": "byte[32]"
            }
        ],
        "Proof": [
            {
                "name": "A",
                "type": "byte[96]"
            },
            {
                "name": "B",
                "type": "byte[96]"
            },
            {
                "name": "C",
                "type": "byte[96]"
            },
            {
                "name": "Z",
                "type": "byte[96]"
            },
            {
                "name": "T1",
                "type": "byte[96]"
            },
            {
                "name": "T2",
                "type": "byte[96]"
            },
            {
                "name": "T3",
                "type": "byte[96]"
            },
            {
                "name": "Wxi",
                "type": "byte[96]"
            },
            {
                "name": "Wxiw",
                "type": "byte[96]"
            },
            {
                "name": "eval_a",
                "type": "byte[32]"
            },
            {
                "name": "eval_b",
                "type": "byte[32]"
            },
            {
                "name": "eval_c",
                "type": "byte[32]"
            },
            {
                "name": "eval_s1",
                "type": "byte[32]"
            },
            {
                "name": "eval_s2",
                "type": "byte[32]"
            },
            {
                "name": "eval_zw",
                "type": "byte[32]"
            }
        ],
        "VerificationKey": [
            {
                "name": "Qm",
                "type": "byte[96]"
            },
            {
                "name": "Ql",
                "type": "byte[96]"
            },
            {
                "name": "Qr",
                "type": "byte[96]"
            },
            {
                "name": "Qo",
                "type": "byte[96]"
            },
            {
                "name": "Qc",
                "type": "byte[96]"
            },
            {
                "name": "S1",
                "type": "byte[96]"
            },
            {
                "name": "S2",
                "type": "byte[96]"
            },
            {
                "name": "S3",
                "type": "byte[96]"
            },
            {
                "name": "power",
                "type": "uint64"
            },
            {
                "name": "nPublic",
                "type": "uint64"
            },
            {
                "name": "omega",
                "type": "byte[32]"
            }
        ]
    },
    "methods": [
        {
            "name": "verify",
            "args": [
                {
                    "type": "(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64,byte[32])",
                    "struct": "VerificationKey",
                    "name": "vk"
                },
                {
                    "type": "byte[32][]",
                    "name": "signals"
                },
                {
                    "type": "(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[32],byte[32],byte[32],byte[32],byte[32],byte[32])",
                    "struct": "Proof",
                    "name": "proof"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "computeChallenges",
            "args": [
                {
                    "type": "(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64,byte[32])",
                    "struct": "VerificationKey",
                    "name": "vk"
                },
                {
                    "type": "byte[32][]",
                    "name": "signals"
                },
                {
                    "type": "(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[32],byte[32],byte[32],byte[32],byte[32],byte[32])",
                    "struct": "Proof",
                    "name": "proof"
                }
            ],
            "returns": {
                "type": "(byte[32],byte[32],byte[32],byte[32],byte[32][6],byte[32],byte[32],byte[32])",
                "struct": "Challenges"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "calculateLagrangeEvaluations",
            "args": [
                {
                    "type": "(byte[32],byte[32],byte[32],byte[32],byte[32][6],byte[32],byte[32],byte[32])",
                    "struct": "Challenges",
                    "name": "challengesInput"
                },
                {
                    "type": "(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64,byte[32])",
                    "struct": "VerificationKey",
                    "name": "vk"
                }
            ],
            "returns": {
                "type": "(byte[32][],(byte[32],byte[32],byte[32],byte[32],byte[32][6],byte[32],byte[32],byte[32]))",
                "struct": "ObjectC300AAEE"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        874
                    ],
                    "errorMessage": "Fr inverse of zero"
                },
                {
                    "pc": [
                        234,
                        336,
                        536,
                        755,
                        773,
                        982
                    ],
                    "errorMessage": "Length must be 32"
                },
                {
                    "pc": [
                        90,
                        112,
                        139
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        176
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        93,
                        115,
                        142
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        325,
                        523,
                        526
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        493,
                        575,
                        581,
                        588,
                        601,
                        612
                    ],
                    "errorMessage": "invalid size"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAFIAFgAIADJgQgc+2nUymdfUgzOdgICaHYBVO9pAL//lv+/////wAAAAEAAQEEFR98dTEbQQBvggMEHSzoDQQDqt5mBAVfBtY2GgCOAwAzABgAAiVDMRkURDEYRDYaATYaAogCUitMULAjQzEZFEQxGEQ2GgE2GgI2GgOIAGxGAytMULAjQzEZFEQxGEQ2GgE2GgI2GgOIACuAAQAlTwJUK0xQsCNDMRlA/6gxGBREI0OKAgGL/iiqi/8oqkwooEyhKKqJigMBi/2L/ov/iAAajP+M/oz9V0AgsCOJigEBi/8CKKpJFSISRImKAwQlRwQpi/1XAGCL/VdgYFCL/VfAYFCL/YGgAiRYUIv9IQQkWFCL/YHgAyRYUIv9gcAEJFhQi/2BoAUkWFCL/iVZJYsIiwcMQQAmi/5XAgCLCElOAiILIlgoqiigKKpJFSISRIsGTFCMBiMIjAhC/9KL/1cAYIsGTFCL/1dgYFCL/1fAYFCI/2hJjAFJiP9hSYwCSwFMUEmMBov/gaACJFhQiP9MjACL/yEEJFhQi/+B4AMkWFCL/4HABCRYUIj/MEmMBIv/geAGIlhQi/+BgAciWFCL/4GgByJYUIv/gcAHIlhQi/+B4AciWFCL/4GACCJYUIHAAa9MiP71SRUiEkRcIIwDgQKMBYsFgQYMQQAqiwVJIwkiC4sDSU8CIlhLAVcgIKMoqkkVIhJESwIiC0xdjAMjCIwFQv/Oi/+BoAUkWIv/gYAGJFhQiP6kiwEVIhJEiwIVIhJEiwBJFSISRIsGTFCLBElOAhUiEkRMUIsDUEsBFSISRExQgEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUIv9i/6L/4wDjAKMAYwAiYoCASVHCClHAov+V2AgIyWL/4GABluLDg1BABiLDEmjKKqMDIsNgQILjA2LDiMIjA5C/9yLDEkVIhJEi/6B4AJLAl1MKoj9skkVIhJEIQRMXYwDgAIAAIwAiw0WKKoooCiqjAUqjAiL/4GIBltJjAtAAPojjAkjjAqLCosJDEEA34sDSSEEIliLCElPAqMoqk8CV2AgTwKI/WCLBaMoqkwoqiigKKqMASiqKKAoqkkpqUSAIHPtp1MpnX1IMznYCAmh2AVTvaQC//5b/v////7/////KowGTCiqjAKMBIsEKaVBAC2LBCqsKamLBowHQQAJiwaLAqMoqowHiweMBosCSaMoqowCiwSAAQKijARC/8yLAYsGoyiqSRUiEkSLCklOAiILgQIIiwBMTwJdjACLCIAgQ1J6i8olJHLrZ0oaYgiQ16U0rxS2Hgq+dKH2cYwTBHejKKqMCCMIjApC/xmAAgGiiwNQiwBQjACJiwuMCUL/Ag==",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 0,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}