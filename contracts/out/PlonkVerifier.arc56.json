{
    "name": "PlonkVerifier",
    "structs": {
        "Proof": [
            {
                "name": "A",
                "type": "byte[96]"
            },
            {
                "name": "B",
                "type": "byte[96]"
            },
            {
                "name": "C",
                "type": "byte[96]"
            },
            {
                "name": "Z",
                "type": "byte[96]"
            },
            {
                "name": "T1",
                "type": "byte[96]"
            },
            {
                "name": "T2",
                "type": "byte[96]"
            },
            {
                "name": "T3",
                "type": "byte[96]"
            },
            {
                "name": "Wxi",
                "type": "byte[96]"
            },
            {
                "name": "Wxiw",
                "type": "byte[96]"
            },
            {
                "name": "eval_a",
                "type": "byte[32]"
            },
            {
                "name": "eval_b",
                "type": "byte[32]"
            },
            {
                "name": "eval_c",
                "type": "byte[32]"
            },
            {
                "name": "eval_s1",
                "type": "byte[32]"
            },
            {
                "name": "eval_s2",
                "type": "byte[32]"
            },
            {
                "name": "eval_zw",
                "type": "byte[32]"
            }
        ],
        "VerificationKey": [
            {
                "name": "Qm",
                "type": "byte[96]"
            },
            {
                "name": "Ql",
                "type": "byte[96]"
            },
            {
                "name": "Qr",
                "type": "byte[96]"
            },
            {
                "name": "Qo",
                "type": "byte[96]"
            },
            {
                "name": "Qc",
                "type": "byte[96]"
            },
            {
                "name": "S1",
                "type": "byte[96]"
            },
            {
                "name": "S2",
                "type": "byte[96]"
            },
            {
                "name": "S3",
                "type": "byte[96]"
            },
            {
                "name": "power",
                "type": "uint64"
            },
            {
                "name": "nPublic",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "verify",
            "args": [
                {
                    "type": "(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64)",
                    "struct": "VerificationKey",
                    "name": "vk"
                },
                {
                    "type": "byte[32][]",
                    "name": "signals"
                },
                {
                    "type": "(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[32],byte[32],byte[32],byte[32],byte[32],byte[32])",
                    "struct": "Proof",
                    "name": "proof"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        128
                    ],
                    "errorMessage": "Length must be 32"
                },
                {
                    "pc": [
                        65
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        107
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        68
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        241,
                        449,
                        452
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        419,
                        465,
                        507,
                        513,
                        520,
                        533,
                        544
                    ],
                    "errorMessage": "invalid size"
                },
                {
                    "pc": [
                        118
                    ],
                    "errorMessage": "overflow"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAEIGABACYBIHPtp1MpnX1IMznYCAmh2AVTvaQC//5b/v////8AAAABMRtBADSABFgS0PQ2GgCOAQACJUMxGRREMRhENhoBNhoCNhoDiAAxgAEAJU8CVIAEFR98dUxQsCRDMRlA/9QxGBREJEOKAQGL/xUiDkQir4v/q0kVIhJEiYoDASVHBIAAi/1XAGCL/VdgYFCL/VfAYFCL/YGgAiNYUIv9gYADI1hQi/2B4AMjWFCL/YHABCNYUIv9gaAFI1hQSQKADmdldENoYWxsZW5nZSA4sLCL/iVZJYsIiwcMQQAgi/5XAgCLCElOAiILIlgoqoj/d4sGTFCMBiQIjAhC/9iL/1cAYIsGTFCL/1dgYFCL/1fAYFACKKqI/09JjAFJAiiqiP9FSYwCSwFMUEmMBov/gaACI1hQAiiqiP8tjACL/4GAAyNYUIv/geADI1hQi/+BwAQjWFACKKqI/w1JjASL/4HgBiJYUIv/gYAHIlhQi/+BoAciWFCL/4HAByJYUIv/geAHIlhQi/+BgAgiWFCBwAGvTAIoqoj+z0kVIhJEXCCMA4ECjAWLBYEGDEEALYsFSSQJIguLA0lPAiJYSwFXICCjKKqI/qFJFSISREsCIgtMXYwDJAiMBUL/y4v/gaAFI1iL/4GABiNYUAIoqoj+eIsBFSISRIsCFSISRIsASRUiEkSLBkxQiwRJTgIVIhJETFCLA1BLARUiEkRMUIBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFBXACCABGJldGGwsCSMAIk=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 0,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}