{
    "name": "PlonkVerifier",
    "structs": {
        "Proof": [
            {
                "name": "A",
                "type": "byte[96]"
            },
            {
                "name": "B",
                "type": "byte[96]"
            },
            {
                "name": "C",
                "type": "byte[96]"
            },
            {
                "name": "Z",
                "type": "byte[96]"
            },
            {
                "name": "T1",
                "type": "byte[96]"
            },
            {
                "name": "T2",
                "type": "byte[96]"
            },
            {
                "name": "T3",
                "type": "byte[96]"
            },
            {
                "name": "Wxi",
                "type": "byte[96]"
            },
            {
                "name": "Wxiw",
                "type": "byte[96]"
            },
            {
                "name": "eval_a",
                "type": "uint256"
            },
            {
                "name": "eval_b",
                "type": "uint256"
            },
            {
                "name": "eval_c",
                "type": "uint256"
            },
            {
                "name": "eval_s1",
                "type": "uint256"
            },
            {
                "name": "eval_s2",
                "type": "uint256"
            },
            {
                "name": "eval_zw",
                "type": "uint256"
            }
        ],
        "VerificationKey": [
            {
                "name": "Qm",
                "type": "byte[96]"
            },
            {
                "name": "Ql",
                "type": "byte[96]"
            },
            {
                "name": "Qr",
                "type": "byte[96]"
            },
            {
                "name": "Qo",
                "type": "byte[96]"
            },
            {
                "name": "Qc",
                "type": "byte[96]"
            },
            {
                "name": "S1",
                "type": "byte[96]"
            },
            {
                "name": "S2",
                "type": "byte[96]"
            },
            {
                "name": "S3",
                "type": "byte[96]"
            },
            {
                "name": "power",
                "type": "uint64"
            },
            {
                "name": "nPublic",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "verify",
            "args": [
                {
                    "type": "(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64)",
                    "struct": "VerificationKey",
                    "name": "vk"
                },
                {
                    "type": "uint256[]",
                    "name": "signals"
                },
                {
                    "type": "(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint256,uint256,uint256,uint256,uint256,uint256)",
                    "struct": "Proof",
                    "name": "proof"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        929
                    ],
                    "errorMessage": "Fr inverse of zero"
                },
                {
                    "pc": [
                        240
                    ],
                    "errorMessage": "Length must be 32"
                },
                {
                    "pc": [
                        70
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        112
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        73
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        225,
                        414,
                        417,
                        639,
                        651,
                        663,
                        675,
                        686,
                        1170,
                        1185
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        232,
                        427,
                        747,
                        773,
                        1037,
                        1206,
                        1243
                    ],
                    "errorMessage": "overflow"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAFIAFgAIADJgMgc+2nUymdfUgzOdgICaHYBVO9pAL//lv+/////wAAAAEAAQExG0EANIAE6nV1ZjYaAI4BAAIlQzEZFEQxGEQ2GgE2GgI2GgOIADCAAQAlTwJUgAQVH3x1TFCwI0MxGUD/1DEYFEQjQ4oCAYv+KKqL/yiqTCigTKEoqomKAwElRw8pRwSL/VcAYIv9V2BgUIv9V8BgUIv9gaACJFhQi/0hBCRYUIv9geADJFhQi/2BwAQkWFCL/YGgBSRYUIv+JVklixeLFgxBACqL/lcCAIsXSU4CIgsiWCiqSRUiDkQir6tJFSISRIsVTFCMFSMIjBdC/86L/1cAYIsVTFCL/1dgYFCL/1fAYFCIA7lJiAO1UEmMFYv/gaACJFhQiAOmSYwEi/8hBCRYUIv/geADJFhQi/+BwAQkWFCIA4lJjA6L/4HgBiJYUIv/gYAHIlhQi/+BoAciWFCL/4HAByJYUIv/geAHIlhQi/+BgAgiWFCBwAGvTIgDTlwgjAyBAowRixGBBgxBAC2LEUkjCSILiwxJTwIiWEsBVyAgoyiqSRUiDkQir6tLAiILTF2MDCMIjBFC/8uL/4GgBSRYi/+BgAYkWFCIAv+LFYsEUIsOUIsMUExQgEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUEmMBklXACCABGJldGGwsElXICCABWdhbW1hsLBJV0AggAVhbHBoYbCwSVdgIIACeGmwSbBLAYHAAiJYgAF1sLBLAYHgAiJYgAN4aW6wsEsBIQQiWIACemiwsExXgMBJVyAggAR2WzFdsLBJV0AggAR2WzJdsLBJV2AggAR2WzNdsLBJV4AggAR2WzRdsLBXoCCABHZbNV2wsCOMECWMEYwPi/2BgAZbixENQQAYiw9JoyiqjA+LEIECC4wQixEjCIwRQv/ciw9JFSIORCKvSYwDSquLBoHgAk8CXU8CKoj9ckkVIg5ETwKrIQRMXYwGixAWKKqMCCqMDYBCAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAjACL/YGIBltJjBRAAV0jjBIjjBOLE4sSDkEA2osGSSEEIliLDUlPAqMoqk8CV2AgTwKI/OGLCKMoqkwoqowBKKpJKalEgCBz7adTKZ19SDM52AgJodgFU72kAv/+W/7////+/////yqMCkwoqowFjAeLBymlQQAtiwcqrCmpiwqMC0EACYsKiwWjKKqMC4sLjAqLBUmjKKqMBYsHgAECoowHQv/MiwGLCqMoqkkVIg5EiwOrixNJTgIiC4ECCIsATE8CXYwAiw2AIENSeovKJSRy62dKGmIIkNelNK8Uth4KvnSh9nGMEwR3oyiqjA0jCIwTQv8egAIBoosGUIsAUEklWUsBFVJJVwIAjAJXIiCABkwxKHhpKbCwKYwJJYwRixGLFgxBACuL/lcCAIsRSU4CIgsiWCiqTCMISYwRIguLAkwiWKMoqosJTIj7yIwJQv/NiwlJFSIORIsDq4AGUEkoeGkpsLAjjACJixSMEkL+n4oBAYv/AiiqSRUiDkQir6uJ",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 0,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}