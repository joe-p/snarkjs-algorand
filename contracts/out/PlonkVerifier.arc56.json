{
    "name": "PlonkVerifier",
    "structs": {
        "ObjectC300AAEE": [
            {
                "name": "L",
                "type": "byte[32][]"
            },
            {
                "name": "challenges",
                "type": "Challenges"
            }
        ],
        "Challenges": [
            {
                "name": "beta",
                "type": "byte[32]"
            },
            {
                "name": "gamma",
                "type": "byte[32]"
            },
            {
                "name": "alpha",
                "type": "byte[32]"
            },
            {
                "name": "xi",
                "type": "byte[32]"
            },
            {
                "name": "v",
                "type": "byte[32][6]"
            },
            {
                "name": "u",
                "type": "byte[32]"
            },
            {
                "name": "xin",
                "type": "byte[32]"
            },
            {
                "name": "zh",
                "type": "byte[32]"
            }
        ],
        "Proof": [
            {
                "name": "A",
                "type": "byte[96]"
            },
            {
                "name": "B",
                "type": "byte[96]"
            },
            {
                "name": "C",
                "type": "byte[96]"
            },
            {
                "name": "Z",
                "type": "byte[96]"
            },
            {
                "name": "T1",
                "type": "byte[96]"
            },
            {
                "name": "T2",
                "type": "byte[96]"
            },
            {
                "name": "T3",
                "type": "byte[96]"
            },
            {
                "name": "Wxi",
                "type": "byte[96]"
            },
            {
                "name": "Wxiw",
                "type": "byte[96]"
            },
            {
                "name": "eval_a",
                "type": "byte[32]"
            },
            {
                "name": "eval_b",
                "type": "byte[32]"
            },
            {
                "name": "eval_c",
                "type": "byte[32]"
            },
            {
                "name": "eval_s1",
                "type": "byte[32]"
            },
            {
                "name": "eval_s2",
                "type": "byte[32]"
            },
            {
                "name": "eval_zw",
                "type": "byte[32]"
            }
        ],
        "VerificationKey": [
            {
                "name": "Qm",
                "type": "byte[96]"
            },
            {
                "name": "Ql",
                "type": "byte[96]"
            },
            {
                "name": "Qr",
                "type": "byte[96]"
            },
            {
                "name": "Qo",
                "type": "byte[96]"
            },
            {
                "name": "Qc",
                "type": "byte[96]"
            },
            {
                "name": "S1",
                "type": "byte[96]"
            },
            {
                "name": "S2",
                "type": "byte[96]"
            },
            {
                "name": "S3",
                "type": "byte[96]"
            },
            {
                "name": "power",
                "type": "uint64"
            },
            {
                "name": "nPublic",
                "type": "uint64"
            },
            {
                "name": "omega",
                "type": "byte[32]"
            }
        ]
    },
    "methods": [
        {
            "name": "verify",
            "args": [
                {
                    "type": "(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64,byte[32])",
                    "struct": "VerificationKey",
                    "name": "vk"
                },
                {
                    "type": "byte[32][]",
                    "name": "signals"
                },
                {
                    "type": "(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[32],byte[32],byte[32],byte[32],byte[32],byte[32])",
                    "struct": "Proof",
                    "name": "proof"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "computeChallenges",
            "args": [
                {
                    "type": "(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64,byte[32])",
                    "struct": "VerificationKey",
                    "name": "vk"
                },
                {
                    "type": "byte[32][]",
                    "name": "signals"
                },
                {
                    "type": "(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[32],byte[32],byte[32],byte[32],byte[32],byte[32])",
                    "struct": "Proof",
                    "name": "proof"
                }
            ],
            "returns": {
                "type": "(byte[32],byte[32],byte[32],byte[32],byte[32][6],byte[32],byte[32],byte[32])",
                "struct": "Challenges"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "calculateLagrangeEvaluations",
            "args": [
                {
                    "type": "(byte[32],byte[32],byte[32],byte[32],byte[32][6],byte[32],byte[32],byte[32])",
                    "struct": "Challenges",
                    "name": "challengesInput"
                },
                {
                    "type": "(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64,byte[32])",
                    "struct": "VerificationKey",
                    "name": "vk"
                }
            ],
            "returns": {
                "type": "(byte[32][],(byte[32],byte[32],byte[32],byte[32],byte[32][6],byte[32],byte[32],byte[32]))",
                "struct": "ObjectC300AAEE"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        190,
                        228,
                        753
                    ],
                    "errorMessage": "Length must be 32"
                },
                {
                    "pc": [
                        87,
                        109,
                        136
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        173
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        90,
                        112,
                        139
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        320,
                        507,
                        510
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        477,
                        520,
                        559,
                        565,
                        572,
                        585,
                        596,
                        733
                    ],
                    "errorMessage": "invalid size"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYXJjNC9pbmRleC5kLnRzOjpDb250cmFjdC5hcHByb3ZhbFByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgMzIgOTYgMSAwIDM4NAogICAgYnl0ZWNibG9jayAweDczZWRhNzUzMjk5ZDdkNDgzMzM5ZDgwODA5YTFkODA1NTNiZGE0MDJmZmZlNWJmZWZmZmZmZmZmMDAwMDAwMDEgMHgxNTFmN2M3NQogICAgLy8gY29udHJhY3RzL3ZlcmlmaWVyLmFsZ28udHM6ODUKICAgIC8vIGV4cG9ydCBjbGFzcyBQbG9ua1ZlcmlmaWVyIGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuIE51bUFwcEFyZ3MKICAgIGJ6IG1haW5fYmFyZV9yb3V0aW5nQDgKICAgIHB1c2hieXRlc3MgMHgxZDJjZTgwZCAweDAzYWFkZTY2IDB4MDU1ZjA2ZDYgLy8gbWV0aG9kICJ2ZXJpZnkoKGJ5dGVbOTZdLGJ5dGVbOTZdLGJ5dGVbOTZdLGJ5dGVbOTZdLGJ5dGVbOTZdLGJ5dGVbOTZdLGJ5dGVbOTZdLGJ5dGVbOTZdLHVpbnQ2NCx1aW50NjQsYnl0ZVszMl0pLGJ5dGVbMzJdW10sKGJ5dGVbOTZdLGJ5dGVbOTZdLGJ5dGVbOTZdLGJ5dGVbOTZdLGJ5dGVbOTZdLGJ5dGVbOTZdLGJ5dGVbOTZdLGJ5dGVbOTZdLGJ5dGVbOTZdLGJ5dGVbMzJdLGJ5dGVbMzJdLGJ5dGVbMzJdLGJ5dGVbMzJdLGJ5dGVbMzJdLGJ5dGVbMzJdKSlib29sIiwgbWV0aG9kICJjb21wdXRlQ2hhbGxlbmdlcygoYnl0ZVs5Nl0sYnl0ZVs5Nl0sYnl0ZVs5Nl0sYnl0ZVs5Nl0sYnl0ZVs5Nl0sYnl0ZVs5Nl0sYnl0ZVs5Nl0sYnl0ZVs5Nl0sdWludDY0LHVpbnQ2NCxieXRlWzMyXSksYnl0ZVszMl1bXSwoYnl0ZVs5Nl0sYnl0ZVs5Nl0sYnl0ZVs5Nl0sYnl0ZVs5Nl0sYnl0ZVs5Nl0sYnl0ZVs5Nl0sYnl0ZVs5Nl0sYnl0ZVs5Nl0sYnl0ZVs5Nl0sYnl0ZVszMl0sYnl0ZVszMl0sYnl0ZVszMl0sYnl0ZVszMl0sYnl0ZVszMl0sYnl0ZVszMl0pKShieXRlWzMyXSxieXRlWzMyXSxieXRlWzMyXSxieXRlWzMyXSxieXRlWzMyXVs2XSxieXRlWzMyXSxieXRlWzMyXSxieXRlWzMyXSkiLCBtZXRob2QgImNhbGN1bGF0ZUxhZ3JhbmdlRXZhbHVhdGlvbnMoKGJ5dGVbMzJdLGJ5dGVbMzJdLGJ5dGVbMzJdLGJ5dGVbMzJdLGJ5dGVbMzJdWzZdLGJ5dGVbMzJdLGJ5dGVbMzJdLGJ5dGVbMzJdKSwoYnl0ZVs5Nl0sYnl0ZVs5Nl0sYnl0ZVs5Nl0sYnl0ZVs5Nl0sYnl0ZVs5Nl0sYnl0ZVs5Nl0sYnl0ZVs5Nl0sYnl0ZVs5Nl0sdWludDY0LHVpbnQ2NCxieXRlWzMyXSkpKGJ5dGVbMzJdW10sKGJ5dGVbMzJdLGJ5dGVbMzJdLGJ5dGVbMzJdLGJ5dGVbMzJdLGJ5dGVbMzJdWzZdLGJ5dGVbMzJdLGJ5dGVbMzJdLGJ5dGVbMzJdKSkiCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAwCiAgICBtYXRjaCBtYWluX3ZlcmlmeV9yb3V0ZUAzIG1haW5fY29tcHV0ZUNoYWxsZW5nZXNfcm91dGVANCBtYWluX2NhbGN1bGF0ZUxhZ3JhbmdlRXZhbHVhdGlvbnNfcm91dGVANQoKbWFpbl9hZnRlcl9pZl9lbHNlQDEyOgogICAgLy8gY29udHJhY3RzL3ZlcmlmaWVyLmFsZ28udHM6ODUKICAgIC8vIGV4cG9ydCBjbGFzcyBQbG9ua1ZlcmlmaWVyIGV4dGVuZHMgQ29udHJhY3QgewogICAgaW50Y18zIC8vIDAKICAgIHJldHVybgoKbWFpbl9jYWxjdWxhdGVMYWdyYW5nZUV2YWx1YXRpb25zX3JvdXRlQDU6CiAgICAvLyBjb250cmFjdHMvdmVyaWZpZXIuYWxnby50czoxOTMtMTk2CiAgICAvLyBjYWxjdWxhdGVMYWdyYW5nZUV2YWx1YXRpb25zKAogICAgLy8gICBjaGFsbGVuZ2VzSW5wdXQ6IENoYWxsZW5nZXMsCiAgICAvLyAgIHZrOiBWZXJpZmljYXRpb25LZXksCiAgICAvLyApOiB7IEw6IGJ5dGVzPDMyPltdOyBjaGFsbGVuZ2VzOiBDaGFsbGVuZ2VzIH0gewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBjb250cmFjdHMvdmVyaWZpZXIuYWxnby50czo4NQogICAgLy8gZXhwb3J0IGNsYXNzIFBsb25rVmVyaWZpZXIgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICAvLyBjb250cmFjdHMvdmVyaWZpZXIuYWxnby50czoxOTMtMTk2CiAgICAvLyBjYWxjdWxhdGVMYWdyYW5nZUV2YWx1YXRpb25zKAogICAgLy8gICBjaGFsbGVuZ2VzSW5wdXQ6IENoYWxsZW5nZXMsCiAgICAvLyAgIHZrOiBWZXJpZmljYXRpb25LZXksCiAgICAvLyApOiB7IEw6IGJ5dGVzPDMyPltdOyBjaGFsbGVuZ2VzOiBDaGFsbGVuZ2VzIH0gewogICAgY2FsbHN1YiBjYWxjdWxhdGVMYWdyYW5nZUV2YWx1YXRpb25zCiAgICBieXRlY18xIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzIgLy8gMQogICAgcmV0dXJuCgptYWluX2NvbXB1dGVDaGFsbGVuZ2VzX3JvdXRlQDQ6CiAgICAvLyBjb250cmFjdHMvdmVyaWZpZXIuYWxnby50czoxMDQtMTA4CiAgICAvLyBjb21wdXRlQ2hhbGxlbmdlcygKICAgIC8vICAgdms6IFZlcmlmaWNhdGlvbktleSwKICAgIC8vICAgc2lnbmFsczogUHVibGljU2lnbmFscywKICAgIC8vICAgcHJvb2Y6IFByb29mLAogICAgLy8gKTogQ2hhbGxlbmdlcyB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIGNvbnRyYWN0cy92ZXJpZmllci5hbGdvLnRzOjg1CiAgICAvLyBleHBvcnQgY2xhc3MgUGxvbmtWZXJpZmllciBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDMKICAgIC8vIGNvbnRyYWN0cy92ZXJpZmllci5hbGdvLnRzOjEwNC0xMDgKICAgIC8vIGNvbXB1dGVDaGFsbGVuZ2VzKAogICAgLy8gICB2azogVmVyaWZpY2F0aW9uS2V5LAogICAgLy8gICBzaWduYWxzOiBQdWJsaWNTaWduYWxzLAogICAgLy8gICBwcm9vZjogUHJvb2YsCiAgICAvLyApOiBDaGFsbGVuZ2VzIHsKICAgIGNhbGxzdWIgY29tcHV0ZUNoYWxsZW5nZXMKICAgIHBvcG4gMwogICAgYnl0ZWNfMSAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18yIC8vIDEKICAgIHJldHVybgoKbWFpbl92ZXJpZnlfcm91dGVAMzoKICAgIC8vIGNvbnRyYWN0cy92ZXJpZmllci5hbGdvLnRzOjg2LTkwCiAgICAvLyBwdWJsaWMgdmVyaWZ5KAogICAgLy8gICB2azogVmVyaWZpY2F0aW9uS2V5LAogICAgLy8gICBzaWduYWxzOiBQdWJsaWNTaWduYWxzLAogICAgLy8gICBwcm9vZjogUHJvb2YsCiAgICAvLyApOiBib29sZWFuIHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gY29udHJhY3RzL3ZlcmlmaWVyLmFsZ28udHM6ODUKICAgIC8vIGV4cG9ydCBjbGFzcyBQbG9ua1ZlcmlmaWVyIGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwogICAgLy8gY29udHJhY3RzL3ZlcmlmaWVyLmFsZ28udHM6ODYtOTAKICAgIC8vIHB1YmxpYyB2ZXJpZnkoCiAgICAvLyAgIHZrOiBWZXJpZmljYXRpb25LZXksCiAgICAvLyAgIHNpZ25hbHM6IFB1YmxpY1NpZ25hbHMsCiAgICAvLyAgIHByb29mOiBQcm9vZiwKICAgIC8vICk6IGJvb2xlYW4gewogICAgY2FsbHN1YiB2ZXJpZnkKICAgIHB1c2hieXRlcyAweDAwCiAgICBpbnRjXzMgLy8gMAogICAgdW5jb3ZlciAyCiAgICBzZXRiaXQKICAgIGJ5dGVjXzEgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMiAvLyAxCiAgICByZXR1cm4KCm1haW5fYmFyZV9yb3V0aW5nQDg6CiAgICAvLyBjb250cmFjdHMvdmVyaWZpZXIuYWxnby50czo4NQogICAgLy8gZXhwb3J0IGNsYXNzIFBsb25rVmVyaWZpZXIgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICBibnogbWFpbl9hZnRlcl9pZl9lbHNlQDEyCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgIQogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBjcmVhdGluZwogICAgaW50Y18yIC8vIDEKICAgIHJldHVybgoKCi8vIGNvbnRyYWN0cy92ZXJpZmllci5hbGdvLnRzOjpmck11bChhOiBieXRlcywgYjogYnl0ZXMpIC0+IGJ5dGVzOgpmck11bDoKICAgIC8vIGNvbnRyYWN0cy92ZXJpZmllci5hbGdvLnRzOjIzCiAgICAvLyBmdW5jdGlvbiBmck11bChhOiBieXRlczwzMj4sIGI6IGJ5dGVzPDMyPik6IGJ5dGVzPDMyPiB7CiAgICBwcm90byAyIDEKICAgIC8vIGNvbnRyYWN0cy92ZXJpZmllci5hbGdvLnRzOjI2CiAgICAvLyBjb25zdCByZXN1bHQ6IGJpZ3VpbnQgPSAoYUJpZyAqIGJCaWcpICUgQkxTMTJfMzgxX1NDQUxBUl9NT0RVTFVTOwogICAgZnJhbWVfZGlnIC0yCiAgICBmcmFtZV9kaWcgLTEKICAgIGIqCiAgICBieXRlY18wIC8vIDB4NzNlZGE3NTMyOTlkN2Q0ODMzMzlkODA4MDlhMWQ4MDU1M2JkYTQwMmZmZmU1YmZlZmZmZmZmZmYwMDAwMDAwMQogICAgYiUKICAgIC8vIGNvbnRyYWN0cy92ZXJpZmllci5hbGdvLnRzOjI3CiAgICAvLyByZXR1cm4gQnl0ZXMocmVzdWx0KS50b0ZpeGVkKHsgbGVuZ3RoOiAzMiB9KTsKICAgIGR1cAogICAgbGVuCiAgICBpbnRjXzAgLy8gMzIKICAgID09CiAgICBhc3NlcnQgLy8gTGVuZ3RoIG11c3QgYmUgMzIKICAgIHJldHN1YgoKCi8vIGNvbnRyYWN0cy92ZXJpZmllci5hbGdvLnRzOjpQbG9ua1ZlcmlmaWVyLnZlcmlmeSh2azogYnl0ZXMsIHNpZ25hbHM6IGJ5dGVzLCBwcm9vZjogYnl0ZXMpIC0+IHVpbnQ2NDoKdmVyaWZ5OgogICAgLy8gY29udHJhY3RzL3ZlcmlmaWVyLmFsZ28udHM6ODYtOTAKICAgIC8vIHB1YmxpYyB2ZXJpZnkoCiAgICAvLyAgIHZrOiBWZXJpZmljYXRpb25LZXksCiAgICAvLyAgIHNpZ25hbHM6IFB1YmxpY1NpZ25hbHMsCiAgICAvLyAgIHByb29mOiBQcm9vZiwKICAgIC8vICk6IGJvb2xlYW4gewogICAgcHJvdG8gMyAxCiAgICAvLyBjb250cmFjdHMvdmVyaWZpZXIuYWxnby50czo5MgogICAgLy8gY29uc3QgY2hhbGxlbmdlID0gdGhpcy5jb21wdXRlQ2hhbGxlbmdlcyh2aywgc2lnbmFscywgcHJvb2YpOwogICAgZnJhbWVfZGlnIC0zCiAgICBmcmFtZV9kaWcgLTIKICAgIGZyYW1lX2RpZyAtMQogICAgY2FsbHN1YiBjb21wdXRlQ2hhbGxlbmdlcwogICAgZnJhbWVfYnVyeSAtMQogICAgZnJhbWVfYnVyeSAtMgogICAgZnJhbWVfYnVyeSAtMwogICAgLy8gY29udHJhY3RzL3ZlcmlmaWVyLmFsZ28udHM6OTMKICAgIC8vIGxvZyhjaGFsbGVuZ2UuYWxwaGEpOwogICAgZXh0cmFjdCA2NCAzMgogICAgbG9nCiAgICAvLyBjb250cmFjdHMvdmVyaWZpZXIuYWxnby50czo5NAogICAgLy8gcmV0dXJuIHRydWU7CiAgICBpbnRjXzIgLy8gMQogICAgcmV0c3ViCgoKLy8gY29udHJhY3RzL3ZlcmlmaWVyLmFsZ28udHM6OlBsb25rVmVyaWZpZXIuZ2V0Q2hhbGxlbmdlKHRkOiBieXRlcykgLT4gYnl0ZXM6CmdldENoYWxsZW5nZToKICAgIC8vIGNvbnRyYWN0cy92ZXJpZmllci5hbGdvLnRzOjk3CiAgICAvLyBwcml2YXRlIGdldENoYWxsZW5nZSh0ZDogYnl0ZXMpOiBieXRlczwzMj4gewogICAgcHJvdG8gMSAxCiAgICAvLyBjb250cmFjdHMvdmVyaWZpZXIuYWxnby50czo5OAogICAgLy8gbGV0IGhhc2ggPSBvcC5rZWNjYWsyNTYodGQpOwogICAgZnJhbWVfZGlnIC0xCiAgICBrZWNjYWsyNTYKICAgIC8vIGNvbnRyYWN0cy92ZXJpZmllci5hbGdvLnRzOjk5CiAgICAvLyByZXR1cm4gQnl0ZXMoQmlnVWludChoYXNoKSAlIEJMUzEyXzM4MV9TQ0FMQVJfTU9EVUxVUykudG9GaXhlZCh7CiAgICBieXRlY18wIC8vIDB4NzNlZGE3NTMyOTlkN2Q0ODMzMzlkODA4MDlhMWQ4MDU1M2JkYTQwMmZmZmU1YmZlZmZmZmZmZmYwMDAwMDAwMQogICAgYiUKICAgIC8vIGNvbnRyYWN0cy92ZXJpZmllci5hbGdvLnRzOjk5LTEwMQogICAgLy8gcmV0dXJuIEJ5dGVzKEJpZ1VpbnQoaGFzaCkgJSBCTFMxMl8zODFfU0NBTEFSX01PRFVMVVMpLnRvRml4ZWQoewogICAgLy8gICBsZW5ndGg6IDMyLAogICAgLy8gfSk7CiAgICBkdXAKICAgIGxlbgogICAgaW50Y18wIC8vIDMyCiAgICA9PQogICAgYXNzZXJ0IC8vIExlbmd0aCBtdXN0IGJlIDMyCiAgICByZXRzdWIKCgovLyBjb250cmFjdHMvdmVyaWZpZXIuYWxnby50czo6UGxvbmtWZXJpZmllci5jb21wdXRlQ2hhbGxlbmdlcyh2azogYnl0ZXMsIHNpZ25hbHM6IGJ5dGVzLCBwcm9vZjogYnl0ZXMpIC0+IGJ5dGVzLCBieXRlcywgYnl0ZXMsIGJ5dGVzOgpjb21wdXRlQ2hhbGxlbmdlczoKICAgIC8vIGNvbnRyYWN0cy92ZXJpZmllci5hbGdvLnRzOjEwNC0xMDgKICAgIC8vIGNvbXB1dGVDaGFsbGVuZ2VzKAogICAgLy8gICB2azogVmVyaWZpY2F0aW9uS2V5LAogICAgLy8gICBzaWduYWxzOiBQdWJsaWNTaWduYWxzLAogICAgLy8gICBwcm9vZjogUHJvb2YsCiAgICAvLyApOiBDaGFsbGVuZ2VzIHsKICAgIHByb3RvIDMgNAogICAgaW50Y18zIC8vIDAKICAgIGR1cG4gNAogICAgcHVzaGJ5dGVzICIiCiAgICAvLyBjb250cmFjdHMvdmVyaWZpZXIuYWxnby50czoxMTIKICAgIC8vIGxldCB0ZCA9IG9wLmNvbmNhdCh2ay5RbSwgdmsuUWwpOwogICAgZnJhbWVfZGlnIC0zCiAgICBleHRyYWN0IDAgOTYKICAgIGZyYW1lX2RpZyAtMwogICAgZXh0cmFjdCA5NiA5NgogICAgY29uY2F0CiAgICAvLyBjb250cmFjdHMvdmVyaWZpZXIuYWxnby50czoxMTMKICAgIC8vIHRkID0gb3AuY29uY2F0KHRkLCB2ay5Rcik7CiAgICBmcmFtZV9kaWcgLTMKICAgIGV4dHJhY3QgMTkyIDk2CiAgICBjb25jYXQKICAgIC8vIGNvbnRyYWN0cy92ZXJpZmllci5hbGdvLnRzOjExNAogICAgLy8gdGQgPSBvcC5jb25jYXQodGQsIHZrLlFvKTsKICAgIGZyYW1lX2RpZyAtMwogICAgcHVzaGludCAyODggLy8gMjg4CiAgICBpbnRjXzEgLy8gOTYKICAgIGV4dHJhY3QzCiAgICBjb25jYXQKICAgIC8vIGNvbnRyYWN0cy92ZXJpZmllci5hbGdvLnRzOjExNQogICAgLy8gdGQgPSBvcC5jb25jYXQodGQsIHZrLlFjKTsKICAgIGZyYW1lX2RpZyAtMwogICAgaW50YyA0IC8vIDM4NAogICAgaW50Y18xIC8vIDk2CiAgICBleHRyYWN0MwogICAgY29uY2F0CiAgICAvLyBjb250cmFjdHMvdmVyaWZpZXIuYWxnby50czoxMTYKICAgIC8vIHRkID0gb3AuY29uY2F0KHRkLCB2ay5TMSk7CiAgICBmcmFtZV9kaWcgLTMKICAgIHB1c2hpbnQgNDgwIC8vIDQ4MAogICAgaW50Y18xIC8vIDk2CiAgICBleHRyYWN0MwogICAgY29uY2F0CiAgICAvLyBjb250cmFjdHMvdmVyaWZpZXIuYWxnby50czoxMTcKICAgIC8vIHRkID0gb3AuY29uY2F0KHRkLCB2ay5TMik7CiAgICBmcmFtZV9kaWcgLTMKICAgIHB1c2hpbnQgNTc2IC8vIDU3NgogICAgaW50Y18xIC8vIDk2CiAgICBleHRyYWN0MwogICAgY29uY2F0CiAgICAvLyBjb250cmFjdHMvdmVyaWZpZXIuYWxnby50czoxMTgKICAgIC8vIHRkID0gb3AuY29uY2F0KHRkLCB2ay5TMyk7CiAgICBmcmFtZV9kaWcgLTMKICAgIHB1c2hpbnQgNjcyIC8vIDY3MgogICAgaW50Y18xIC8vIDk2CiAgICBleHRyYWN0MwogICAgY29uY2F0CiAgICAvLyBjb250cmFjdHMvdmVyaWZpZXIuYWxnby50czoxMjAKICAgIC8vIGZvciAoY29uc3Qgc2lnbmFsIG9mIHNpZ25hbHMpIHsKICAgIGZyYW1lX2RpZyAtMgogICAgaW50Y18zIC8vIDAKICAgIGV4dHJhY3RfdWludDE2CiAgICBpbnRjXzMgLy8gMAoKY29tcHV0ZUNoYWxsZW5nZXNfZm9yX2hlYWRlckAxOgogICAgLy8gY29udHJhY3RzL3ZlcmlmaWVyLmFsZ28udHM6MTIwCiAgICAvLyBmb3IgKGNvbnN0IHNpZ25hbCBvZiBzaWduYWxzKSB7CiAgICBmcmFtZV9kaWcgOAogICAgZnJhbWVfZGlnIDcKICAgIDwKICAgIGJ6IGNvbXB1dGVDaGFsbGVuZ2VzX2FmdGVyX2ZvckA0CiAgICBmcmFtZV9kaWcgLTIKICAgIGV4dHJhY3QgMiAwCiAgICBmcmFtZV9kaWcgOAogICAgZHVwCiAgICBjb3ZlciAyCiAgICBpbnRjXzAgLy8gMzIKICAgICoKICAgIGludGNfMCAvLyAzMgogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICAvLyBjb250cmFjdHMvdmVyaWZpZXIuYWxnby50czoxMjEKICAgIC8vIHRkID0gb3AuY29uY2F0KHRkLCBzaWduYWwpOwogICAgZnJhbWVfZGlnIDYKICAgIHN3YXAKICAgIGNvbmNhdAogICAgZnJhbWVfYnVyeSA2CiAgICBpbnRjXzIgLy8gMQogICAgKwogICAgZnJhbWVfYnVyeSA4CiAgICBiIGNvbXB1dGVDaGFsbGVuZ2VzX2Zvcl9oZWFkZXJAMQoKY29tcHV0ZUNoYWxsZW5nZXNfYWZ0ZXJfZm9yQDQ6CiAgICAvLyBjb250cmFjdHMvdmVyaWZpZXIuYWxnby50czoxMjQKICAgIC8vIHRkID0gb3AuY29uY2F0KHRkLCBwcm9vZi5BKTsKICAgIGZyYW1lX2RpZyAtMQogICAgZXh0cmFjdCAwIDk2CiAgICBmcmFtZV9kaWcgNgogICAgc3dhcAogICAgY29uY2F0CiAgICAvLyBjb250cmFjdHMvdmVyaWZpZXIuYWxnby50czoxMjUKICAgIC8vIHRkID0gb3AuY29uY2F0KHRkLCBwcm9vZi5CKTsKICAgIGZyYW1lX2RpZyAtMQogICAgZXh0cmFjdCA5NiA5NgogICAgY29uY2F0CiAgICAvLyBjb250cmFjdHMvdmVyaWZpZXIuYWxnby50czoxMjYKICAgIC8vIHRkID0gb3AuY29uY2F0KHRkLCBwcm9vZi5DKTsKICAgIGZyYW1lX2RpZyAtMQogICAgZXh0cmFjdCAxOTIgOTYKICAgIGNvbmNhdAogICAgLy8gY29udHJhY3RzL3ZlcmlmaWVyLmFsZ28udHM6MTI4CiAgICAvLyBjb25zdCBiZXRhID0gdGhpcy5nZXRDaGFsbGVuZ2UodGQpOwogICAgY2FsbHN1YiBnZXRDaGFsbGVuZ2UKICAgIGR1cAogICAgZnJhbWVfYnVyeSAxCiAgICAvLyBjb250cmFjdHMvdmVyaWZpZXIuYWxnby50czoxMzMKICAgIC8vIGNvbnN0IGdhbW1hID0gdGhpcy5nZXRDaGFsbGVuZ2UodGQpOwogICAgZHVwCiAgICBjYWxsc3ViIGdldENoYWxsZW5nZQogICAgZHVwCiAgICBmcmFtZV9idXJ5IDIKICAgIC8vIGNvbnRyYWN0cy92ZXJpZmllci5hbGdvLnRzOjE0MAogICAgLy8gdGQgPSBvcC5jb25jYXQodGQsIGdhbW1hKTsKICAgIGRpZyAxCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGR1cAogICAgZnJhbWVfYnVyeSA2CiAgICAvLyBjb250cmFjdHMvdmVyaWZpZXIuYWxnby50czoxNDEKICAgIC8vIHRkID0gb3AuY29uY2F0KHRkLCBwcm9vZi5aKTsKICAgIGZyYW1lX2RpZyAtMQogICAgcHVzaGludCAyODggLy8gMjg4CiAgICBpbnRjXzEgLy8gOTYKICAgIGV4dHJhY3QzCiAgICBjb25jYXQKICAgIC8vIGNvbnRyYWN0cy92ZXJpZmllci5hbGdvLnRzOjE0MgogICAgLy8gY29uc3QgYWxwaGEgPSB0aGlzLmdldENoYWxsZW5nZSh0ZCk7CiAgICBjYWxsc3ViIGdldENoYWxsZW5nZQogICAgZnJhbWVfYnVyeSAwCiAgICAvLyBjb250cmFjdHMvdmVyaWZpZXIuYWxnby50czoxNDkKICAgIC8vIHRkID0gb3AuY29uY2F0KHRkLCBwcm9vZi5UMSk7CiAgICBmcmFtZV9kaWcgLTEKICAgIGludGMgNCAvLyAzODQKICAgIGludGNfMSAvLyA5NgogICAgZXh0cmFjdDMKICAgIGNvbmNhdAogICAgLy8gY29udHJhY3RzL3ZlcmlmaWVyLmFsZ28udHM6MTUwCiAgICAvLyB0ZCA9IG9wLmNvbmNhdCh0ZCwgcHJvb2YuVDIpOwogICAgZnJhbWVfZGlnIC0xCiAgICBwdXNoaW50IDQ4MCAvLyA0ODAKICAgIGludGNfMSAvLyA5NgogICAgZXh0cmFjdDMKICAgIGNvbmNhdAogICAgLy8gY29udHJhY3RzL3ZlcmlmaWVyLmFsZ28udHM6MTUxCiAgICAvLyB0ZCA9IG9wLmNvbmNhdCh0ZCwgcHJvb2YuVDMpOwogICAgZnJhbWVfZGlnIC0xCiAgICBwdXNoaW50IDU3NiAvLyA1NzYKICAgIGludGNfMSAvLyA5NgogICAgZXh0cmFjdDMKICAgIGNvbmNhdAogICAgLy8gY29udHJhY3RzL3ZlcmlmaWVyLmFsZ28udHM6MTUyCiAgICAvLyBjb25zdCB4aSA9IHRoaXMuZ2V0Q2hhbGxlbmdlKHRkKTsKICAgIGNhbGxzdWIgZ2V0Q2hhbGxlbmdlCiAgICBkdXAKICAgIGZyYW1lX2J1cnkgNAogICAgLy8gY29udHJhY3RzL3ZlcmlmaWVyLmFsZ28udHM6MTU5CiAgICAvLyB0ZCA9IG9wLmNvbmNhdCh0ZCwgcHJvb2YuZXZhbF9hKTsKICAgIGZyYW1lX2RpZyAtMQogICAgcHVzaGludCA4NjQgLy8gODY0CiAgICBpbnRjXzAgLy8gMzIKICAgIGV4dHJhY3QzCiAgICBjb25jYXQKICAgIC8vIGNvbnRyYWN0cy92ZXJpZmllci5hbGdvLnRzOjE2MAogICAgLy8gdGQgPSBvcC5jb25jYXQodGQsIHByb29mLmV2YWxfYik7CiAgICBmcmFtZV9kaWcgLTEKICAgIHB1c2hpbnQgODk2IC8vIDg5NgogICAgaW50Y18wIC8vIDMyCiAgICBleHRyYWN0MwogICAgY29uY2F0CiAgICAvLyBjb250cmFjdHMvdmVyaWZpZXIuYWxnby50czoxNjEKICAgIC8vIHRkID0gb3AuY29uY2F0KHRkLCBwcm9vZi5ldmFsX2MpOwogICAgZnJhbWVfZGlnIC0xCiAgICBwdXNoaW50IDkyOCAvLyA5MjgKICAgIGludGNfMCAvLyAzMgogICAgZXh0cmFjdDMKICAgIGNvbmNhdAogICAgLy8gY29udHJhY3RzL3ZlcmlmaWVyLmFsZ28udHM6MTYyCiAgICAvLyB0ZCA9IG9wLmNvbmNhdCh0ZCwgcHJvb2YuZXZhbF9zMSk7CiAgICBmcmFtZV9kaWcgLTEKICAgIHB1c2hpbnQgOTYwIC8vIDk2MAogICAgaW50Y18wIC8vIDMyCiAgICBleHRyYWN0MwogICAgY29uY2F0CiAgICAvLyBjb250cmFjdHMvdmVyaWZpZXIuYWxnby50czoxNjMKICAgIC8vIHRkID0gb3AuY29uY2F0KHRkLCBwcm9vZi5ldmFsX3MyKTsKICAgIGZyYW1lX2RpZyAtMQogICAgcHVzaGludCA5OTIgLy8gOTkyCiAgICBpbnRjXzAgLy8gMzIKICAgIGV4dHJhY3QzCiAgICBjb25jYXQKICAgIC8vIGNvbnRyYWN0cy92ZXJpZmllci5hbGdvLnRzOjE2NAogICAgLy8gdGQgPSBvcC5jb25jYXQodGQsIHByb29mLmV2YWxfencpOwogICAgZnJhbWVfZGlnIC0xCiAgICBwdXNoaW50IDEwMjQgLy8gMTAyNAogICAgaW50Y18wIC8vIDMyCiAgICBleHRyYWN0MwogICAgY29uY2F0CiAgICAvLyBjb250cmFjdHMvdmVyaWZpZXIuYWxnby50czoxNjYKICAgIC8vIGNvbnN0IHYgPSBuZXcgRml4ZWRBcnJheTxieXRlczwzMj4sIDY+KCk7CiAgICBwdXNoaW50IDE5MiAvLyAxOTIKICAgIGJ6ZXJvCiAgICAvLyBjb250cmFjdHMvdmVyaWZpZXIuYWxnby50czoxNjcKICAgIC8vIHZbMV0gPSB0aGlzLmdldENoYWxsZW5nZSh0ZCk7CiAgICBzd2FwCiAgICBjYWxsc3ViIGdldENoYWxsZW5nZQogICAgZHVwCiAgICBsZW4KICAgIGludGNfMCAvLyAzMgogICAgPT0KICAgIGFzc2VydCAvLyBpbnZhbGlkIHNpemUKICAgIHJlcGxhY2UyIDMyCiAgICBmcmFtZV9idXJ5IDMKICAgIC8vIGNvbnRyYWN0cy92ZXJpZmllci5hbGdvLnRzOjE2OQogICAgLy8gZm9yIChsZXQgaTogdWludDY0ID0gMjsgaSA8IDY7IGkrKykgewogICAgcHVzaGludCAyIC8vIDIKICAgIGZyYW1lX2J1cnkgNQoKY29tcHV0ZUNoYWxsZW5nZXNfd2hpbGVfdG9wQDU6CiAgICAvLyBjb250cmFjdHMvdmVyaWZpZXIuYWxnby50czoxNjkKICAgIC8vIGZvciAobGV0IGk6IHVpbnQ2NCA9IDI7IGkgPCA2OyBpKyspIHsKICAgIGZyYW1lX2RpZyA1CiAgICBwdXNoaW50IDYgLy8gNgogICAgPAogICAgYnogY29tcHV0ZUNoYWxsZW5nZXNfYWZ0ZXJfd2hpbGVANwogICAgLy8gY29udHJhY3RzL3ZlcmlmaWVyLmFsZ28udHM6MTcwCiAgICAvLyB2W2ldID0gZnJNdWwodltpIC0gMV0gYXMgYnl0ZXM8MzI+LCB2WzFdKTsKICAgIGZyYW1lX2RpZyA1CiAgICBkdXAKICAgIGludGNfMiAvLyAxCiAgICAtCiAgICBpbnRjXzAgLy8gMzIKICAgICoKICAgIGZyYW1lX2RpZyAzCiAgICBkdXAKICAgIHVuY292ZXIgMgogICAgaW50Y18wIC8vIDMyCiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGRpZyAxCiAgICBleHRyYWN0IDMyIDMyIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgY2FsbHN1YiBmck11bAogICAgZHVwCiAgICBsZW4KICAgIGludGNfMCAvLyAzMgogICAgPT0KICAgIGFzc2VydCAvLyBpbnZhbGlkIHNpemUKICAgIGRpZyAyCiAgICBpbnRjXzAgLy8gMzIKICAgICoKICAgIHN3YXAKICAgIHJlcGxhY2UzCiAgICBmcmFtZV9idXJ5IDMKICAgIC8vIGNvbnRyYWN0cy92ZXJpZmllci5hbGdvLnRzOjE2OQogICAgLy8gZm9yIChsZXQgaTogdWludDY0ID0gMjsgaSA8IDY7IGkrKykgewogICAgaW50Y18yIC8vIDEKICAgICsKICAgIGZyYW1lX2J1cnkgNQogICAgYiBjb21wdXRlQ2hhbGxlbmdlc193aGlsZV90b3BANQoKY29tcHV0ZUNoYWxsZW5nZXNfYWZ0ZXJfd2hpbGVANzoKICAgIC8vIGNvbnRyYWN0cy92ZXJpZmllci5hbGdvLnRzOjE3NwogICAgLy8gdGQgPSBvcC5jb25jYXQodGQsIHByb29mLld4aSk7CiAgICBmcmFtZV9kaWcgLTEKICAgIHB1c2hpbnQgNjcyIC8vIDY3MgogICAgaW50Y18xIC8vIDk2CiAgICBleHRyYWN0MwogICAgLy8gY29udHJhY3RzL3ZlcmlmaWVyLmFsZ28udHM6MTc4CiAgICAvLyB0ZCA9IG9wLmNvbmNhdCh0ZCwgcHJvb2YuV3hpdyk7CiAgICBmcmFtZV9kaWcgLTEKICAgIHB1c2hpbnQgNzY4IC8vIDc2OAogICAgaW50Y18xIC8vIDk2CiAgICBleHRyYWN0MwogICAgY29uY2F0CiAgICAvLyBjb250cmFjdHMvdmVyaWZpZXIuYWxnby50czoxNzkKICAgIC8vIGNvbnN0IHUgPSB0aGlzLmdldENoYWxsZW5nZSh0ZCk7CiAgICBjYWxsc3ViIGdldENoYWxsZW5nZQogICAgLy8gY29udHJhY3RzL3ZlcmlmaWVyLmFsZ28udHM6MTgxLTE5MAogICAgLy8gcmV0dXJuIHsKICAgIC8vICAgYmV0YSwKICAgIC8vICAgZ2FtbWEsCiAgICAvLyAgIGFscGhhLAogICAgLy8gICB4aSwKICAgIC8vICAgdiwKICAgIC8vICAgdSwKICAgIC8vICAgeGluOiBCeXRlczwzMj4oKSwKICAgIC8vICAgemg6IEJ5dGVzPDMyPigpLAogICAgLy8gfTsKICAgIGZyYW1lX2RpZyAxCiAgICBsZW4KICAgIGludGNfMCAvLyAzMgogICAgPT0KICAgIGFzc2VydCAvLyBpbnZhbGlkIHNpemUKICAgIGZyYW1lX2RpZyAyCiAgICBsZW4KICAgIGludGNfMCAvLyAzMgogICAgPT0KICAgIGFzc2VydCAvLyBpbnZhbGlkIHNpemUKICAgIGZyYW1lX2RpZyAwCiAgICBkdXAKICAgIGxlbgogICAgaW50Y18wIC8vIDMyCiAgICA9PQogICAgYXNzZXJ0IC8vIGludmFsaWQgc2l6ZQogICAgZnJhbWVfZGlnIDYKICAgIHN3YXAKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIDQKICAgIGR1cAogICAgY292ZXIgMgogICAgbGVuCiAgICBpbnRjXzAgLy8gMzIKICAgID09CiAgICBhc3NlcnQgLy8gaW52YWxpZCBzaXplCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGZyYW1lX2RpZyAzCiAgICBjb25jYXQKICAgIGRpZyAxCiAgICBsZW4KICAgIGludGNfMCAvLyAzMgogICAgPT0KICAgIGFzc2VydCAvLyBpbnZhbGlkIHNpemUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgcHVzaGJ5dGVzIDB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIC0zCiAgICBmcmFtZV9kaWcgLTIKICAgIGZyYW1lX2RpZyAtMQogICAgZnJhbWVfYnVyeSAzCiAgICBmcmFtZV9idXJ5IDIKICAgIGZyYW1lX2J1cnkgMQogICAgZnJhbWVfYnVyeSAwCiAgICByZXRzdWIKCgovLyBjb250cmFjdHMvdmVyaWZpZXIuYWxnby50czo6UGxvbmtWZXJpZmllci5jYWxjdWxhdGVMYWdyYW5nZUV2YWx1YXRpb25zKGNoYWxsZW5nZXNJbnB1dDogYnl0ZXMsIHZrOiBieXRlcykgLT4gYnl0ZXM6CmNhbGN1bGF0ZUxhZ3JhbmdlRXZhbHVhdGlvbnM6CiAgICAvLyBjb250cmFjdHMvdmVyaWZpZXIuYWxnby50czoxOTMtMTk2CiAgICAvLyBjYWxjdWxhdGVMYWdyYW5nZUV2YWx1YXRpb25zKAogICAgLy8gICBjaGFsbGVuZ2VzSW5wdXQ6IENoYWxsZW5nZXMsCiAgICAvLyAgIHZrOiBWZXJpZmljYXRpb25LZXksCiAgICAvLyApOiB7IEw6IGJ5dGVzPDMyPltdOyBjaGFsbGVuZ2VzOiBDaGFsbGVuZ2VzIH0gewogICAgcHJvdG8gMiAxCiAgICAvLyBjb250cmFjdHMvdmVyaWZpZXIuYWxnby50czoxOTgKICAgIC8vIGxldCB4aW4gPSBjaGFsbGVuZ2VzLnhpOwogICAgZnJhbWVfZGlnIC0yCiAgICBleHRyYWN0IDk2IDMyCiAgICAvLyBjb250cmFjdHMvdmVyaWZpZXIuYWxnby50czoyMDAKICAgIC8vIGxldCBkb21haW5TaXplOiB1aW50NjQgPSAxOwogICAgaW50Y18yIC8vIDEKICAgIC8vIGNvbnRyYWN0cy92ZXJpZmllci5hbGdvLnRzOjIwMQogICAgLy8gZm9yIChsZXQgaTogdWludDY0ID0gMDsgaSA8IHZrLnBvd2VyOyBpKyspIHsKICAgIGludGNfMyAvLyAwCgpjYWxjdWxhdGVMYWdyYW5nZUV2YWx1YXRpb25zX3doaWxlX3RvcEAxOgogICAgLy8gY29udHJhY3RzL3ZlcmlmaWVyLmFsZ28udHM6MjAxCiAgICAvLyBmb3IgKGxldCBpOiB1aW50NjQgPSAwOyBpIDwgdmsucG93ZXI7IGkrKykgewogICAgZnJhbWVfZGlnIC0xCiAgICBwdXNoaW50IDc2OCAvLyA3NjgKICAgIGV4dHJhY3RfdWludDY0CiAgICBmcmFtZV9kaWcgMgogICAgPgogICAgYnogY2FsY3VsYXRlTGFncmFuZ2VFdmFsdWF0aW9uc19hZnRlcl93aGlsZUAzCiAgICAvLyBjb250cmFjdHMvdmVyaWZpZXIuYWxnby50czoyMDIKICAgIC8vIHhpbiA9IGZyTXVsKHhpbiwgeGluKTsKICAgIGZyYW1lX2RpZyAwCiAgICBkdXAKICAgIGNhbGxzdWIgZnJNdWwKICAgIGZyYW1lX2J1cnkgMAogICAgLy8gY29udHJhY3RzL3ZlcmlmaWVyLmFsZ28udHM6MjAzCiAgICAvLyBkb21haW5TaXplICo9IDI7CiAgICBmcmFtZV9kaWcgMQogICAgcHVzaGludCAyIC8vIDIKICAgICoKICAgIGZyYW1lX2J1cnkgMQogICAgLy8gY29udHJhY3RzL3ZlcmlmaWVyLmFsZ28udHM6MjAxCiAgICAvLyBmb3IgKGxldCBpOiB1aW50NjQgPSAwOyBpIDwgdmsucG93ZXI7IGkrKykgewogICAgZnJhbWVfZGlnIDIKICAgIGludGNfMiAvLyAxCiAgICArCiAgICBmcmFtZV9idXJ5IDIKICAgIGIgY2FsY3VsYXRlTGFncmFuZ2VFdmFsdWF0aW9uc193aGlsZV90b3BAMQoKY2FsY3VsYXRlTGFncmFuZ2VFdmFsdWF0aW9uc19hZnRlcl93aGlsZUAzOgogICAgLy8gY29udHJhY3RzL3ZlcmlmaWVyLmFsZ28udHM6MjA2CiAgICAvLyBjaGFsbGVuZ2VzLnhpbiA9IHhpbjsKICAgIGZyYW1lX2RpZyAwCiAgICBkdXAKICAgIGxlbgogICAgaW50Y18wIC8vIDMyCiAgICA9PQogICAgYXNzZXJ0IC8vIGludmFsaWQgc2l6ZQogICAgZnJhbWVfZGlnIC0yCiAgICBwdXNoaW50IDM1MiAvLyAzNTIKICAgIGRpZyAyCiAgICByZXBsYWNlMwogICAgLy8gY29udHJhY3RzL3ZlcmlmaWVyLmFsZ28udHM6MzIKICAgIC8vIGNvbnN0IGFOOiBiaWd1aW50ID0gQmlnVWludChhKSAlIHI7CiAgICBzd2FwCiAgICBieXRlY18wIC8vIDB4NzNlZGE3NTMyOTlkN2Q0ODMzMzlkODA4MDlhMWQ4MDU1M2JkYTQwMmZmZmU1YmZlZmZmZmZmZmYwMDAwMDAwMQogICAgYiUKICAgIC8vIGNvbnRyYWN0cy92ZXJpZmllci5hbGdvLnRzOjM0CiAgICAvLyBjb25zdCByZXM6IGJpZ3VpbnQgPSAoYU4gKyByIC0gYk4pICUgcjsgLy8gKGEgLSBiKSBtb2QgciwgZ3VhcmFudGVlZCBub24tbmVnYXRpdmUKICAgIGJ5dGVjXzAgLy8gMHg3M2VkYTc1MzI5OWQ3ZDQ4MzMzOWQ4MDgwOWExZDgwNTUzYmRhNDAyZmZmZTViZmVmZmZmZmZmZjAwMDAwMDAxCiAgICBiKwogICAgYnl0ZWNfMCAvLyAweDczZWRhNzUzMjk5ZDdkNDgzMzM5ZDgwODA5YTFkODA1NTNiZGE0MDJmZmZlNWJmZWZmZmZmZmZmMDAwMDAwMDEKICAgIGIlCiAgICAvLyBjb250cmFjdHMvdmVyaWZpZXIuYWxnby50czozNQogICAgLy8gcmV0dXJuIEJ5dGVzKHJlcykudG9GaXhlZCh7IGxlbmd0aDogMzIgfSk7CiAgICBkdXAKICAgIGxlbgogICAgaW50Y18wIC8vIDMyCiAgICA9PQogICAgYXNzZXJ0IC8vIExlbmd0aCBtdXN0IGJlIDMyCiAgICAvLyBjb250cmFjdHMvdmVyaWZpZXIuYWxnby50czoyMDcKICAgIC8vIGNoYWxsZW5nZXMuemggPSBmclN1Yih4aW4sIEJ5dGVzPDMyPigpKTsKICAgIGludGMgNCAvLyAzODQKICAgIHN3YXAKICAgIHJlcGxhY2UzCiAgICAvLyBjb250cmFjdHMvdmVyaWZpZXIuYWxnby50czoyMTEKICAgIC8vIHJldHVybiB7IEwsIGNoYWxsZW5nZXMgfTsKICAgIHB1c2hieXRlcyAweDAxYTIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgLy8gY29udHJhY3RzL3ZlcmlmaWVyLmFsZ28udHM6MjA5CiAgICAvLyBjb25zdCBMOiBieXRlczwzMj5bXSA9IFtdOwogICAgcHVzaGJ5dGVzIDB4MDAwMAogICAgLy8gY29udHJhY3RzL3ZlcmlmaWVyLmFsZ28udHM6MjExCiAgICAvLyByZXR1cm4geyBMLCBjaGFsbGVuZ2VzIH07CiAgICBjb25jYXQKICAgIGZyYW1lX2J1cnkgMAogICAgcmV0c3ViCg==",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAFIGABAIADJgIgc+2nUymdfUgzOdgICaHYBVO9pAL//lv+/////wAAAAEEFR98dTEbQQBvggMEHSzoDQQDqt5mBAVfBtY2GgCOAwAzABgAAiVDMRkURDEYRDYaATYaAogCRSlMULAkQzEZFEQxGEQ2GgE2GgI2GgOIAGlGAylMULAkQzEZFEQxGEQ2GgE2GgI2GgOIACiAAQAlTwJUKUxQsCRDMRlA/6gxGBREJEOKAgGL/ov/oyiqSRUiEkSJigMBi/2L/ov/iAAajP+M/oz9V0AgsCSJigEBi/8CKKpJFSISRImKAwQlRwSAAIv9VwBgi/1XYGBQi/1XwGBQi/2BoAIjWFCL/SEEI1hQi/2B4AMjWFCL/YHABCNYUIv9gaAFI1hQi/4lWSWLCIsHDEEAG4v+VwIAiwhJTgIiCyJYiwZMUIwGJAiMCEL/3Yv/VwBgiwZMUIv/V2BgUIv/V8BgUIj/ckmMAUmI/2tJjAJLAUxQSYwGi/+BoAIjWFCI/1aMAIv/IQQjWFCL/4HgAyNYUIv/gcAEI1hQiP86SYwEi/+B4AYiWFCL/4GAByJYUIv/gaAHIlhQi/+BwAciWFCL/4HgByJYUIv/gYAIIlhQgcABr0yI/v9JFSISRFwgjAOBAowFiwWBBgxBACqLBUkkCSILiwNJTwIiWEsBVyAgiP6sSRUiEkRLAiILTF2MAyQIjAVC/86L/4GgBSNYi/+BgAYjWFCI/q6LARUiEkSLAhUiEkSLAEkVIhJEiwZMUIsESU4CFSISRExQiwNQSwEVIhJETFCAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQi/2L/ov/jAOMAowBjACJigIBi/5XYCAkJYv/gYAGW4sCDUEAGIsASYj964wAiwGBAguMAYsCJAiMAkL/3IsASRUiEkSL/oHgAksCXUwoqiigKKpJFSISRCEETF2AAgGiTFCAAgAAUIwAiQ==",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 0,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}