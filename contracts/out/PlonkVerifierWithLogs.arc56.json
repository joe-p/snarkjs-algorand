{
    "name": "PlonkVerifierWithLogs",
    "structs": {
        "Proof": [
            {
                "name": "A",
                "type": "byte[96]"
            },
            {
                "name": "B",
                "type": "byte[96]"
            },
            {
                "name": "C",
                "type": "byte[96]"
            },
            {
                "name": "Z",
                "type": "byte[96]"
            },
            {
                "name": "T1",
                "type": "byte[96]"
            },
            {
                "name": "T2",
                "type": "byte[96]"
            },
            {
                "name": "T3",
                "type": "byte[96]"
            },
            {
                "name": "Wxi",
                "type": "byte[96]"
            },
            {
                "name": "Wxiw",
                "type": "byte[96]"
            },
            {
                "name": "eval_a",
                "type": "uint256"
            },
            {
                "name": "eval_b",
                "type": "uint256"
            },
            {
                "name": "eval_c",
                "type": "uint256"
            },
            {
                "name": "eval_s1",
                "type": "uint256"
            },
            {
                "name": "eval_s2",
                "type": "uint256"
            },
            {
                "name": "eval_zw",
                "type": "uint256"
            }
        ],
        "VerificationKey": [
            {
                "name": "Qm",
                "type": "byte[96]"
            },
            {
                "name": "Ql",
                "type": "byte[96]"
            },
            {
                "name": "Qr",
                "type": "byte[96]"
            },
            {
                "name": "Qo",
                "type": "byte[96]"
            },
            {
                "name": "Qc",
                "type": "byte[96]"
            },
            {
                "name": "S1",
                "type": "byte[96]"
            },
            {
                "name": "S2",
                "type": "byte[96]"
            },
            {
                "name": "S3",
                "type": "byte[96]"
            },
            {
                "name": "power",
                "type": "uint64"
            },
            {
                "name": "nPublic",
                "type": "uint64"
            },
            {
                "name": "k1",
                "type": "uint64"
            },
            {
                "name": "k2",
                "type": "uint64"
            },
            {
                "name": "X_2",
                "type": "byte[192]"
            }
        ]
    },
    "methods": [
        {
            "name": "_dummy",
            "args": [
                {
                    "type": "(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64,uint64,uint64,byte[192])",
                    "struct": "VerificationKey",
                    "name": "_vk"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "CloseOut"
                ]
            },
            "readonly": false,
            "desc": "Dummy function that only exists so we can have the VerificationKey type in the generated client",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "verify",
            "args": [
                {
                    "type": "uint256[]",
                    "name": "signals"
                },
                {
                    "type": "(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint256,uint256,uint256,uint256,uint256,uint256)",
                    "struct": "Proof",
                    "name": "proof"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        1273
                    ],
                    "errorMessage": "Fr inverse of zero"
                },
                {
                    "pc": [
                        440
                    ],
                    "errorMessage": "Length must be 192"
                },
                {
                    "pc": [
                        104
                    ],
                    "errorMessage": "Length must be 32"
                },
                {
                    "pc": [
                        167,
                        191,
                        215,
                        239,
                        263,
                        287,
                        311,
                        335,
                        1823,
                        1832,
                        1963,
                        1973,
                        2000,
                        2008,
                        2015,
                        2082,
                        2092,
                        2314,
                        2331,
                        2341,
                        2370,
                        2379,
                        2389,
                        2396,
                        2405
                    ],
                    "errorMessage": "Length must be 96"
                },
                {
                    "pc": [
                        50
                    ],
                    "errorMessage": "OnCompletion is not CloseOut"
                },
                {
                    "pc": [
                        30
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        2612
                    ],
                    "errorMessage": "Verification failed"
                },
                {
                    "pc": [
                        64
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        33,
                        53
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        574,
                        758,
                        787,
                        790,
                        809,
                        1018,
                        1030,
                        1042,
                        1054,
                        1065,
                        1491,
                        1506,
                        2036,
                        2041,
                        2048,
                        2057,
                        2066
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        1390
                    ],
                    "errorMessage": "max array length exceeded"
                },
                {
                    "pc": [
                        94,
                        118,
                        800,
                        1125,
                        1150,
                        1381,
                        1527,
                        1700
                    ],
                    "errorMessage": "overflow"
                }
            ],
            "pcOffsetMethod": "cblocks"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYXJjNC9pbmRleC5kLnRzOjpDb250cmFjdC5hcHByb3ZhbFByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgOTYgMzIgMSAwIDM4NCAxOTIgMjg4IDQ4MCA1NzYgNjcyIDc2OCA3NzYgNzg0IDc5MiA4MDAgOTkyIDM1MgogICAgYnl0ZWNibG9jayAweDczZWRhNzUzMjk5ZDdkNDgzMzM5ZDgwODA5YTFkODA1NTNiZGE0MDJmZmZlNWJmZWZmZmZmZmZmMDAwMDAwMDEgMHggMHgwMSAweDczZWRhNzUzMjk5ZDdkNDgzMzM5ZDgwODA5YTFkODA1NTNiZGE0MDJmZmZlNWJmZWZmZmZmZmZmMDAwMDAwMDAgVE1QTF9ST09UX09GX1VOSVRZIFRNUExfVkVSSUZJQ0FUSU9OX0tFWQogICAgLy8gY29udHJhY3RzL3ZlcmlmaWVyLmFsZ28udHM6MjMKICAgIC8vIGV4cG9ydCBjbGFzcyBQbG9ua1ZlcmlmaWVyV2l0aExvZ3MgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG4gTnVtQXBwQXJncwogICAgYnogbWFpbl9iYXJlX3JvdXRpbmdANwogICAgcHVzaGJ5dGVzcyAweDk1YzEwY2U0IDB4NDNkOTBhMzggLy8gbWV0aG9kICJfZHVtbXkoKGJ5dGVbOTZdLGJ5dGVbOTZdLGJ5dGVbOTZdLGJ5dGVbOTZdLGJ5dGVbOTZdLGJ5dGVbOTZdLGJ5dGVbOTZdLGJ5dGVbOTZdLHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCxieXRlWzE5Ml0pKXZvaWQiLCBtZXRob2QgInZlcmlmeSh1aW50MjU2W10sKGJ5dGVbOTZdLGJ5dGVbOTZdLGJ5dGVbOTZdLGJ5dGVbOTZdLGJ5dGVbOTZdLGJ5dGVbOTZdLGJ5dGVbOTZdLGJ5dGVbOTZdLGJ5dGVbOTZdLHVpbnQyNTYsdWludDI1Nix1aW50MjU2LHVpbnQyNTYsdWludDI1Nix1aW50MjU2KSl2b2lkIgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAogICAgbWF0Y2ggbWFpbl9fZHVtbXlfcm91dGVAMyBtYWluX3ZlcmlmeV9yb3V0ZUA0CgptYWluX2FmdGVyX2lmX2Vsc2VAMTE6CiAgICBlcnIKCm1haW5fdmVyaWZ5X3JvdXRlQDQ6CiAgICAvLyBjb250cmFjdHMvdmVyaWZpZXIuYWxnby50czoyOAogICAgLy8gdmVyaWZ5KHNpZ25hbHM6IFB1YmxpY1NpZ25hbHMsIHByb29mOiBQcm9vZik6IHZvaWQgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBjb250cmFjdHMvdmVyaWZpZXIuYWxnby50czoyMwogICAgLy8gZXhwb3J0IGNsYXNzIFBsb25rVmVyaWZpZXJXaXRoTG9ncyBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIC8vIGNvbnRyYWN0cy92ZXJpZmllci5hbGdvLnRzOjI4CiAgICAvLyB2ZXJpZnkoc2lnbmFsczogUHVibGljU2lnbmFscywgcHJvb2Y6IFByb29mKTogdm9pZCB7CiAgICBjYWxsc3ViIHZlcmlmeQogICAgaW50Y18yIC8vIDEKICAgIHJldHVybgoKbWFpbl9fZHVtbXlfcm91dGVAMzoKICAgIC8vIGNvbnRyYWN0cy92ZXJpZmllci5hbGdvLnRzOjI1CiAgICAvLyBAYWJpbWV0aG9kKHsgYWxsb3dBY3Rpb25zOiAiQ2xvc2VPdXQiIH0pCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICBwdXNoaW50IDIgLy8gQ2xvc2VPdXQKICAgID09CiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBDbG9zZU91dAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBpbnRjXzIgLy8gMQogICAgcmV0dXJuCgptYWluX2JhcmVfcm91dGluZ0A3OgogICAgLy8gY29udHJhY3RzL3ZlcmlmaWVyLmFsZ28udHM6MjMKICAgIC8vIGV4cG9ydCBjbGFzcyBQbG9ua1ZlcmlmaWVyV2l0aExvZ3MgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICBibnogbWFpbl9hZnRlcl9pZl9lbHNlQDExCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgIQogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBjcmVhdGluZwogICAgaW50Y18yIC8vIDEKICAgIHJldHVybgoKCi8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjpmclN1YihhOiBieXRlcywgYjogYnl0ZXMpIC0+IGJ5dGVzOgpmclN1YjoKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjEzMwogICAgLy8gZnVuY3Rpb24gZnJTdWIoYTogYmlndWludCwgYjogYmlndWludCk6IGJpZ3VpbnQgewogICAgcHJvdG8gMiAxCiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czoxMzUKICAgIC8vIGNvbnN0IGFOOiBiaWd1aW50ID0gYSAlIHI7CiAgICBmcmFtZV9kaWcgLTIKICAgIGJ5dGVjXzAgLy8gMHg3M2VkYTc1MzI5OWQ3ZDQ4MzMzOWQ4MDgwOWExZDgwNTUzYmRhNDAyZmZmZTViZmVmZmZmZmZmZjAwMDAwMDAxCiAgICBiJQogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6MTM2CiAgICAvLyBjb25zdCBiTjogYmlndWludCA9IGIgJSByOwogICAgZnJhbWVfZGlnIC0xCiAgICBieXRlY18wIC8vIDB4NzNlZGE3NTMyOTlkN2Q0ODMzMzlkODA4MDlhMWQ4MDU1M2JkYTQwMmZmZmU1YmZlZmZmZmZmZmYwMDAwMDAwMQogICAgYiUKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjEzNwogICAgLy8gcmV0dXJuIChhTiArIHIgLSBiTikgJSByOwogICAgc3dhcAogICAgYnl0ZWNfMCAvLyAweDczZWRhNzUzMjk5ZDdkNDgzMzM5ZDgwODA5YTFkODA1NTNiZGE0MDJmZmZlNWJmZWZmZmZmZmZmMDAwMDAwMDEKICAgIGIrCiAgICBzd2FwCiAgICBiLQogICAgYnl0ZWNfMCAvLyAweDczZWRhNzUzMjk5ZDdkNDgzMzM5ZDgwODA5YTFkODA1NTNiZGE0MDJmZmZlNWJmZWZmZmZmZmZmMDAwMDAwMDEKICAgIGIlCiAgICByZXRzdWIKCgovLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czo6YjMyKGE6IGJ5dGVzKSAtPiBieXRlczoKYjMyOgogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6MTY1CiAgICAvLyBmdW5jdGlvbiBiMzIoYTogYmlndWludCk6IGJ5dGVzPDMyPiB7CiAgICBwcm90byAxIDEKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjE2NgogICAgLy8gcmV0dXJuIG5ldyBVaW50MjU2KGEpLmJ5dGVzLnRvRml4ZWQoeyBsZW5ndGg6IDMyIH0pOwogICAgZnJhbWVfZGlnIC0xCiAgICBsZW4KICAgIGludGNfMSAvLyAzMgogICAgPD0KICAgIGFzc2VydCAvLyBvdmVyZmxvdwogICAgaW50Y18xIC8vIDMyCiAgICBiemVybwogICAgZnJhbWVfZGlnIC0xCiAgICBifAogICAgZHVwCiAgICBsZW4KICAgIGludGNfMSAvLyAzMgogICAgPT0KICAgIGFzc2VydCAvLyBMZW5ndGggbXVzdCBiZSAzMgogICAgcmV0c3ViCgoKLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6OmdldENoYWxsZW5nZSh0ZDogYnl0ZXMpIC0+IGJ5dGVzOgpnZXRDaGFsbGVuZ2U6CiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czo0MjMKICAgIC8vIGV4cG9ydCBmdW5jdGlvbiBnZXRDaGFsbGVuZ2UodGQ6IGJ5dGVzKTogVWludDI1NiB7CiAgICBwcm90byAxIDEKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjQyNAogICAgLy8gbGV0IGhhc2ggPSBvcC5rZWNjYWsyNTYodGQpOwogICAgZnJhbWVfZGlnIC0xCiAgICBrZWNjYWsyNTYKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjE1OAogICAgLy8gcmV0dXJuIGEgJSBCTFMxMl8zODFfU0NBTEFSX01PRFVMVVM7CiAgICBieXRlY18wIC8vIDB4NzNlZGE3NTMyOTlkN2Q0ODMzMzlkODA4MDlhMWQ4MDU1M2JkYTQwMmZmZmU1YmZlZmZmZmZmZmYwMDAwMDAwMQogICAgYiUKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjQyNQogICAgLy8gcmV0dXJuIG5ldyBVaW50MjU2KGZyU2NhbGFyKEJpZ1VpbnQoaGFzaCkpKTsKICAgIGR1cAogICAgbGVuCiAgICBpbnRjXzEgLy8gMzIKICAgIDw9CiAgICBhc3NlcnQgLy8gb3ZlcmZsb3cKICAgIGludGNfMSAvLyAzMgogICAgYnplcm8KICAgIGJ8CiAgICByZXRzdWIKCgovLyBjb250cmFjdHMvdmVyaWZpZXIuYWxnby50czo6UGxvbmtWZXJpZmllcldpdGhMb2dzLnZlcmlmeShzaWduYWxzOiBieXRlcywgcHJvb2Y6IGJ5dGVzKSAtPiB2b2lkOgp2ZXJpZnk6CiAgICAvLyBjb250cmFjdHMvdmVyaWZpZXIuYWxnby50czoyOAogICAgLy8gdmVyaWZ5KHNpZ25hbHM6IFB1YmxpY1NpZ25hbHMsIHByb29mOiBQcm9vZik6IHZvaWQgewogICAgcHJvdG8gMiAwCiAgICBpbnRjXzMgLy8gMAogICAgZHVwbiAzMwogICAgYnl0ZWNfMSAvLyAiIgogICAgZHVwbiA0CiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czozMTkKICAgIC8vIHJldHVybiB2ZXJpZnlXaXRoTG9ncyhkZWNvZGVWayh2a0J5dGVzKSwgc2lnbmFscywgcHJvb2YpOwogICAgYnl0ZWMgNSAvLyBUTVBMX1ZFUklGSUNBVElPTl9LRVkKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjI5NAogICAgLy8gUW06IHZrQnl0ZXMuc2xpY2UoMCwgOTYpLnRvRml4ZWQoeyBsZW5ndGg6IDk2IH0pLAogICAgZHVwCiAgICBsZW4KICAgIGludGNfMyAvLyAwCiAgICBkaWcgMQogICAgPj0KICAgIGludGNfMyAvLyAwCiAgICBkaWcgMgogICAgdW5jb3ZlciAyCiAgICBzZWxlY3QKICAgIGludGNfMCAvLyA5NgogICAgZGlnIDIKICAgID49CiAgICBpbnRjXzAgLy8gOTYKICAgIGRpZyAzCiAgICB1bmNvdmVyIDIKICAgIHNlbGVjdAogICAgZGlnIDMKICAgIHVuY292ZXIgMgogICAgZGlnIDIKICAgIHN1YnN0cmluZzMKICAgIGR1cAogICAgbGVuCiAgICBpbnRjXzAgLy8gOTYKICAgID09CiAgICBhc3NlcnQgLy8gTGVuZ3RoIG11c3QgYmUgOTYKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjI5NQogICAgLy8gUWw6IHZrQnl0ZXMuc2xpY2UoOTYsIDE5MikudG9GaXhlZCh7IGxlbmd0aDogOTYgfSksCiAgICBpbnRjIDUgLy8gMTkyCiAgICBkaWcgMwogICAgPj0KICAgIGludGMgNSAvLyAxOTIKICAgIGRpZyA0CiAgICB1bmNvdmVyIDIKICAgIHNlbGVjdAogICAgZGlnIDQKICAgIHVuY292ZXIgMwogICAgZGlnIDIKICAgIHN1YnN0cmluZzMKICAgIGR1cAogICAgbGVuCiAgICBpbnRjXzAgLy8gOTYKICAgID09CiAgICBhc3NlcnQgLy8gTGVuZ3RoIG11c3QgYmUgOTYKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjI5NgogICAgLy8gUXI6IHZrQnl0ZXMuc2xpY2UoMTkyLCAyODgpLnRvRml4ZWQoeyBsZW5ndGg6IDk2IH0pLAogICAgaW50YyA2IC8vIDI4OAogICAgZGlnIDQKICAgID49CiAgICBpbnRjIDYgLy8gMjg4CiAgICBkaWcgNQogICAgdW5jb3ZlciAyCiAgICBzZWxlY3QKICAgIGRpZyA1CiAgICB1bmNvdmVyIDMKICAgIGRpZyAyCiAgICBzdWJzdHJpbmczCiAgICBkdXAKICAgIGxlbgogICAgaW50Y18wIC8vIDk2CiAgICA9PQogICAgYXNzZXJ0IC8vIExlbmd0aCBtdXN0IGJlIDk2CiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czoyOTcKICAgIC8vIFFvOiB2a0J5dGVzLnNsaWNlKDI4OCwgMzg0KS50b0ZpeGVkKHsgbGVuZ3RoOiA5NiB9KSwKICAgIGludGMgNCAvLyAzODQKICAgIGRpZyA1CiAgICA+PQogICAgaW50YyA0IC8vIDM4NAogICAgZGlnIDYKICAgIHVuY292ZXIgMgogICAgc2VsZWN0CiAgICBkaWcgNgogICAgdW5jb3ZlciAzCiAgICBkaWcgMgogICAgc3Vic3RyaW5nMwogICAgZHVwCiAgICBsZW4KICAgIGludGNfMCAvLyA5NgogICAgPT0KICAgIGFzc2VydCAvLyBMZW5ndGggbXVzdCBiZSA5NgogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6Mjk4CiAgICAvLyBRYzogdmtCeXRlcy5zbGljZSgzODQsIDQ4MCkudG9GaXhlZCh7IGxlbmd0aDogOTYgfSksCiAgICBpbnRjIDcgLy8gNDgwCiAgICBkaWcgNgogICAgPj0KICAgIGludGMgNyAvLyA0ODAKICAgIGRpZyA3CiAgICB1bmNvdmVyIDIKICAgIHNlbGVjdAogICAgZGlnIDcKICAgIHVuY292ZXIgMwogICAgZGlnIDIKICAgIHN1YnN0cmluZzMKICAgIGR1cAogICAgbGVuCiAgICBpbnRjXzAgLy8gOTYKICAgID09CiAgICBhc3NlcnQgLy8gTGVuZ3RoIG11c3QgYmUgOTYKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjI5OQogICAgLy8gUzE6IHZrQnl0ZXMuc2xpY2UoNDgwLCA1NzYpLnRvRml4ZWQoeyBsZW5ndGg6IDk2IH0pLAogICAgaW50YyA4IC8vIDU3NgogICAgZGlnIDcKICAgID49CiAgICBpbnRjIDggLy8gNTc2CiAgICBkaWcgOAogICAgdW5jb3ZlciAyCiAgICBzZWxlY3QKICAgIGRpZyA4CiAgICB1bmNvdmVyIDMKICAgIGRpZyAyCiAgICBzdWJzdHJpbmczCiAgICBkdXAKICAgIGxlbgogICAgaW50Y18wIC8vIDk2CiAgICA9PQogICAgYXNzZXJ0IC8vIExlbmd0aCBtdXN0IGJlIDk2CiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czozMDAKICAgIC8vIFMyOiB2a0J5dGVzLnNsaWNlKDU3NiwgNjcyKS50b0ZpeGVkKHsgbGVuZ3RoOiA5NiB9KSwKICAgIGludGMgOSAvLyA2NzIKICAgIGRpZyA4CiAgICA+PQogICAgaW50YyA5IC8vIDY3MgogICAgZGlnIDkKICAgIHVuY292ZXIgMgogICAgc2VsZWN0CiAgICBkaWcgOQogICAgdW5jb3ZlciAzCiAgICBkaWcgMgogICAgc3Vic3RyaW5nMwogICAgZHVwCiAgICBsZW4KICAgIGludGNfMCAvLyA5NgogICAgPT0KICAgIGFzc2VydCAvLyBMZW5ndGggbXVzdCBiZSA5NgogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6MzAxCiAgICAvLyBTMzogdmtCeXRlcy5zbGljZSg2NzIsIDc2OCkudG9GaXhlZCh7IGxlbmd0aDogOTYgfSksCiAgICBpbnRjIDEwIC8vIDc2OAogICAgZGlnIDkKICAgID49CiAgICBpbnRjIDEwIC8vIDc2OAogICAgZGlnIDEwCiAgICB1bmNvdmVyIDIKICAgIHNlbGVjdAogICAgZGlnIDEwCiAgICB1bmNvdmVyIDMKICAgIGRpZyAyCiAgICBzdWJzdHJpbmczCiAgICBkdXAKICAgIGxlbgogICAgaW50Y18wIC8vIDk2CiAgICA9PQogICAgYXNzZXJ0IC8vIExlbmd0aCBtdXN0IGJlIDk2CiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czozMDIKICAgIC8vIHBvd2VyOiBvcC5idG9pKHZrQnl0ZXMuc2xpY2UoNzY4LCA3NzYpKSwKICAgIGludGMgMTEgLy8gNzc2CiAgICBkaWcgMTAKICAgID49CiAgICBpbnRjIDExIC8vIDc3NgogICAgZGlnIDExCiAgICB1bmNvdmVyIDIKICAgIHNlbGVjdAogICAgZGlnIDExCiAgICB1bmNvdmVyIDMKICAgIGRpZyAyCiAgICBzdWJzdHJpbmczCiAgICBidG9pCiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czozMDMKICAgIC8vIG5QdWJsaWM6IG9wLmJ0b2kodmtCeXRlcy5zbGljZSg3NzYsIDc4NCkpLAogICAgaW50YyAxMiAvLyA3ODQKICAgIGRpZyAxMQogICAgPj0KICAgIGludGMgMTIgLy8gNzg0CiAgICBkaWcgMTIKICAgIHVuY292ZXIgMgogICAgc2VsZWN0CiAgICBkaWcgMTIKICAgIHVuY292ZXIgMwogICAgZGlnIDIKICAgIHN1YnN0cmluZzMKICAgIGJ0b2kKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjMwNAogICAgLy8gazE6IG9wLmJ0b2kodmtCeXRlcy5zbGljZSg3ODQsIDc5MikpLAogICAgaW50YyAxMyAvLyA3OTIKICAgIGRpZyAxMgogICAgPj0KICAgIGludGMgMTMgLy8gNzkyCiAgICBkaWcgMTMKICAgIHVuY292ZXIgMgogICAgc2VsZWN0CiAgICBkaWcgMTMKICAgIHVuY292ZXIgMwogICAgZGlnIDIKICAgIHN1YnN0cmluZzMKICAgIGJ0b2kKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjMwNQogICAgLy8gazI6IG9wLmJ0b2kodmtCeXRlcy5zbGljZSg3OTIsIDgwMCkpLAogICAgaW50YyAxNCAvLyA4MDAKICAgIGRpZyAxMwogICAgPj0KICAgIGludGMgMTQgLy8gODAwCiAgICBkaWcgMTQKICAgIHVuY292ZXIgMgogICAgc2VsZWN0CiAgICBkaWcgMTQKICAgIHVuY292ZXIgMwogICAgZGlnIDIKICAgIHN1YnN0cmluZzMKICAgIGJ0b2kKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjMwNgogICAgLy8gWF8yOiB2a0J5dGVzLnNsaWNlKDgwMCwgOTkyKS50b0ZpeGVkKHsgbGVuZ3RoOiAxOTIgfSksCiAgICBpbnRjIDE1IC8vIDk5MgogICAgZGlnIDE0CiAgICA+PQogICAgaW50YyAxNSAvLyA5OTIKICAgIHVuY292ZXIgMTUKICAgIHVuY292ZXIgMgogICAgc2VsZWN0CiAgICB1bmNvdmVyIDE0CiAgICB1bmNvdmVyIDMKICAgIHVuY292ZXIgMgogICAgc3Vic3RyaW5nMwogICAgZHVwCiAgICBsZW4KICAgIGludGMgNSAvLyAxOTIKICAgID09CiAgICBhc3NlcnQgLy8gTGVuZ3RoIG11c3QgYmUgMTkyCiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czoyOTMtMzA3CiAgICAvLyByZXR1cm4gewogICAgLy8gICBRbTogdmtCeXRlcy5zbGljZSgwLCA5NikudG9GaXhlZCh7IGxlbmd0aDogOTYgfSksCiAgICAvLyAgIFFsOiB2a0J5dGVzLnNsaWNlKDk2LCAxOTIpLnRvRml4ZWQoeyBsZW5ndGg6IDk2IH0pLAogICAgLy8gICBRcjogdmtCeXRlcy5zbGljZSgxOTIsIDI4OCkudG9GaXhlZCh7IGxlbmd0aDogOTYgfSksCiAgICAvLyAgIFFvOiB2a0J5dGVzLnNsaWNlKDI4OCwgMzg0KS50b0ZpeGVkKHsgbGVuZ3RoOiA5NiB9KSwKICAgIC8vICAgUWM6IHZrQnl0ZXMuc2xpY2UoMzg0LCA0ODApLnRvRml4ZWQoeyBsZW5ndGg6IDk2IH0pLAogICAgLy8gICBTMTogdmtCeXRlcy5zbGljZSg0ODAsIDU3NikudG9GaXhlZCh7IGxlbmd0aDogOTYgfSksCiAgICAvLyAgIFMyOiB2a0J5dGVzLnNsaWNlKDU3NiwgNjcyKS50b0ZpeGVkKHsgbGVuZ3RoOiA5NiB9KSwKICAgIC8vICAgUzM6IHZrQnl0ZXMuc2xpY2UoNjcyLCA3NjgpLnRvRml4ZWQoeyBsZW5ndGg6IDk2IH0pLAogICAgLy8gICBwb3dlcjogb3AuYnRvaSh2a0J5dGVzLnNsaWNlKDc2OCwgNzc2KSksCiAgICAvLyAgIG5QdWJsaWM6IG9wLmJ0b2kodmtCeXRlcy5zbGljZSg3NzYsIDc4NCkpLAogICAgLy8gICBrMTogb3AuYnRvaSh2a0J5dGVzLnNsaWNlKDc4NCwgNzkyKSksCiAgICAvLyAgIGsyOiBvcC5idG9pKHZrQnl0ZXMuc2xpY2UoNzkyLCA4MDApKSwKICAgIC8vICAgWF8yOiB2a0J5dGVzLnNsaWNlKDgwMCwgOTkyKS50b0ZpeGVkKHsgbGVuZ3RoOiAxOTIgfSksCiAgICAvLyB9OwogICAgdW5jb3ZlciAxMgogICAgdW5jb3ZlciAxMgogICAgY29uY2F0CiAgICB1bmNvdmVyIDExCiAgICBjb25jYXQKICAgIHVuY292ZXIgMTAKICAgIGNvbmNhdAogICAgdW5jb3ZlciA5CiAgICBjb25jYXQKICAgIHVuY292ZXIgOAogICAgY29uY2F0CiAgICB1bmNvdmVyIDcKICAgIGNvbmNhdAogICAgdW5jb3ZlciA2CiAgICBjb25jYXQKICAgIHVuY292ZXIgNQogICAgaXRvYgogICAgY29uY2F0CiAgICB1bmNvdmVyIDQKICAgIGl0b2IKICAgIGNvbmNhdAogICAgdW5jb3ZlciAzCiAgICBpdG9iCiAgICBjb25jYXQKICAgIHVuY292ZXIgMgogICAgaXRvYgogICAgY29uY2F0CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGR1cG4gMgogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6NDQwCiAgICAvLyBsZXQgdGQgPSBvcC5jb25jYXQodmsuUW0sIHZrLlFsKTsKICAgIGV4dHJhY3QgMCA5NgogICAgZGlnIDEKICAgIGV4dHJhY3QgOTYgOTYKICAgIGNvbmNhdAogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6NDQxCiAgICAvLyB0ZCA9IG9wLmNvbmNhdCh0ZCwgdmsuUXIpOwogICAgZGlnIDEKICAgIGV4dHJhY3QgMTkyIDk2CiAgICBjb25jYXQKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjQ0MgogICAgLy8gdGQgPSBvcC5jb25jYXQodGQsIHZrLlFvKTsKICAgIGRpZyAxCiAgICBpbnRjIDYgLy8gMjg4CiAgICBpbnRjXzAgLy8gOTYKICAgIGV4dHJhY3QzCiAgICBjb25jYXQKICAgIGR1cAogICAgY292ZXIgMgogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6NDQzCiAgICAvLyB0ZCA9IG9wLmNvbmNhdCh0ZCwgdmsuUWMpOwogICAgZGlnIDEKICAgIGludGMgNCAvLyAzODQKICAgIGludGNfMCAvLyA5NgogICAgZXh0cmFjdDMKICAgIGR1cAogICAgY292ZXIgMwogICAgY29uY2F0CiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czo0NDQKICAgIC8vIHRkID0gb3AuY29uY2F0KHRkLCB2ay5TMSk7CiAgICBkaWcgMQogICAgaW50YyA3IC8vIDQ4MAogICAgaW50Y18wIC8vIDk2CiAgICBleHRyYWN0MwogICAgZHVwCiAgICBjb3ZlciAzCiAgICBjb25jYXQKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjQ0NQogICAgLy8gdGQgPSBvcC5jb25jYXQodGQsIHZrLlMyKTsKICAgIGRpZyAxCiAgICBpbnRjIDggLy8gNTc2CiAgICBpbnRjXzAgLy8gOTYKICAgIGV4dHJhY3QzCiAgICBkdXAKICAgIGNvdmVyIDMKICAgIGNvbmNhdAogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6NDQ2CiAgICAvLyB0ZCA9IG9wLmNvbmNhdCh0ZCwgdmsuUzMpOwogICAgc3dhcAogICAgaW50YyA5IC8vIDY3MgogICAgaW50Y18wIC8vIDk2CiAgICBleHRyYWN0MwogICAgZHVwCiAgICBjb3ZlciAyCiAgICBjb25jYXQKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjQ0OAogICAgLy8gZm9yIChjb25zdCBzaWduYWwgb2Ygc2lnbmFscykgewogICAgZnJhbWVfZGlnIC0yCiAgICBpbnRjXzMgLy8gMAogICAgZXh0cmFjdF91aW50MTYKICAgIGludGNfMyAvLyAwCgp2ZXJpZnlfZm9yX2hlYWRlckAyOgogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6NDQ4CiAgICAvLyBmb3IgKGNvbnN0IHNpZ25hbCBvZiBzaWduYWxzKSB7CiAgICBmcmFtZV9kaWcgNDcKICAgIGZyYW1lX2RpZyA0NgogICAgPAogICAgYnogdmVyaWZ5X2FmdGVyX2ZvckA0CiAgICBmcmFtZV9kaWcgLTIKICAgIGV4dHJhY3QgMiAwCiAgICBmcmFtZV9kaWcgNDcKICAgIGR1cAogICAgY292ZXIgMgogICAgaW50Y18xIC8vIDMyCiAgICAqCiAgICBpbnRjXzEgLy8gMzIKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6MTU4CiAgICAvLyByZXR1cm4gYSAlIEJMUzEyXzM4MV9TQ0FMQVJfTU9EVUxVUzsKICAgIGJ5dGVjXzAgLy8gMHg3M2VkYTc1MzI5OWQ3ZDQ4MzMzOWQ4MDgwOWExZDgwNTUzYmRhNDAyZmZmZTViZmVmZmZmZmZmZjAwMDAwMDAxCiAgICBiJQogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6NDQ5CiAgICAvLyB0ZCA9IG9wLmNvbmNhdCh0ZCwgYjMyKGZyU2NhbGFyKHNpZ25hbC5uYXRpdmUpKSk7CiAgICBjYWxsc3ViIGIzMgogICAgZnJhbWVfZGlnIDQ1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGZyYW1lX2J1cnkgNDUKICAgIGludGNfMiAvLyAxCiAgICArCiAgICBmcmFtZV9idXJ5IDQ3CiAgICBiIHZlcmlmeV9mb3JfaGVhZGVyQDIKCnZlcmlmeV9hZnRlcl9mb3JANDoKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjQ1MwogICAgLy8gdGQgPSBvcC5jb25jYXQodGQsIHByb29mLkEpOwogICAgZnJhbWVfZGlnIC0xCiAgICBleHRyYWN0IDAgOTYKICAgIGR1cAogICAgZnJhbWVfYnVyeSA5CiAgICBmcmFtZV9kaWcgNDUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6NDU0CiAgICAvLyB0ZCA9IG9wLmNvbmNhdCh0ZCwgcHJvb2YuQik7CiAgICBmcmFtZV9kaWcgLTEKICAgIGV4dHJhY3QgOTYgOTYKICAgIGR1cAogICAgZnJhbWVfYnVyeSAxMAogICAgY29uY2F0CiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czo0NTUKICAgIC8vIHRkID0gb3AuY29uY2F0KHRkLCBwcm9vZi5DKTsKICAgIGZyYW1lX2RpZyAtMQogICAgZXh0cmFjdCAxOTIgOTYKICAgIGR1cAogICAgZnJhbWVfYnVyeSA1CiAgICBjb25jYXQKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjQ1NwogICAgLy8gY29uc3QgYmV0YSA9IGdldENoYWxsZW5nZSh0ZCk7CiAgICBjYWxsc3ViIGdldENoYWxsZW5nZQogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6NDYyCiAgICAvLyBjb25zdCBnYW1tYSA9IGdldENoYWxsZW5nZSh0ZCk7CiAgICBkdXAKICAgIGNhbGxzdWIgZ2V0Q2hhbGxlbmdlCiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czo0NjkKICAgIC8vIHRkID0gb3AuY29uY2F0KHRkLCBnYW1tYS5ieXRlcyk7CiAgICBjb25jYXQKICAgIGR1cAogICAgZnJhbWVfYnVyeSA0NQogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6NDcwCiAgICAvLyB0ZCA9IG9wLmNvbmNhdCh0ZCwgcHJvb2YuWik7CiAgICBmcmFtZV9kaWcgLTEKICAgIGludGMgNiAvLyAyODgKICAgIGludGNfMCAvLyA5NgogICAgZXh0cmFjdDMKICAgIGR1cAogICAgZnJhbWVfYnVyeSAyMgogICAgY29uY2F0CiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czo0NzEKICAgIC8vIGNvbnN0IGFscGhhID0gZ2V0Q2hhbGxlbmdlKHRkKTsKICAgIGNhbGxzdWIgZ2V0Q2hhbGxlbmdlCiAgICBkdXAKICAgIGZyYW1lX2J1cnkgMTEKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjQ3OAogICAgLy8gdGQgPSBvcC5jb25jYXQodGQsIHByb29mLlQxKTsKICAgIGZyYW1lX2RpZyAtMQogICAgaW50YyA0IC8vIDM4NAogICAgaW50Y18wIC8vIDk2CiAgICBleHRyYWN0MwogICAgZHVwCiAgICBmcmFtZV9idXJ5IDYKICAgIGNvbmNhdAogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6NDc5CiAgICAvLyB0ZCA9IG9wLmNvbmNhdCh0ZCwgcHJvb2YuVDIpOwogICAgZnJhbWVfZGlnIC0xCiAgICBpbnRjIDcgLy8gNDgwCiAgICBpbnRjXzAgLy8gOTYKICAgIGV4dHJhY3QzCiAgICBkdXAKICAgIGZyYW1lX2J1cnkgNwogICAgY29uY2F0CiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czo0ODAKICAgIC8vIHRkID0gb3AuY29uY2F0KHRkLCBwcm9vZi5UMyk7CiAgICBmcmFtZV9kaWcgLTEKICAgIGludGMgOCAvLyA1NzYKICAgIGludGNfMCAvLyA5NgogICAgZXh0cmFjdDMKICAgIGR1cAogICAgZnJhbWVfYnVyeSA4CiAgICBjb25jYXQKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjQ4MQogICAgLy8gY29uc3QgeGkgPSBnZXRDaGFsbGVuZ2UodGQpOwogICAgY2FsbHN1YiBnZXRDaGFsbGVuZ2UKICAgIGR1cAogICAgZnJhbWVfYnVyeSAzMgogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6NDg4CiAgICAvLyB0ZCA9IG9wLmNvbmNhdCh0ZCwgcHJvb2YuZXZhbF9hLmJ5dGVzKTsKICAgIGZyYW1lX2RpZyAtMQogICAgcHVzaGludCA4NjQgLy8gODY0CiAgICBpbnRjXzEgLy8gMzIKICAgIGV4dHJhY3QzCiAgICBkdXAKICAgIGZyYW1lX2J1cnkgMTgKICAgIGNvbmNhdAogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6NDg5CiAgICAvLyB0ZCA9IG9wLmNvbmNhdCh0ZCwgcHJvb2YuZXZhbF9iLmJ5dGVzKTsKICAgIGZyYW1lX2RpZyAtMQogICAgcHVzaGludCA4OTYgLy8gODk2CiAgICBpbnRjXzEgLy8gMzIKICAgIGV4dHJhY3QzCiAgICBkdXAKICAgIGZyYW1lX2J1cnkgMTkKICAgIGNvbmNhdAogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6NDkwCiAgICAvLyB0ZCA9IG9wLmNvbmNhdCh0ZCwgcHJvb2YuZXZhbF9jLmJ5dGVzKTsKICAgIGZyYW1lX2RpZyAtMQogICAgcHVzaGludCA5MjggLy8gOTI4CiAgICBpbnRjXzEgLy8gMzIKICAgIGV4dHJhY3QzCiAgICBkdXAKICAgIGZyYW1lX2J1cnkgMjAKICAgIGNvbmNhdAogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6NDkxCiAgICAvLyB0ZCA9IG9wLmNvbmNhdCh0ZCwgcHJvb2YuZXZhbF9zMS5ieXRlcyk7CiAgICBmcmFtZV9kaWcgLTEKICAgIHB1c2hpbnQgOTYwIC8vIDk2MAogICAgaW50Y18xIC8vIDMyCiAgICBleHRyYWN0MwogICAgZHVwCiAgICBmcmFtZV9idXJ5IDE1CiAgICBjb25jYXQKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjQ5MgogICAgLy8gdGQgPSBvcC5jb25jYXQodGQsIHByb29mLmV2YWxfczIuYnl0ZXMpOwogICAgZnJhbWVfZGlnIC0xCiAgICBpbnRjIDE1IC8vIDk5MgogICAgaW50Y18xIC8vIDMyCiAgICBleHRyYWN0MwogICAgZHVwCiAgICBmcmFtZV9idXJ5IDEzCiAgICBjb25jYXQKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjQ5MwogICAgLy8gdGQgPSBvcC5jb25jYXQodGQsIHByb29mLmV2YWxfencuYnl0ZXMpOwogICAgZnJhbWVfZGlnIC0xCiAgICBwdXNoaW50IDEwMjQgLy8gMTAyNAogICAgaW50Y18xIC8vIDMyCiAgICBleHRyYWN0MwogICAgZHVwCiAgICBmcmFtZV9idXJ5IDE0CiAgICBjb25jYXQKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjQ5NQogICAgLy8gY29uc3QgdiA9IG5ldyBGaXhlZEFycmF5PFVpbnQyNTYsIDY+KCk7CiAgICBpbnRjIDUgLy8gMTkyCiAgICBiemVybwogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6NDk2CiAgICAvLyB2WzFdID0gZ2V0Q2hhbGxlbmdlKHRkKTsgLy8gdjEKICAgIHN3YXAKICAgIGNhbGxzdWIgZ2V0Q2hhbGxlbmdlCiAgICByZXBsYWNlMiAzMiAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGZyYW1lX2J1cnkgMjkKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjQ5NwogICAgLy8gZm9yIChsZXQgaTogdWludDY0ID0gMjsgaSA8IDY7IGkrKykgewogICAgcHVzaGludCAyIC8vIDIKICAgIGZyYW1lX2J1cnkgMzUKCnZlcmlmeV93aGlsZV90b3BANToKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjQ5NwogICAgLy8gZm9yIChsZXQgaTogdWludDY0ID0gMjsgaSA8IDY7IGkrKykgewogICAgZnJhbWVfZGlnIDM1CiAgICBwdXNoaW50IDYgLy8gNgogICAgPAogICAgYnogdmVyaWZ5X2FmdGVyX3doaWxlQDcKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjQ5OAogICAgLy8gdltpXSA9IG5ldyBVaW50MjU2KGZyTXVsKCh2W2kgLSAxXSBhcyBVaW50MjU2KS5uYXRpdmUsIHZbMV0ubmF0aXZlKSk7IC8vIHZbaV0gPSB2MV5pCiAgICBmcmFtZV9kaWcgMzUKICAgIGR1cAogICAgaW50Y18yIC8vIDEKICAgIC0KICAgIGludGNfMSAvLyAzMgogICAgKgogICAgZnJhbWVfZGlnIDI5CiAgICBkdXAKICAgIHVuY292ZXIgMgogICAgaW50Y18xIC8vIDMyCiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGRpZyAxCiAgICBleHRyYWN0IDMyIDMyIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6NjQKICAgIC8vIHJldHVybiAoYSAqIGIpICUgQkxTMTJfMzgxX1NDQUxBUl9NT0RVTFVTOwogICAgYioKICAgIGJ5dGVjXzAgLy8gMHg3M2VkYTc1MzI5OWQ3ZDQ4MzMzOWQ4MDgwOWExZDgwNTUzYmRhNDAyZmZmZTViZmVmZmZmZmZmZjAwMDAwMDAxCiAgICBiJQogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6NDk4CiAgICAvLyB2W2ldID0gbmV3IFVpbnQyNTYoZnJNdWwoKHZbaSAtIDFdIGFzIFVpbnQyNTYpLm5hdGl2ZSwgdlsxXS5uYXRpdmUpKTsgLy8gdltpXSA9IHYxXmkKICAgIGR1cAogICAgbGVuCiAgICBpbnRjXzEgLy8gMzIKICAgIDw9CiAgICBhc3NlcnQgLy8gb3ZlcmZsb3cKICAgIGludGNfMSAvLyAzMgogICAgYnplcm8KICAgIGJ8CiAgICBkaWcgMgogICAgaW50Y18xIC8vIDMyCiAgICAqCiAgICBzd2FwCiAgICByZXBsYWNlMyAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGZyYW1lX2J1cnkgMjkKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjQ5NwogICAgLy8gZm9yIChsZXQgaTogdWludDY0ID0gMjsgaSA8IDY7IGkrKykgewogICAgaW50Y18yIC8vIDEKICAgICsKICAgIGZyYW1lX2J1cnkgMzUKICAgIGIgdmVyaWZ5X3doaWxlX3RvcEA1Cgp2ZXJpZnlfYWZ0ZXJfd2hpbGVANzoKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjUwNQogICAgLy8gdGQgPSBvcC5jb25jYXQodGQsIHByb29mLld4aSk7CiAgICBmcmFtZV9kaWcgLTEKICAgIGludGMgOSAvLyA2NzIKICAgIGludGNfMCAvLyA5NgogICAgZXh0cmFjdDMKICAgIGR1cAogICAgZnJhbWVfYnVyeSAyNwogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6NTA2CiAgICAvLyB0ZCA9IG9wLmNvbmNhdCh0ZCwgcHJvb2YuV3hpdyk7CiAgICBmcmFtZV9kaWcgLTEKICAgIGludGMgMTAgLy8gNzY4CiAgICBpbnRjXzAgLy8gOTYKICAgIGV4dHJhY3QzCiAgICBkdXAKICAgIGZyYW1lX2J1cnkgMjMKICAgIGNvbmNhdAogICAgZHVwCiAgICBmcmFtZV9idXJ5IDI4CiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czo1MDcKICAgIC8vIGNvbnN0IHUgPSBnZXRDaGFsbGVuZ2UodGQpOwogICAgY2FsbHN1YiBnZXRDaGFsbGVuZ2UKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjUwOS01MTgKICAgIC8vIHJldHVybiB7CiAgICAvLyAgIGJldGEsCiAgICAvLyAgIGdhbW1hLAogICAgLy8gICBhbHBoYSwKICAgIC8vICAgeGksCiAgICAvLyAgIHYsCiAgICAvLyAgIHUsCiAgICAvLyAgIHhpbjogbmV3IFVpbnQyNTYoKSwKICAgIC8vICAgemg6IG5ldyBVaW50MjU2KCksCiAgICAvLyB9OwogICAgZnJhbWVfZGlnIDQ1CiAgICBmcmFtZV9kaWcgMTEKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIDMyCiAgICBjb25jYXQKICAgIGZyYW1lX2RpZyAyOQogICAgY29uY2F0CiAgICBzd2FwCiAgICBjb25jYXQKICAgIHB1c2hieXRlcyAweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwCiAgICBjb25jYXQKICAgIGR1cAogICAgZnJhbWVfYnVyeSAxNgogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6Mzc4CiAgICAvLyBkZWJ1Z0xvZygiYmV0YSIsIGNoYWxsZW5nZXMuYmV0YS5ieXRlcyk7CiAgICBkdXAKICAgIGV4dHJhY3QgMCAzMgogICAgcHVzaGJ5dGVzICJiZXRhIgogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6MjEzCiAgICAvLyBsb2cobmFtZSk7CiAgICBsb2cKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjIxNAogICAgLy8gbG9nKHZhbHVlKTsKICAgIGxvZwogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6Mzc5CiAgICAvLyBkZWJ1Z0xvZygiZ2FtbWEiLCBjaGFsbGVuZ2VzLmdhbW1hLmJ5dGVzKTsKICAgIGR1cAogICAgZXh0cmFjdCAzMiAzMgogICAgcHVzaGJ5dGVzICJnYW1tYSIKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjIxMwogICAgLy8gbG9nKG5hbWUpOwogICAgbG9nCiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czoyMTQKICAgIC8vIGxvZyh2YWx1ZSk7CiAgICBsb2cKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjM4MAogICAgLy8gZGVidWdMb2coImFscGhhIiwgY2hhbGxlbmdlcy5hbHBoYS5ieXRlcyk7CiAgICBkdXAKICAgIGV4dHJhY3QgNjQgMzIKICAgIHB1c2hieXRlcyAiYWxwaGEiCiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czoyMTMKICAgIC8vIGxvZyhuYW1lKTsKICAgIGxvZwogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6MjE0CiAgICAvLyBsb2codmFsdWUpOwogICAgbG9nCiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czozODEKICAgIC8vIGRlYnVnTG9nKCJ4aSIsIGNoYWxsZW5nZXMueGkuYnl0ZXMpOwogICAgZHVwCiAgICBleHRyYWN0IDk2IDMyCiAgICBwdXNoYnl0ZXMgInhpIgogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6MjEzCiAgICAvLyBsb2cobmFtZSk7CiAgICBsb2cKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjIxNAogICAgLy8gbG9nKHZhbHVlKTsKICAgIGR1cAogICAgbG9nCiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czozODIKICAgIC8vIGRlYnVnTG9nKCJ1IiwgY2hhbGxlbmdlcy51LmJ5dGVzKTsKICAgIGRpZyAxCiAgICBwdXNoaW50IDMyMCAvLyAzMjAKICAgIGludGNfMSAvLyAzMgogICAgZXh0cmFjdDMKICAgIHB1c2hieXRlcyAidSIKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjIxMwogICAgLy8gbG9nKG5hbWUpOwogICAgbG9nCiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czoyMTQKICAgIC8vIGxvZyh2YWx1ZSk7CiAgICBsb2cKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjM4MwogICAgLy8gZGVidWdMb2coInhpbiIsIGNoYWxsZW5nZXMueGluLmJ5dGVzKTsKICAgIGRpZyAxCiAgICBpbnRjIDE2IC8vIDM1MgogICAgaW50Y18xIC8vIDMyCiAgICBleHRyYWN0MwogICAgcHVzaGJ5dGVzICJ4aW4iCiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czoyMTMKICAgIC8vIGxvZyhuYW1lKTsKICAgIGxvZwogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6MjE0CiAgICAvLyBsb2codmFsdWUpOwogICAgbG9nCiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czozODQKICAgIC8vIGRlYnVnTG9nKCJ6aCIsIGNoYWxsZW5nZXMuemguYnl0ZXMpOwogICAgZGlnIDEKICAgIGludGMgNCAvLyAzODQKICAgIGludGNfMSAvLyAzMgogICAgZXh0cmFjdDMKICAgIHB1c2hieXRlcyAiemgiCiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czoyMTMKICAgIC8vIGxvZyhuYW1lKTsKICAgIGxvZwogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6MjE0CiAgICAvLyBsb2codmFsdWUpOwogICAgbG9nCiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czozODUKICAgIC8vIGRlYnVnTG9nKCJ2WzFdIiwgKGNoYWxsZW5nZXMudlsxXSBhcyBVaW50MjU2KS5ieXRlcyk7CiAgICBzd2FwCiAgICBleHRyYWN0IDEyOCAxOTIKICAgIGR1cAogICAgZXh0cmFjdCAzMiAzMiAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIHB1c2hieXRlcyAidlsxXSIKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjIxMwogICAgLy8gbG9nKG5hbWUpOwogICAgbG9nCiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czoyMTQKICAgIC8vIGxvZyh2YWx1ZSk7CiAgICBsb2cKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjM4NS0zODYKICAgIC8vIGRlYnVnTG9nKCJ2WzFdIiwgKGNoYWxsZW5nZXMudlsxXSBhcyBVaW50MjU2KS5ieXRlcyk7CiAgICAvLyBkZWJ1Z0xvZygidlsyXSIsIChjaGFsbGVuZ2VzLnZbMl0gYXMgVWludDI1NikuYnl0ZXMpOwogICAgZHVwCiAgICBleHRyYWN0IDY0IDMyIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6Mzg2CiAgICAvLyBkZWJ1Z0xvZygidlsyXSIsIChjaGFsbGVuZ2VzLnZbMl0gYXMgVWludDI1NikuYnl0ZXMpOwogICAgcHVzaGJ5dGVzICJ2WzJdIgogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6MjEzCiAgICAvLyBsb2cobmFtZSk7CiAgICBsb2cKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjIxNAogICAgLy8gbG9nKHZhbHVlKTsKICAgIGxvZwogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6Mzg3CiAgICAvLyBkZWJ1Z0xvZygidlszXSIsIChjaGFsbGVuZ2VzLnZbM10gYXMgVWludDI1NikuYnl0ZXMpOwogICAgZHVwCiAgICBleHRyYWN0IDk2IDMyIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgcHVzaGJ5dGVzICJ2WzNdIgogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6MjEzCiAgICAvLyBsb2cobmFtZSk7CiAgICBsb2cKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjIxNAogICAgLy8gbG9nKHZhbHVlKTsKICAgIGxvZwogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6Mzg4CiAgICAvLyBkZWJ1Z0xvZygidls0XSIsIChjaGFsbGVuZ2VzLnZbNF0gYXMgVWludDI1NikuYnl0ZXMpOwogICAgZHVwCiAgICBleHRyYWN0IDEyOCAzMiAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIHB1c2hieXRlcyAidls0XSIKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjIxMwogICAgLy8gbG9nKG5hbWUpOwogICAgbG9nCiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czoyMTQKICAgIC8vIGxvZyh2YWx1ZSk7CiAgICBsb2cKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjM4OQogICAgLy8gZGVidWdMb2coInZbNV0iLCAoY2hhbGxlbmdlcy52WzVdIGFzIFVpbnQyNTYpLmJ5dGVzKTsKICAgIGV4dHJhY3QgMTYwIDMyIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgcHVzaGJ5dGVzICJ2WzVdIgogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6MjEzCiAgICAvLyBsb2cobmFtZSk7CiAgICBsb2cKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjIxNAogICAgLy8gbG9nKHZhbHVlKTsKICAgIGxvZwogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6NTMyCiAgICAvLyBsZXQgZG9tYWluU2l6ZTogdWludDY0ID0gMTsKICAgIGludGNfMiAvLyAxCiAgICBmcmFtZV9idXJ5IDM0CiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czo1MzMKICAgIC8vIGZvciAobGV0IGk6IHVpbnQ2NCA9IDA7IGkgPCB2ay5wb3dlcjsgaSsrKSB7CiAgICBpbnRjXzMgLy8gMAogICAgZnJhbWVfYnVyeSAzNQogICAgZnJhbWVfYnVyeSAzMwoKdmVyaWZ5X3doaWxlX3RvcEAxMDoKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjUzMwogICAgLy8gZm9yIChsZXQgaTogdWludDY0ID0gMDsgaSA8IHZrLnBvd2VyOyBpKyspIHsKICAgIGZyYW1lX2RpZyAzOQogICAgaW50YyAxMCAvLyA3NjgKICAgIGV4dHJhY3RfdWludDY0CiAgICBmcmFtZV9kaWcgMzUKICAgID4KICAgIGJ6IHZlcmlmeV9hZnRlcl93aGlsZUAxMgogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6NjQKICAgIC8vIHJldHVybiAoYSAqIGIpICUgQkxTMTJfMzgxX1NDQUxBUl9NT0RVTFVTOwogICAgZnJhbWVfZGlnIDMzCiAgICBkdXAKICAgIGIqCiAgICBieXRlY18wIC8vIDB4NzNlZGE3NTMyOTlkN2Q0ODMzMzlkODA4MDlhMWQ4MDU1M2JkYTQwMmZmZmU1YmZlZmZmZmZmZmYwMDAwMDAwMQogICAgYiUKICAgIGZyYW1lX2J1cnkgMzMKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjUzNQogICAgLy8gZG9tYWluU2l6ZSAqPSAyOwogICAgZnJhbWVfZGlnIDM0CiAgICBwdXNoaW50IDIgLy8gMgogICAgKgogICAgZnJhbWVfYnVyeSAzNAogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6NTMzCiAgICAvLyBmb3IgKGxldCBpOiB1aW50NjQgPSAwOyBpIDwgdmsucG93ZXI7IGkrKykgewogICAgZnJhbWVfZGlnIDM1CiAgICBpbnRjXzIgLy8gMQogICAgKwogICAgZnJhbWVfYnVyeSAzNQogICAgYiB2ZXJpZnlfd2hpbGVfdG9wQDEwCgp2ZXJpZnlfYWZ0ZXJfd2hpbGVAMTI6CiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czo1MzgKICAgIC8vIGNoYWxsZW5nZXMueGluID0gbmV3IFVpbnQyNTYoeGluKTsKICAgIGZyYW1lX2RpZyAzMwogICAgZHVwCiAgICBsZW4KICAgIGludGNfMSAvLyAzMgogICAgPD0KICAgIGFzc2VydCAvLyBvdmVyZmxvdwogICAgaW50Y18xIC8vIDMyCiAgICBiemVybwogICAgZHVwCiAgICBmcmFtZV9idXJ5IDMKICAgIGR1cDIKICAgIGJ8CiAgICBmcmFtZV9kaWcgMTYKICAgIGludGMgMTYgLy8gMzUyCiAgICB1bmNvdmVyIDIKICAgIHJlcGxhY2UzCiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czo1MzkKICAgIC8vIGNoYWxsZW5nZXMuemggPSBuZXcgVWludDI1NihmclN1Yih4aW4sIEJpZ1VpbnQoMSkpKTsgLy8gVmFuaXNoaW5nIHBvbHlub21pYWwgWl9IKM6+KSA9IM6+Xm4gLSAxCiAgICB1bmNvdmVyIDIKICAgIGJ5dGVjXzIgLy8gMHgwMQogICAgY2FsbHN1YiBmclN1YgogICAgZHVwCiAgICBsZW4KICAgIGludGNfMSAvLyAzMgogICAgPD0KICAgIGFzc2VydCAvLyBvdmVyZmxvdwogICAgdW5jb3ZlciAyCiAgICBifAogICAgaW50YyA0IC8vIDM4NAogICAgc3dhcAogICAgcmVwbGFjZTMKICAgIGZyYW1lX2J1cnkgMTYKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjU0MQogICAgLy8gY29uc3QgbiA9IGZyU2NhbGFyKEJpZ1VpbnQoZG9tYWluU2l6ZSkpOwogICAgZnJhbWVfZGlnIDM0CiAgICBpdG9iCiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czoxNTgKICAgIC8vIHJldHVybiBhICUgQkxTMTJfMzgxX1NDQUxBUl9NT0RVTFVTOwogICAgYnl0ZWNfMCAvLyAweDczZWRhNzUzMjk5ZDdkNDgzMzM5ZDgwODA5YTFkODA1NTNiZGE0MDJmZmZlNWJmZWZmZmZmZmZmMDAwMDAwMDEKICAgIGIlCiAgICBmcmFtZV9idXJ5IDIxCiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czo1NDcKICAgIC8vIGxldCB3ID0gQmlnVWludCgxKTsKICAgIGJ5dGVjXzIgLy8gMHgwMQogICAgZnJhbWVfYnVyeSAzMQogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6NTU2CiAgICAvLyBjb25zdCBMOiBVaW50MjU2W10gPSBbbmV3IFVpbnQyNTYoKV07CiAgICBwdXNoYnl0ZXMgMHgwMDAxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMAogICAgZnJhbWVfYnVyeSAwCiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czo1NTkKICAgIC8vIGNvbnN0IGl0ZXJhdGlvbnM6IHVpbnQ2NCA9IHZrLm5QdWJsaWMgPT09IDAgPyAxIDogdmsublB1YmxpYzsKICAgIGZyYW1lX2RpZyAzOQogICAgaW50YyAxMSAvLyA3NzYKICAgIGV4dHJhY3RfdWludDY0CiAgICBkdXAKICAgIGZyYW1lX2J1cnkgMzgKICAgIGJueiB2ZXJpZnlfdGVybmFyeV9mYWxzZUAxNAogICAgaW50Y18yIC8vIDEKICAgIGZyYW1lX2J1cnkgMzYKCnZlcmlmeV90ZXJuYXJ5X21lcmdlQDE1OgogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6NTYwCiAgICAvLyBmb3IgKGxldCBpOiB1aW50NjQgPSAxOyBpIDw9IGl0ZXJhdGlvbnM7IGkrKykgewogICAgaW50Y18yIC8vIDEKICAgIGZyYW1lX2J1cnkgMzcKCnZlcmlmeV93aGlsZV90b3BAMTY6CiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czo1NjAKICAgIC8vIGZvciAobGV0IGk6IHVpbnQ2NCA9IDE7IGkgPD0gaXRlcmF0aW9uczsgaSsrKSB7CiAgICBmcmFtZV9kaWcgMzcKICAgIGZyYW1lX2RpZyAzNgogICAgPD0KICAgIGJ6IHZlcmlmeV9hZnRlcl93aGlsZUAyMwogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6NTY0CiAgICAvLyBmck11bCh3LCBjaGFsbGVuZ2VzLnpoLm5hdGl2ZSksCiAgICBmcmFtZV9kaWcgMTYKICAgIGR1cAogICAgaW50YyA0IC8vIDM4NAogICAgaW50Y18xIC8vIDMyCiAgICBleHRyYWN0MwogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6NjQKICAgIC8vIHJldHVybiAoYSAqIGIpICUgQkxTMTJfMzgxX1NDQUxBUl9NT0RVTFVTOwogICAgZnJhbWVfZGlnIDMxCiAgICBkdXAKICAgIHVuY292ZXIgMgogICAgYioKICAgIGJ5dGVjXzAgLy8gMHg3M2VkYTc1MzI5OWQ3ZDQ4MzMzOWQ4MDgwOWExZDgwNTUzYmRhNDAyZmZmZTViZmVmZmZmZmZmZjAwMDAwMDAxCiAgICBiJQogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6NTY1CiAgICAvLyBmck11bChuLCBmclN1YihjaGFsbGVuZ2VzLnhpLm5hdGl2ZSwgdykpLAogICAgdW5jb3ZlciAyCiAgICBleHRyYWN0IDk2IDMyCiAgICB1bmNvdmVyIDIKICAgIGNhbGxzdWIgZnJTdWIKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjY0CiAgICAvLyByZXR1cm4gKGEgKiBiKSAlIEJMUzEyXzM4MV9TQ0FMQVJfTU9EVUxVUzsKICAgIGZyYW1lX2RpZyAyMQogICAgYioKICAgIGJ5dGVjXzAgLy8gMHg3M2VkYTc1MzI5OWQ3ZDQ4MzMzOWQ4MDgwOWExZDgwNTUzYmRhNDAyZmZmZTViZmVmZmZmZmZmZjAwMDAwMDAxCiAgICBiJQogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6MTU4CiAgICAvLyByZXR1cm4gYSAlIEJMUzEyXzM4MV9TQ0FMQVJfTU9EVUxVUzsKICAgIHN3YXAKICAgIGJ5dGVjXzAgLy8gMHg3M2VkYTc1MzI5OWQ3ZDQ4MzMzOWQ4MDgwOWExZDgwNTUzYmRhNDAyZmZmZTViZmVmZmZmZmZmZjAwMDAwMDAxCiAgICBiJQogICAgZnJhbWVfYnVyeSAxCiAgICBieXRlY18wIC8vIDB4NzNlZGE3NTMyOTlkN2Q0ODMzMzlkODA4MDlhMWQ4MDU1M2JkYTQwMmZmZmU1YmZlZmZmZmZmZmYwMDAwMDAwMQogICAgYiUKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjExMQogICAgLy8gYXNzZXJ0KHggIT09ICgwbiBhcyBiaWd1aW50KSwgIkZyIGludmVyc2Ugb2YgemVybyIpOwogICAgZHVwCiAgICBieXRlY18xIC8vIDB4CiAgICBiIT0KICAgIGFzc2VydCAvLyBGciBpbnZlcnNlIG9mIHplcm8KICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjExMgogICAgLy8gY29uc3QgaW52ID0gbW9kUG93KHgsIEJMUzEyXzM4MV9SX01JTlVTXzIsIHIpOwogICAgcHVzaGJ5dGVzIDB4NzNlZGE3NTMyOTlkN2Q0ODMzMzlkODA4MDlhMWQ4MDU1M2JkYTQwMmZmZmU1YmZlZmZmZmZmZmVmZmZmZmZmZgogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6OTAKICAgIC8vIGxldCByZXN1bHQgPSAxbiBhcyBiaWd1aW50OwogICAgYnl0ZWNfMiAvLyAweDAxCiAgICBmcmFtZV9idXJ5IDI1CiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czo5MQogICAgLy8gbGV0IGI6IGJpZ3VpbnQgPSBiYXNlICUgbW9kOwogICAgc3dhcAogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6MTEyCiAgICAvLyBjb25zdCBpbnYgPSBtb2RQb3coeCwgQkxTMTJfMzgxX1JfTUlOVVNfMiwgcik7CiAgICBieXRlY18wIC8vIDB4NzNlZGE3NTMyOTlkN2Q0ODMzMzlkODA4MDlhMWQ4MDU1M2JkYTQwMmZmZmU1YmZlZmZmZmZmZmYwMDAwMDAwMQogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6OTEKICAgIC8vIGxldCBiOiBiaWd1aW50ID0gYmFzZSAlIG1vZDsKICAgIGIlCiAgICBmcmFtZV9idXJ5IDEyCiAgICBmcmFtZV9idXJ5IDE3Cgp2ZXJpZnlfd2hpbGVfdG9wQDE4OgogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6OTMKICAgIC8vIHdoaWxlIChlID4gKDBuIGFzIGJpZ3VpbnQpKSB7CiAgICBmcmFtZV9kaWcgMTcKICAgIGJ5dGVjXzEgLy8gMHgKICAgIGI+CiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czo5My05OQogICAgLy8gd2hpbGUgKGUgPiAoMG4gYXMgYmlndWludCkpIHsKICAgIC8vICAgaWYgKChlICYgKDFuIGFzIGJpZ3VpbnQpKSAhPT0gKDBuIGFzIGJpZ3VpbnQpKSB7CiAgICAvLyAgICAgcmVzdWx0ID0gKHJlc3VsdCAqIGIpICUgbW9kOwogICAgLy8gICB9CiAgICAvLyAgIGIgPSAoYiAqIGIpICUgbW9kOwogICAgLy8gICBlID0gZSAvIEJpZ1VpbnQoMik7CiAgICAvLyB9CiAgICBieiB2ZXJpZnlfYWZ0ZXJfd2hpbGVAMjIKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjk0CiAgICAvLyBpZiAoKGUgJiAoMW4gYXMgYmlndWludCkpICE9PSAoMG4gYXMgYmlndWludCkpIHsKICAgIGZyYW1lX2RpZyAxNwogICAgYnl0ZWNfMiAvLyAweDAxCiAgICBiJgogICAgYnl0ZWNfMSAvLyAweAogICAgYiE9CiAgICBmcmFtZV9kaWcgMjUKICAgIGZyYW1lX2J1cnkgMjYKICAgIGJ6IHZlcmlmeV9hZnRlcl9pZl9lbHNlQDIxCiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czo5NQogICAgLy8gcmVzdWx0ID0gKHJlc3VsdCAqIGIpICUgbW9kOwogICAgZnJhbWVfZGlnIDI1CiAgICBmcmFtZV9kaWcgMTIKICAgIGIqCiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czoxMTIKICAgIC8vIGNvbnN0IGludiA9IG1vZFBvdyh4LCBCTFMxMl8zODFfUl9NSU5VU18yLCByKTsKICAgIGJ5dGVjXzAgLy8gMHg3M2VkYTc1MzI5OWQ3ZDQ4MzMzOWQ4MDgwOWExZDgwNTUzYmRhNDAyZmZmZTViZmVmZmZmZmZmZjAwMDAwMDAxCiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czo5NQogICAgLy8gcmVzdWx0ID0gKHJlc3VsdCAqIGIpICUgbW9kOwogICAgYiUKICAgIGZyYW1lX2J1cnkgMjYKCnZlcmlmeV9hZnRlcl9pZl9lbHNlQDIxOgogICAgZnJhbWVfZGlnIDI2CiAgICBmcmFtZV9idXJ5IDI1CiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czo5NwogICAgLy8gYiA9IChiICogYikgJSBtb2Q7CiAgICBmcmFtZV9kaWcgMTIKICAgIGR1cAogICAgYioKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjExMgogICAgLy8gY29uc3QgaW52ID0gbW9kUG93KHgsIEJMUzEyXzM4MV9SX01JTlVTXzIsIHIpOwogICAgYnl0ZWNfMCAvLyAweDczZWRhNzUzMjk5ZDdkNDgzMzM5ZDgwODA5YTFkODA1NTNiZGE0MDJmZmZlNWJmZWZmZmZmZmZmMDAwMDAwMDEKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjk3CiAgICAvLyBiID0gKGIgKiBiKSAlIG1vZDsKICAgIGIlCiAgICBmcmFtZV9idXJ5IDEyCiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czo5OAogICAgLy8gZSA9IGUgLyBCaWdVaW50KDIpOwogICAgZnJhbWVfZGlnIDE3CiAgICBwdXNoYnl0ZXMgMHgwMgogICAgYi8KICAgIGZyYW1lX2J1cnkgMTcKICAgIGIgdmVyaWZ5X3doaWxlX3RvcEAxOAoKdmVyaWZ5X2FmdGVyX3doaWxlQDIyOgogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6MTI1CiAgICAvLyByZXR1cm4gKGFOICogYkludikgJSByOwogICAgZnJhbWVfZGlnIDEKICAgIGZyYW1lX2RpZyAyNQogICAgYioKICAgIGJ5dGVjXzAgLy8gMHg3M2VkYTc1MzI5OWQ3ZDQ4MzMzOWQ4MDgwOWExZDgwNTUzYmRhNDAyZmZmZTViZmVmZmZmZmZmZjAwMDAwMDAxCiAgICBiJQogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6NTYyLTU2NwogICAgLy8gbmV3IFVpbnQyNTYoCiAgICAvLyAgIGZyRGl2KAogICAgLy8gICAgIGZyTXVsKHcsIGNoYWxsZW5nZXMuemgubmF0aXZlKSwKICAgIC8vICAgICBmck11bChuLCBmclN1YihjaGFsbGVuZ2VzLnhpLm5hdGl2ZSwgdykpLAogICAgLy8gICApLAogICAgLy8gKSwKICAgIGR1cAogICAgbGVuCiAgICBpbnRjXzEgLy8gMzIKICAgIDw9CiAgICBhc3NlcnQgLy8gb3ZlcmZsb3cKICAgIGZyYW1lX2RpZyAzCiAgICBifAogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6NTYxLTU2OAogICAgLy8gTC5wdXNoKAogICAgLy8gICBuZXcgVWludDI1NigKICAgIC8vICAgICBmckRpdigKICAgIC8vICAgICAgIGZyTXVsKHcsIGNoYWxsZW5nZXMuemgubmF0aXZlKSwKICAgIC8vICAgICAgIGZyTXVsKG4sIGZyU3ViKGNoYWxsZW5nZXMueGkubmF0aXZlLCB3KSksCiAgICAvLyAgICAgKSwKICAgIC8vICAgKSwKICAgIC8vICk7CiAgICBmcmFtZV9kaWcgMAogICAgZHVwCiAgICB1bmNvdmVyIDIKICAgIGNvbmNhdCAvLyBvbiBlcnJvcjogbWF4IGFycmF5IGxlbmd0aCBleGNlZWRlZAogICAgc3dhcAogICAgaW50Y18zIC8vIDAKICAgIGV4dHJhY3RfdWludDE2CiAgICBpbnRjXzIgLy8gMQogICAgKwogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIHJlcGxhY2UyIDAKICAgIGZyYW1lX2J1cnkgMAogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6NjQKICAgIC8vIHJldHVybiAoYSAqIGIpICUgQkxTMTJfMzgxX1NDQUxBUl9NT0RVTFVTOwogICAgZnJhbWVfZGlnIDMxCiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czo1NjkKICAgIC8vIHcgPSBmck11bCh3LCBST09UX09GX1VOSVRZKTsgLy8gTmV4dCByb290IG9mIHVuaXR5IHN0ZXAgKM+JXmkpCiAgICBieXRlYyA0IC8vIFRNUExfUk9PVF9PRl9VTklUWQogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6NjQKICAgIC8vIHJldHVybiAoYSAqIGIpICUgQkxTMTJfMzgxX1NDQUxBUl9NT0RVTFVTOwogICAgYioKICAgIGJ5dGVjXzAgLy8gMHg3M2VkYTc1MzI5OWQ3ZDQ4MzMzOWQ4MDgwOWExZDgwNTUzYmRhNDAyZmZmZTViZmVmZmZmZmZmZjAwMDAwMDAxCiAgICBiJQogICAgZnJhbWVfYnVyeSAzMQogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6NTYwCiAgICAvLyBmb3IgKGxldCBpOiB1aW50NjQgPSAxOyBpIDw9IGl0ZXJhdGlvbnM7IGkrKykgewogICAgZnJhbWVfZGlnIDM3CiAgICBpbnRjXzIgLy8gMQogICAgKwogICAgZnJhbWVfYnVyeSAzNwogICAgYiB2ZXJpZnlfd2hpbGVfdG9wQDE2Cgp2ZXJpZnlfYWZ0ZXJfd2hpbGVAMjM6CiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czo1NzEKICAgIC8vIHJldHVybiB7IEwsIGNoYWxsZW5nZXMgfTsKICAgIHB1c2hieXRlcyAweDAxYTIKICAgIGZyYW1lX2RpZyAxNgogICAgY29uY2F0CiAgICBmcmFtZV9kaWcgMAogICAgY29uY2F0CiAgICBkdXAKICAgIGZyYW1lX2J1cnkgNAogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6MzkyLTM5NgogICAgLy8gY29uc3QgeyBMLCBjaGFsbGVuZ2VzOiB1cGRhdGVkQ2hhbGxlbmdlcyB9ID0gY2FsY3VsYXRlTGFncmFuZ2VFdmFsdWF0aW9ucygKICAgIC8vICAgY2hhbGxlbmdlcywKICAgIC8vICAgdmssCiAgICAvLyApOwogICAgLy8gZGVidWdMb2coIkwxKHhpKSIsIChMWzFdIGFzIFVpbnQyNTYpLmJ5dGVzKTsKICAgIGR1cAogICAgaW50Y18zIC8vIDAKICAgIGV4dHJhY3RfdWludDE2CiAgICBkaWcgMQogICAgbGVuCiAgICBzdWJzdHJpbmczCiAgICBkdXAKICAgIGV4dHJhY3QgMiAwCiAgICBmcmFtZV9idXJ5IDIKICAgIGV4dHJhY3QgMzQgMzIKICAgIGR1cAogICAgZnJhbWVfYnVyeSAzMAogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6Mzk2CiAgICAvLyBkZWJ1Z0xvZygiTDEoeGkpIiwgKExbMV0gYXMgVWludDI1NikuYnl0ZXMpOwogICAgcHVzaGJ5dGVzICJMMSh4aSkiCiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czoyMTMKICAgIC8vIGxvZyhuYW1lKTsKICAgIGxvZwogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6MjE0CiAgICAvLyBsb2codmFsdWUpOwogICAgbG9nCiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czo1ODEKICAgIC8vIGxldCBwaSA9IEJpZ1VpbnQoMCk7CiAgICBieXRlY18xIC8vIDB4CiAgICBmcmFtZV9idXJ5IDI0CiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czo1ODIKICAgIC8vIGZvciAobGV0IGk6IHVpbnQ2NCA9IDA7IGkgPCBwdWJsaWNTaWduYWxzLmxlbmd0aDsgaSsrKSB7CiAgICBpbnRjXzMgLy8gMAogICAgZnJhbWVfYnVyeSAzNQoKdmVyaWZ5X3doaWxlX3RvcEAyNjoKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjU4MgogICAgLy8gZm9yIChsZXQgaTogdWludDY0ID0gMDsgaSA8IHB1YmxpY1NpZ25hbHMubGVuZ3RoOyBpKyspIHsKICAgIGZyYW1lX2RpZyAzNQogICAgZnJhbWVfZGlnIDQ2CiAgICA8CiAgICBieiB2ZXJpZnlfYWZ0ZXJfd2hpbGVAMjgKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjU4MwogICAgLy8gY29uc3QgdyA9IGZyU2NhbGFyKChwdWJsaWNTaWduYWxzW2ldIGFzIFVpbnQyNTYpLm5hdGl2ZSk7CiAgICBmcmFtZV9kaWcgLTIKICAgIGV4dHJhY3QgMiAwCiAgICBmcmFtZV9kaWcgMzUKICAgIGR1cAogICAgY292ZXIgMgogICAgaW50Y18xIC8vIDMyCiAgICAqCiAgICBpbnRjXzEgLy8gMzIKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6MTU4CiAgICAvLyByZXR1cm4gYSAlIEJMUzEyXzM4MV9TQ0FMQVJfTU9EVUxVUzsKICAgIGJ5dGVjXzAgLy8gMHg3M2VkYTc1MzI5OWQ3ZDQ4MzMzOWQ4MDgwOWExZDgwNTUzYmRhNDAyZmZmZTViZmVmZmZmZmZmZjAwMDAwMDAxCiAgICBiJQogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6NTg0CiAgICAvLyBwaSA9IGZyU3ViKHBpLCBmck11bCh3LCAoTFtpICsgMV0gYXMgVWludDI1NikubmF0aXZlKSk7CiAgICBzd2FwCiAgICBpbnRjXzIgLy8gMQogICAgKwogICAgZHVwCiAgICBmcmFtZV9idXJ5IDM1CiAgICBpbnRjXzEgLy8gMzIKICAgICoKICAgIGZyYW1lX2RpZyAyCiAgICBzd2FwCiAgICBpbnRjXzEgLy8gMzIKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6NjQKICAgIC8vIHJldHVybiAoYSAqIGIpICUgQkxTMTJfMzgxX1NDQUxBUl9NT0RVTFVTOwogICAgYioKICAgIGJ5dGVjXzAgLy8gMHg3M2VkYTc1MzI5OWQ3ZDQ4MzMzOWQ4MDgwOWExZDgwNTUzYmRhNDAyZmZmZTViZmVmZmZmZmZmZjAwMDAwMDAxCiAgICBiJQogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6NTg0CiAgICAvLyBwaSA9IGZyU3ViKHBpLCBmck11bCh3LCAoTFtpICsgMV0gYXMgVWludDI1NikubmF0aXZlKSk7CiAgICBmcmFtZV9kaWcgMjQKICAgIHN3YXAKICAgIGNhbGxzdWIgZnJTdWIKICAgIGZyYW1lX2J1cnkgMjQKICAgIGIgdmVyaWZ5X3doaWxlX3RvcEAyNgoKdmVyaWZ5X2FmdGVyX3doaWxlQDI4OgogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6NTg2CiAgICAvLyByZXR1cm4gbmV3IFVpbnQyNTYocGkpOwogICAgZnJhbWVfZGlnIDI0CiAgICBkdXAKICAgIGxlbgogICAgaW50Y18xIC8vIDMyCiAgICA8PQogICAgYXNzZXJ0IC8vIG92ZXJmbG93CiAgICBmcmFtZV9kaWcgMwogICAgZHVwCiAgICBjb3ZlciAyCiAgICBifAogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6NDAxCiAgICAvLyBkZWJ1Z0xvZygiUEkoeGkpIiwgcGkuYnl0ZXMpOwogICAgcHVzaGJ5dGVzICJQSSh4aSkiCiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czoyMTMKICAgIC8vIGxvZyhuYW1lKTsKICAgIGxvZwogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6MjE0CiAgICAvLyBsb2codmFsdWUpOwogICAgZHVwCiAgICBsb2cKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjYwNwogICAgLy8gZnJNdWwoY2hhbGxlbmdlcy5hbHBoYS5uYXRpdmUsIGNoYWxsZW5nZXMuYWxwaGEubmF0aXZlKSwKICAgIGZyYW1lX2RpZyA0CiAgICBwdXNoaW50cyAyIDQxNiAvLyAyLCA0MTYKICAgIGV4dHJhY3QzCiAgICBkdXAKICAgIGV4dHJhY3QgNjQgMzIKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjY0CiAgICAvLyByZXR1cm4gKGEgKiBiKSAlIEJMUzEyXzM4MV9TQ0FMQVJfTU9EVUxVUzsKICAgIGR1cAogICAgZGlnIDEKICAgIGIqCiAgICBieXRlY18wIC8vIDB4NzNlZGE3NTMyOTlkN2Q0ODMzMzlkODA4MDlhMWQ4MDU1M2JkYTQwMmZmZmU1YmZlZmZmZmZmZmYwMDAwMDAwMQogICAgYiUKICAgIGZyYW1lX2RpZyAzMAogICAgYioKICAgIGJ5dGVjXzAgLy8gMHg3M2VkYTc1MzI5OWQ3ZDQ4MzMzOWQ4MDgwOWExZDgwNTUzYmRhNDAyZmZmZTViZmVmZmZmZmZmZjAwMDAwMDAxCiAgICBiJQogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6NjE0CiAgICAvLyBmck11bChjaGFsbGVuZ2VzLmJldGEubmF0aXZlLCBwcm9vZi5ldmFsX3MxLm5hdGl2ZSksCiAgICBkaWcgMgogICAgZXh0cmFjdCAwIDMyCiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czo2NAogICAgLy8gcmV0dXJuIChhICogYikgJSBCTFMxMl8zODFfU0NBTEFSX01PRFVMVVM7CiAgICBkdXAKICAgIGZyYW1lX2RpZyAxNQogICAgZHVwCiAgICBjb3ZlciA4CiAgICBiKgogICAgYnl0ZWNfMCAvLyAweDczZWRhNzUzMjk5ZDdkNDgzMzM5ZDgwODA5YTFkODA1NTNiZGE0MDJmZmZlNWJmZWZmZmZmZmZmMDAwMDAwMDEKICAgIGIlCiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czoxNDcKICAgIC8vIGNvbnN0IGFOOiBiaWd1aW50ID0gYSAlIHI7CiAgICBmcmFtZV9kaWcgMTgKICAgIGR1cAogICAgY292ZXIgNwogICAgYnl0ZWNfMCAvLyAweDczZWRhNzUzMjk5ZDdkNDgzMzM5ZDgwODA5YTFkODA1NTNiZGE0MDJmZmZlNWJmZWZmZmZmZmZmMDAwMDAwMDEKICAgIGIlCiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czoxNDgKICAgIC8vIGNvbnN0IGJOOiBiaWd1aW50ID0gYiAlIHI7CiAgICBzd2FwCiAgICBieXRlY18wIC8vIDB4NzNlZGE3NTMyOTlkN2Q0ODMzMzlkODA4MDlhMWQ4MDU1M2JkYTQwMmZmZmU1YmZlZmZmZmZmZmYwMDAwMDAwMQogICAgYiUKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjE0OQogICAgLy8gcmV0dXJuIChhTiArIGJOKSAlIHI7CiAgICBkaWcgMQogICAgYisKICAgIGJ5dGVjXzAgLy8gMHg3M2VkYTc1MzI5OWQ3ZDQ4MzMzOWQ4MDgwOWExZDgwNTUzYmRhNDAyZmZmZTViZmVmZmZmZmZmZjAwMDAwMDAxCiAgICBiJQogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6NjE2CiAgICAvLyBlM2EgPSBmckFkZChlM2EsIGNoYWxsZW5nZXMuZ2FtbWEubmF0aXZlKTsKICAgIGRpZyA1CiAgICBleHRyYWN0IDMyIDMyCiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czoxNDcKICAgIC8vIGNvbnN0IGFOOiBiaWd1aW50ID0gYSAlIHI7CiAgICBzd2FwCiAgICBieXRlY18wIC8vIDB4NzNlZGE3NTMyOTlkN2Q0ODMzMzlkODA4MDlhMWQ4MDU1M2JkYTQwMmZmZmU1YmZlZmZmZmZmZmYwMDAwMDAwMQogICAgYiUKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjE0OAogICAgLy8gY29uc3QgYk46IGJpZ3VpbnQgPSBiICUgcjsKICAgIHN3YXAKICAgIGJ5dGVjXzAgLy8gMHg3M2VkYTc1MzI5OWQ3ZDQ4MzMzOWQ4MDgwOWExZDgwNTUzYmRhNDAyZmZmZTViZmVmZmZmZmZmZjAwMDAwMDAxCiAgICBiJQogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6MTQ5CiAgICAvLyByZXR1cm4gKGFOICsgYk4pICUgcjsKICAgIHN3YXAKICAgIGRpZyAxCiAgICBiKwogICAgYnl0ZWNfMCAvLyAweDczZWRhNzUzMjk5ZDdkNDgzMzM5ZDgwODA5YTFkODA1NTNiZGE0MDJmZmZlNWJmZWZmZmZmZmZmMDAwMDAwMDEKICAgIGIlCiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czo2NAogICAgLy8gcmV0dXJuIChhICogYikgJSBCTFMxMl8zODFfU0NBTEFSX01PRFVMVVM7CiAgICBkaWcgMwogICAgZnJhbWVfZGlnIDEzCiAgICBkdXAKICAgIGNvdmVyIDEyCiAgICBiKgogICAgYnl0ZWNfMCAvLyAweDczZWRhNzUzMjk5ZDdkNDgzMzM5ZDgwODA5YTFkODA1NTNiZGE0MDJmZmZlNWJmZWZmZmZmZmZmMDAwMDAwMDEKICAgIGIlCiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czoxNDcKICAgIC8vIGNvbnN0IGFOOiBiaWd1aW50ID0gYSAlIHI7CiAgICBmcmFtZV9kaWcgMTkKICAgIGR1cAogICAgY292ZXIgNAogICAgYnl0ZWNfMCAvLyAweDczZWRhNzUzMjk5ZDdkNDgzMzM5ZDgwODA5YTFkODA1NTNiZGE0MDJmZmZlNWJmZWZmZmZmZmZmMDAwMDAwMDEKICAgIGIlCiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czoxNDgKICAgIC8vIGNvbnN0IGJOOiBiaWd1aW50ID0gYiAlIHI7CiAgICBzd2FwCiAgICBieXRlY18wIC8vIDB4NzNlZGE3NTMyOTlkN2Q0ODMzMzlkODA4MDlhMWQ4MDU1M2JkYTQwMmZmZmU1YmZlZmZmZmZmZmYwMDAwMDAwMQogICAgYiUKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjE0OQogICAgLy8gcmV0dXJuIChhTiArIGJOKSAlIHI7CiAgICBkaWcgMQogICAgYisKICAgIGJ5dGVjXzAgLy8gMHg3M2VkYTc1MzI5OWQ3ZDQ4MzMzOWQ4MDgwOWExZDgwNTUzYmRhNDAyZmZmZTViZmVmZmZmZmZmZjAwMDAwMDAxCiAgICBiJQogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6MTQ3CiAgICAvLyBjb25zdCBhTjogYmlndWludCA9IGEgJSByOwogICAgYnl0ZWNfMCAvLyAweDczZWRhNzUzMjk5ZDdkNDgzMzM5ZDgwODA5YTFkODA1NTNiZGE0MDJmZmZlNWJmZWZmZmZmZmZmMDAwMDAwMDEKICAgIGIlCiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czoxNDkKICAgIC8vIHJldHVybiAoYU4gKyBiTikgJSByOwogICAgZGlnIDMKICAgIGIrCiAgICBieXRlY18wIC8vIDB4NzNlZGE3NTMyOTlkN2Q0ODMzMzlkODA4MDlhMWQ4MDU1M2JkYTQwMmZmZmU1YmZlZmZmZmZmZmYwMDAwMDAwMQogICAgYiUKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjE0NwogICAgLy8gY29uc3QgYU46IGJpZ3VpbnQgPSBhICUgcjsKICAgIGZyYW1lX2RpZyAyMAogICAgZHVwCiAgICBjb3ZlciAxMAogICAgYnl0ZWNfMCAvLyAweDczZWRhNzUzMjk5ZDdkNDgzMzM5ZDgwODA5YTFkODA1NTNiZGE0MDJmZmZlNWJmZWZmZmZmZmZmMDAwMDAwMDEKICAgIGIlCiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czoxNDkKICAgIC8vIHJldHVybiAoYU4gKyBiTikgJSByOwogICAgZHVwCiAgICBkaWcgNQogICAgYisKICAgIGJ5dGVjXzAgLy8gMHg3M2VkYTc1MzI5OWQ3ZDQ4MzMzOWQ4MDgwOWExZDgwNTUzYmRhNDAyZmZmZTViZmVmZmZmZmZmZjAwMDAwMDAxCiAgICBiJQogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6NjQKICAgIC8vIHJldHVybiAoYSAqIGIpICUgQkxTMTJfMzgxX1NDQUxBUl9NT0RVTFVTOwogICAgdW5jb3ZlciA0CiAgICB1bmNvdmVyIDMKICAgIGIqCiAgICBieXRlY18wIC8vIDB4NzNlZGE3NTMyOTlkN2Q0ODMzMzlkODA4MDlhMWQ4MDU1M2JkYTQwMmZmZmU1YmZlZmZmZmZmZmYwMDAwMDAwMQogICAgYiUKICAgIGR1cAogICAgdW5jb3ZlciAyCiAgICBiKgogICAgYnl0ZWNfMCAvLyAweDczZWRhNzUzMjk5ZDdkNDgzMzM5ZDgwODA5YTFkODA1NTNiZGE0MDJmZmZlNWJmZWZmZmZmZmZmMDAwMDAwMDEKICAgIGIlCiAgICBmcmFtZV9kaWcgMTQKICAgIGR1cAogICAgY292ZXIgMTUKICAgIGIqCiAgICBieXRlY18wIC8vIDB4NzNlZGE3NTMyOTlkN2Q0ODMzMzlkODA4MDlhMWQ4MDU1M2JkYTQwMmZmZmU1YmZlZmZmZmZmZmYwMDAwMDAwMQogICAgYiUKICAgIGRpZyA5CiAgICBiKgogICAgYnl0ZWNfMCAvLyAweDczZWRhNzUzMjk5ZDdkNDgzMzM5ZDgwODA5YTFkODA1NTNiZGE0MDJmZmZlNWJmZWZmZmZmZmZmMDAwMDAwMDEKICAgIGIlCiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czo2MzEKICAgIC8vIGNvbnN0IHIwID0gZnJTdWIoZnJTdWIoZTEsIGUyKSwgZTMpOwogICAgdW5jb3ZlciAxMgogICAgZGlnIDkKICAgIGNhbGxzdWIgZnJTdWIKICAgIHN3YXAKICAgIGNhbGxzdWIgZnJTdWIKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjYzMgogICAgLy8gcmV0dXJuIG5ldyBVaW50MjU2KHIwKTsKICAgIGR1cAogICAgbGVuCiAgICBpbnRjXzEgLy8gMzIKICAgIDw9CiAgICBhc3NlcnQgLy8gb3ZlcmZsb3cKICAgIHVuY292ZXIgMTQKICAgIGJ8CiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czo0MDUKICAgIC8vIGRlYnVnTG9nKCJyMCIsIHIwLmJ5dGVzKTsKICAgIHB1c2hieXRlcyAicjAiCiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czoyMTMKICAgIC8vIGxvZyhuYW1lKTsKICAgIGxvZwogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6MjE0CiAgICAvLyBsb2codmFsdWUpOwogICAgZHVwCiAgICBsb2cKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjY1OAogICAgLy8gZFBvaW50cyA9IG9wLmNvbmNhdChkUG9pbnRzLCBwcm9vZi5UMSk7CiAgICBmcmFtZV9kaWcgNDAKICAgIGZyYW1lX2RpZyA2CiAgICBjb25jYXQKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjY1OQogICAgLy8gZFBvaW50cyA9IG9wLmNvbmNhdChkUG9pbnRzLCBwcm9vZi5UMik7CiAgICBmcmFtZV9kaWcgNwogICAgY29uY2F0CiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czo2NjAKICAgIC8vIGRQb2ludHMgPSBvcC5jb25jYXQoZFBvaW50cywgcHJvb2YuVDMpOwogICAgZnJhbWVfZGlnIDgKICAgIGNvbmNhdAogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6NjQKICAgIC8vIHJldHVybiAoYSAqIGIpICUgQkxTMTJfMzgxX1NDQUxBUl9NT0RVTFVTOwogICAgZGlnIDEzCiAgICBkaWcgNwogICAgYioKICAgIGJ5dGVjXzAgLy8gMHg3M2VkYTc1MzI5OWQ3ZDQ4MzMzOWQ4MDgwOWExZDgwNTUzYmRhNDAyZmZmZTViZmVmZmZmZmZmZjAwMDAwMDAxCiAgICBiJQogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6NjcxCiAgICAvLyBmck11bChCaWdVaW50KDEpLCBjaGFsbGVuZ2VzLnpoLm5hdGl2ZSksCiAgICBkaWcgMTMKICAgIGludGMgNCAvLyAzODQKICAgIGludGNfMSAvLyAzMgogICAgZXh0cmFjdDMKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjY0CiAgICAvLyByZXR1cm4gKGEgKiBiKSAlIEJMUzEyXzM4MV9TQ0FMQVJfTU9EVUxVUzsKICAgIGR1cAogICAgYnl0ZWNfMCAvLyAweDczZWRhNzUzMjk5ZDdkNDgzMzM5ZDgwODA5YTFkODA1NTNiZGE0MDJmZmZlNWJmZWZmZmZmZmZmMDAwMDAwMDEKICAgIGIlCiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czo2NzAKICAgIC8vIEJpZ1VpbnQoMCksCiAgICBieXRlY18xIC8vIDB4CiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czo2NjktNjcyCiAgICAvLyBjb25zdCBxdW90aWVudFNjYWxhcjEgPSBmclN1YigKICAgIC8vICAgQmlnVWludCgwKSwKICAgIC8vICAgZnJNdWwoQmlnVWludCgxKSwgY2hhbGxlbmdlcy56aC5uYXRpdmUpLAogICAgLy8gKTsgLy8gLVQxKnpoCiAgICBzd2FwCiAgICBjYWxsc3ViIGZyU3ViCiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czo2NzUKICAgIC8vIGZyTXVsKGNoYWxsZW5nZXMueGluLm5hdGl2ZSwgY2hhbGxlbmdlcy56aC5uYXRpdmUpLAogICAgZGlnIDE1CiAgICBpbnRjIDE2IC8vIDM1MgogICAgaW50Y18xIC8vIDMyCiAgICBleHRyYWN0MwogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6NjQKICAgIC8vIHJldHVybiAoYSAqIGIpICUgQkxTMTJfMzgxX1NDQUxBUl9NT0RVTFVTOwogICAgZHVwCiAgICBkaWcgMwogICAgYioKICAgIGJ5dGVjXzAgLy8gMHg3M2VkYTc1MzI5OWQ3ZDQ4MzMzOWQ4MDgwOWExZDgwNTUzYmRhNDAyZmZmZTViZmVmZmZmZmZmZjAwMDAwMDAxCiAgICBiJQogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6Njc0CiAgICAvLyBCaWdVaW50KDApLAogICAgYnl0ZWNfMSAvLyAweAogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6NjczLTY3NgogICAgLy8gY29uc3QgcXVvdGllbnRTY2FsYXIyID0gZnJTdWIoCiAgICAvLyAgIEJpZ1VpbnQoMCksCiAgICAvLyAgIGZyTXVsKGNoYWxsZW5nZXMueGluLm5hdGl2ZSwgY2hhbGxlbmdlcy56aC5uYXRpdmUpLAogICAgLy8gKTsgLy8gLVQyKnhpbip6aAogICAgc3dhcAogICAgY2FsbHN1YiBmclN1YgogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6NjQKICAgIC8vIHJldHVybiAoYSAqIGIpICUgQkxTMTJfMzgxX1NDQUxBUl9NT0RVTFVTOwogICAgZGlnIDEKICAgIHVuY292ZXIgMgogICAgYioKICAgIGJ5dGVjXzAgLy8gMHg3M2VkYTc1MzI5OWQ3ZDQ4MzMzOWQ4MDgwOWExZDgwNTUzYmRhNDAyZmZmZTViZmVmZmZmZmZmZjAwMDAwMDAxCiAgICBiJQogICAgdW5jb3ZlciAzCiAgICBiKgogICAgYnl0ZWNfMCAvLyAweDczZWRhNzUzMjk5ZDdkNDgzMzM5ZDgwODA5YTFkODA1NTNiZGE0MDJmZmZlNWJmZWZmZmZmZmZmMDAwMDAwMDEKICAgIGIlCiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czo2NzgKICAgIC8vIEJpZ1VpbnQoMCksCiAgICBieXRlY18xIC8vIDB4CiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czo2NzctNjgzCiAgICAvLyBjb25zdCBxdW90aWVudFNjYWxhcjMgPSBmclN1YigKICAgIC8vICAgQmlnVWludCgwKSwKICAgIC8vICAgZnJNdWwoCiAgICAvLyAgICAgZnJNdWwoY2hhbGxlbmdlcy54aW4ubmF0aXZlLCBjaGFsbGVuZ2VzLnhpbi5uYXRpdmUpLAogICAgLy8gICAgIGNoYWxsZW5nZXMuemgubmF0aXZlLAogICAgLy8gICApLAogICAgLy8gKTsgLy8gLVQzKnhpbsKyKnpoCiAgICBzd2FwCiAgICBjYWxsc3ViIGZyU3ViCiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czo2ODYKICAgIC8vIGxldCBkU2NhbGFycyA9IG9wLmNvbmNhdChiMzIoZ2F0ZVNjYWxhcjEpLCBiMzIoZ2F0ZVNjYWxhcjIpKTsKICAgIHVuY292ZXIgMwogICAgY2FsbHN1YiBiMzIKICAgIGRpZyAxNwogICAgY2FsbHN1YiBiMzIKICAgIGNvbmNhdAogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6Njg3CiAgICAvLyBkU2NhbGFycyA9IG9wLmNvbmNhdChkU2NhbGFycywgYjMyKGdhdGVTY2FsYXIzKSk7CiAgICBkaWcgMTAKICAgIGNhbGxzdWIgYjMyCiAgICBjb25jYXQKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjY4OAogICAgLy8gZFNjYWxhcnMgPSBvcC5jb25jYXQoZFNjYWxhcnMsIGIzMihnYXRlU2NhbGFyNCkpOwogICAgZGlnIDE1CiAgICBjYWxsc3ViIGIzMgogICAgY29uY2F0CiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czo2ODkKICAgIC8vIGRTY2FsYXJzID0gb3AuY29uY2F0KGRTY2FsYXJzLCBiMzIocXVvdGllbnRTY2FsYXIxKSk7CiAgICB1bmNvdmVyIDMKICAgIGNhbGxzdWIgYjMyCiAgICBjb25jYXQKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjY5MAogICAgLy8gZFNjYWxhcnMgPSBvcC5jb25jYXQoZFNjYWxhcnMsIGIzMihxdW90aWVudFNjYWxhcjIpKTsKICAgIHVuY292ZXIgMgogICAgY2FsbHN1YiBiMzIKICAgIGNvbmNhdAogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6NjkxCiAgICAvLyBkU2NhbGFycyA9IG9wLmNvbmNhdChkU2NhbGFycywgYjMyKHF1b3RpZW50U2NhbGFyMykpOwogICAgc3dhcAogICAgY2FsbHN1YiBiMzIKICAgIGNvbmNhdAogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6Njk0LTY5OAogICAgLy8gY29uc3QgZEJhdGNoZWQgPSBvcC5FbGxpcHRpY0N1cnZlLnNjYWxhck11bE11bHRpKAogICAgLy8gICBvcC5FYy5CTFMxMl8zODFnMSwKICAgIC8vICAgZFBvaW50cywKICAgIC8vICAgZFNjYWxhcnMsCiAgICAvLyApOwogICAgZWNfbXVsdGlfc2NhbGFyX211bCBCTFMxMl8zODFnMQogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6Njk5CiAgICAvLyBsZXQgRCA9IGcxQWRkKGRCYXRjaGVkLnRvRml4ZWQoeyBsZW5ndGg6IDk2IH0pLCB2ay5RYyk7IC8vIEFkZCBRYyBjb25zdGFudCB0ZXJtCiAgICBkdXAKICAgIGxlbgogICAgaW50Y18wIC8vIDk2CiAgICA9PQogICAgYXNzZXJ0IC8vIExlbmd0aCBtdXN0IGJlIDk2CiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czoyMzQKICAgIC8vIHJldHVybiBvcC5FbGxpcHRpY0N1cnZlLmFkZChvcC5FYy5CTFMxMl8zODFnMSwgcDEsIHAyKS50b0ZpeGVkKHsKICAgIGZyYW1lX2RpZyA0MQogICAgZWNfYWRkIEJMUzEyXzM4MWcxCiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czoyMzQtMjM2CiAgICAvLyByZXR1cm4gb3AuRWxsaXB0aWNDdXJ2ZS5hZGQob3AuRWMuQkxTMTJfMzgxZzEsIHAxLCBwMikudG9GaXhlZCh7CiAgICAvLyAgIGxlbmd0aDogOTYsCiAgICAvLyB9KTsKICAgIGR1cAogICAgbGVuCiAgICBpbnRjXzAgLy8gOTYKICAgID09CiAgICBhc3NlcnQgLy8gTGVuZ3RoIG11c3QgYmUgOTYKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjcwMgogICAgLy8gY29uc3QgYmV0YXhpID0gZnJNdWwoY2hhbGxlbmdlcy5iZXRhLm5hdGl2ZSwgY2hhbGxlbmdlcy54aS5uYXRpdmUpOwogICAgZGlnIDEyCiAgICBleHRyYWN0IDk2IDMyCiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czo2NAogICAgLy8gcmV0dXJuIChhICogYikgJSBCTFMxMl8zODFfU0NBTEFSX01PRFVMVVM7CiAgICBkaWcgOQogICAgZGlnIDEKICAgIGIqCiAgICBieXRlY18wIC8vIDB4NzNlZGE3NTMyOTlkN2Q0ODMzMzlkODA4MDlhMWQ4MDU1M2JkYTQwMmZmZmU1YmZlZmZmZmZmZmYwMDAwMDAwMQogICAgYiUKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjE0OAogICAgLy8gY29uc3QgYk46IGJpZ3VpbnQgPSBiICUgcjsKICAgIGR1cAogICAgYnl0ZWNfMCAvLyAweDczZWRhNzUzMjk5ZDdkNDgzMzM5ZDgwODA5YTFkODA1NTNiZGE0MDJmZmZlNWJmZWZmZmZmZmZmMDAwMDAwMDEKICAgIGIlCiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czoxNDkKICAgIC8vIHJldHVybiAoYU4gKyBiTikgJSByOwogICAgdW5jb3ZlciAxMAogICAgYisKICAgIGJ5dGVjXzAgLy8gMHg3M2VkYTc1MzI5OWQ3ZDQ4MzMzOWQ4MDgwOWExZDgwNTUzYmRhNDAyZmZmZTViZmVmZmZmZmZmZjAwMDAwMDAxCiAgICBiJQogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6MTQ3CiAgICAvLyBjb25zdCBhTjogYmlndWludCA9IGEgJSByOwogICAgYnl0ZWNfMCAvLyAweDczZWRhNzUzMjk5ZDdkNDgzMzM5ZDgwODA5YTFkODA1NTNiZGE0MDJmZmZlNWJmZWZmZmZmZmZmMDAwMDAwMDEKICAgIGIlCiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czoxNDkKICAgIC8vIHJldHVybiAoYU4gKyBiTikgJSByOwogICAgZGlnIDgKICAgIGIrCiAgICBieXRlY18wIC8vIDB4NzNlZGE3NTMyOTlkN2Q0ODMzMzlkODA4MDlhMWQ4MDU1M2JkYTQwMmZmZmU1YmZlZmZmZmZmZmYwMDAwMDAwMQogICAgYiUKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjcwOAogICAgLy8gZnJBZGQocHJvb2YuZXZhbF9iLm5hdGl2ZSwgZnJNdWwoYmV0YXhpLCBCaWdVaW50KHZrLmsxKSkpLAogICAgZnJhbWVfZGlnIDM5CiAgICBkdXAKICAgIGNvdmVyIDMKICAgIGludGMgMTIgLy8gNzg0CiAgICBwdXNoaW50IDggLy8gOAogICAgZXh0cmFjdDMKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjY0CiAgICAvLyByZXR1cm4gKGEgKiBiKSAlIEJMUzEyXzM4MV9TQ0FMQVJfTU9EVUxVUzsKICAgIGRpZyAyCiAgICBiKgogICAgYnl0ZWNfMCAvLyAweDczZWRhNzUzMjk5ZDdkNDgzMzM5ZDgwODA5YTFkODA1NTNiZGE0MDJmZmZlNWJmZWZmZmZmZmZmMDAwMDAwMDEKICAgIGIlCiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czoxNDgKICAgIC8vIGNvbnN0IGJOOiBiaWd1aW50ID0gYiAlIHI7CiAgICBieXRlY18wIC8vIDB4NzNlZGE3NTMyOTlkN2Q0ODMzMzlkODA4MDlhMWQ4MDU1M2JkYTQwMmZmZmU1YmZlZmZmZmZmZmYwMDAwMDAwMQogICAgYiUKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjE0OQogICAgLy8gcmV0dXJuIChhTiArIGJOKSAlIHI7CiAgICB1bmNvdmVyIDkKICAgIGIrCiAgICBieXRlY18wIC8vIDB4NzNlZGE3NTMyOTlkN2Q0ODMzMzlkODA4MDlhMWQ4MDU1M2JkYTQwMmZmZmU1YmZlZmZmZmZmZmYwMDAwMDAwMQogICAgYiUKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjE0NwogICAgLy8gY29uc3QgYU46IGJpZ3VpbnQgPSBhICUgcjsKICAgIGJ5dGVjXzAgLy8gMHg3M2VkYTc1MzI5OWQ3ZDQ4MzMzOWQ4MDgwOWExZDgwNTUzYmRhNDAyZmZmZTViZmVmZmZmZmZmZjAwMDAwMDAxCiAgICBiJQogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6MTQ5CiAgICAvLyByZXR1cm4gKGFOICsgYk4pICUgcjsKICAgIGRpZyA5CiAgICBiKwogICAgYnl0ZWNfMCAvLyAweDczZWRhNzUzMjk5ZDdkNDgzMzM5ZDgwODA5YTFkODA1NTNiZGE0MDJmZmZlNWJmZWZmZmZmZmZmMDAwMDAwMDEKICAgIGIlCiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czo3MTIKICAgIC8vIGZyQWRkKHByb29mLmV2YWxfYy5uYXRpdmUsIGZyTXVsKGJldGF4aSwgQmlnVWludCh2ay5rMikpKSwKICAgIGRpZyAzCiAgICBpbnRjIDEzIC8vIDc5MgogICAgcHVzaGludCA4IC8vIDgKICAgIGV4dHJhY3QzCiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czo2NAogICAgLy8gcmV0dXJuIChhICogYikgJSBCTFMxMl8zODFfU0NBTEFSX01PRFVMVVM7CiAgICB1bmNvdmVyIDMKICAgIGIqCiAgICBieXRlY18wIC8vIDB4NzNlZGE3NTMyOTlkN2Q0ODMzMzlkODA4MDlhMWQ4MDU1M2JkYTQwMmZmZmU1YmZlZmZmZmZmZmYwMDAwMDAwMQogICAgYiUKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjE0OAogICAgLy8gY29uc3QgYk46IGJpZ3VpbnQgPSBiICUgcjsKICAgIGJ5dGVjXzAgLy8gMHg3M2VkYTc1MzI5OWQ3ZDQ4MzMzOWQ4MDgwOWExZDgwNTUzYmRhNDAyZmZmZTViZmVmZmZmZmZmZjAwMDAwMDAxCiAgICBiJQogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6MTQ5CiAgICAvLyByZXR1cm4gKGFOICsgYk4pICUgcjsKICAgIHVuY292ZXIgOAogICAgYisKICAgIGJ5dGVjXzAgLy8gMHg3M2VkYTc1MzI5OWQ3ZDQ4MzMzOWQ4MDgwOWExZDgwNTUzYmRhNDAyZmZmZTViZmVmZmZmZmZmZjAwMDAwMDAxCiAgICBiJQogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6MTQ3CiAgICAvLyBjb25zdCBhTjogYmlndWludCA9IGEgJSByOwogICAgYnl0ZWNfMCAvLyAweDczZWRhNzUzMjk5ZDdkNDgzMzM5ZDgwODA5YTFkODA1NTNiZGE0MDJmZmZlNWJmZWZmZmZmZmZmMDAwMDAwMDEKICAgIGIlCiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czoxNDkKICAgIC8vIHJldHVybiAoYU4gKyBiTikgJSByOwogICAgdW5jb3ZlciA4CiAgICBiKwogICAgYnl0ZWNfMCAvLyAweDczZWRhNzUzMjk5ZDdkNDgzMzM5ZDgwODA5YTFkODA1NTNiZGE0MDJmZmZlNWJmZWZmZmZmZmZmMDAwMDAwMDEKICAgIGIlCiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czo2NAogICAgLy8gcmV0dXJuIChhICogYikgJSBCTFMxMl8zODFfU0NBTEFSX01PRFVMVVM7CiAgICBjb3ZlciAyCiAgICBiKgogICAgYnl0ZWNfMCAvLyAweDczZWRhNzUzMjk5ZDdkNDgzMzM5ZDgwODA5YTFkODA1NTNiZGE0MDJmZmZlNWJmZWZmZmZmZmZmMDAwMDAwMDEKICAgIGIlCiAgICBiKgogICAgYnl0ZWNfMCAvLyAweDczZWRhNzUzMjk5ZDdkNDgzMzM5ZDgwODA5YTFkODA1NTNiZGE0MDJmZmZlNWJmZWZmZmZmZmZmMDAwMDAwMDEKICAgIGIlCiAgICBkaWcgOQogICAgYioKICAgIGJ5dGVjXzAgLy8gMHg3M2VkYTc1MzI5OWQ3ZDQ4MzMzOWQ4MDgwOWExZDgwNTUzYmRhNDAyZmZmZTViZmVmZmZmZmZmZjAwMDAwMDAxCiAgICBiJQogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6MTQ3CiAgICAvLyBjb25zdCBhTjogYmlndWludCA9IGEgJSByOwogICAgYnl0ZWNfMCAvLyAweDczZWRhNzUzMjk5ZDdkNDgzMzM5ZDgwODA5YTFkODA1NTNiZGE0MDJmZmZlNWJmZWZmZmZmZmZmMDAwMDAwMDEKICAgIGIlCiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czoxNDgKICAgIC8vIGNvbnN0IGJOOiBiaWd1aW50ID0gYiAlIHI7CiAgICB1bmNvdmVyIDgKICAgIGJ5dGVjXzAgLy8gMHg3M2VkYTc1MzI5OWQ3ZDQ4MzMzOWQ4MDgwOWExZDgwNTUzYmRhNDAyZmZmZTViZmVmZmZmZmZmZjAwMDAwMDAxCiAgICBiJQogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6MTQ5CiAgICAvLyByZXR1cm4gKGFOICsgYk4pICUgcjsKICAgIGIrCiAgICBieXRlY18wIC8vIDB4NzNlZGE3NTMyOTlkN2Q0ODMzMzlkODA4MDlhMWQ4MDU1M2JkYTQwMmZmZmU1YmZlZmZmZmZmZmYwMDAwMDAwMQogICAgYiUKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjcyMAogICAgLy8gY29uc3QgelNjYWxhciA9IGZyQWRkKGZyQWRkKGQyYSwgZDJiKSwgY2hhbGxlbmdlcy51Lm5hdGl2ZSk7CiAgICBkaWcgMTAKICAgIHB1c2hpbnQgMzIwIC8vIDMyMAogICAgaW50Y18xIC8vIDMyCiAgICBleHRyYWN0MwogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6MTQ3CiAgICAvLyBjb25zdCBhTjogYmlndWludCA9IGEgJSByOwogICAgc3dhcAogICAgYnl0ZWNfMCAvLyAweDczZWRhNzUzMjk5ZDdkNDgzMzM5ZDgwODA5YTFkODA1NTNiZGE0MDJmZmZlNWJmZWZmZmZmZmZmMDAwMDAwMDEKICAgIGIlCiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czoxNDgKICAgIC8vIGNvbnN0IGJOOiBiaWd1aW50ID0gYiAlIHI7CiAgICBkaWcgMQogICAgYnl0ZWNfMCAvLyAweDczZWRhNzUzMjk5ZDdkNDgzMzM5ZDgwODA5YTFkODA1NTNiZGE0MDJmZmZlNWJmZWZmZmZmZmZmMDAwMDAwMDEKICAgIGIlCiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czoxNDkKICAgIC8vIHJldHVybiAoYU4gKyBiTikgJSByOwogICAgYisKICAgIGJ5dGVjXzAgLy8gMHg3M2VkYTc1MzI5OWQ3ZDQ4MzMzOWQ4MDgwOWExZDgwNTUzYmRhNDAyZmZmZTViZmVmZmZmZmZmZjAwMDAwMDAxCiAgICBiJQogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6MjIzCiAgICAvLyByZXR1cm4gb3AuRWxsaXB0aWNDdXJ2ZS5zY2FsYXJNdWwob3AuRWMuQkxTMTJfMzgxZzEsIHAsIEJ5dGVzKHMpKS50b0ZpeGVkKHsKICAgIGZyYW1lX2RpZyAyMgogICAgc3dhcAogICAgZWNfc2NhbGFyX211bCBCTFMxMl8zODFnMQogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6MjIzLTIyNQogICAgLy8gcmV0dXJuIG9wLkVsbGlwdGljQ3VydmUuc2NhbGFyTXVsKG9wLkVjLkJMUzEyXzM4MWcxLCBwLCBCeXRlcyhzKSkudG9GaXhlZCh7CiAgICAvLyAgIGxlbmd0aDogOTYsCiAgICAvLyB9KTsKICAgIGR1cAogICAgbGVuCiAgICBpbnRjXzAgLy8gOTYKICAgID09CiAgICBhc3NlcnQgLy8gTGVuZ3RoIG11c3QgYmUgOTYKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjIzNAogICAgLy8gcmV0dXJuIG9wLkVsbGlwdGljQ3VydmUuYWRkKG9wLkVjLkJMUzEyXzM4MWcxLCBwMSwgcDIpLnRvRml4ZWQoewogICAgdW5jb3ZlciA0CiAgICBzd2FwCiAgICBlY19hZGQgQkxTMTJfMzgxZzEKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjIzNC0yMzYKICAgIC8vIHJldHVybiBvcC5FbGxpcHRpY0N1cnZlLmFkZChvcC5FYy5CTFMxMl8zODFnMSwgcDEsIHAyKS50b0ZpeGVkKHsKICAgIC8vICAgbGVuZ3RoOiA5NiwKICAgIC8vIH0pOwogICAgZHVwCiAgICBsZW4KICAgIGludGNfMCAvLyA5NgogICAgPT0KICAgIGFzc2VydCAvLyBMZW5ndGggbXVzdCBiZSA5NgogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6NjQKICAgIC8vIHJldHVybiAoYSAqIGIpICUgQkxTMTJfMzgxX1NDQUxBUl9NT0RVTFVTOwogICAgdW5jb3ZlciA4CiAgICB1bmNvdmVyIDgKICAgIGIqCiAgICBieXRlY18wIC8vIDB4NzNlZGE3NTMyOTlkN2Q0ODMzMzlkODA4MDlhMWQ4MDU1M2JkYTQwMmZmZmU1YmZlZmZmZmZmZmYwMDAwMDAwMQogICAgYiUKICAgIGRpZyAxMQogICAgYioKICAgIGJ5dGVjXzAgLy8gMHg3M2VkYTc1MzI5OWQ3ZDQ4MzMzOWQ4MDgwOWExZDgwNTUzYmRhNDAyZmZmZTViZmVmZmZmZmZmZjAwMDAwMDAxCiAgICBiJQogICAgdW5jb3ZlciA2CiAgICBiKgogICAgYnl0ZWNfMCAvLyAweDczZWRhNzUzMjk5ZDdkNDgzMzM5ZDgwODA5YTFkODA1NTNiZGE0MDJmZmZlNWJmZWZmZmZmZmZmMDAwMDAwMDEKICAgIGIlCiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czoyMjMKICAgIC8vIHJldHVybiBvcC5FbGxpcHRpY0N1cnZlLnNjYWxhck11bChvcC5FYy5CTFMxMl8zODFnMSwgcCwgQnl0ZXMocykpLnRvRml4ZWQoewogICAgZnJhbWVfZGlnIDQ0CiAgICBzd2FwCiAgICBlY19zY2FsYXJfbXVsIEJMUzEyXzM4MWcxCiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czoyMjMtMjI1CiAgICAvLyByZXR1cm4gb3AuRWxsaXB0aWNDdXJ2ZS5zY2FsYXJNdWwob3AuRWMuQkxTMTJfMzgxZzEsIHAsIEJ5dGVzKHMpKS50b0ZpeGVkKHsKICAgIC8vICAgbGVuZ3RoOiA5NiwKICAgIC8vIH0pOwogICAgZHVwCiAgICBsZW4KICAgIGludGNfMCAvLyA5NgogICAgPT0KICAgIGFzc2VydCAvLyBMZW5ndGggbXVzdCBiZSA5NgogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6MjQ1CiAgICAvLyByZXR1cm4gZzFUaW1lc0ZyKHAsIFJfTUlOVVNfMSk7CiAgICBieXRlY18zIC8vIDB4NzNlZGE3NTMyOTlkN2Q0ODMzMzlkODA4MDlhMWQ4MDU1M2JkYTQwMmZmZmU1YmZlZmZmZmZmZmYwMDAwMDAwMAogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6MjIzCiAgICAvLyByZXR1cm4gb3AuRWxsaXB0aWNDdXJ2ZS5zY2FsYXJNdWwob3AuRWMuQkxTMTJfMzgxZzEsIHAsIEJ5dGVzKHMpKS50b0ZpeGVkKHsKICAgIGVjX3NjYWxhcl9tdWwgQkxTMTJfMzgxZzEKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjIyMy0yMjUKICAgIC8vIHJldHVybiBvcC5FbGxpcHRpY0N1cnZlLnNjYWxhck11bChvcC5FYy5CTFMxMl8zODFnMSwgcCwgQnl0ZXMocykpLnRvRml4ZWQoewogICAgLy8gICBsZW5ndGg6IDk2LAogICAgLy8gfSk7CiAgICBkdXAKICAgIGxlbgogICAgaW50Y18wIC8vIDk2CiAgICA9PQogICAgYXNzZXJ0IC8vIExlbmd0aCBtdXN0IGJlIDk2CiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czoyMzQKICAgIC8vIHJldHVybiBvcC5FbGxpcHRpY0N1cnZlLmFkZChvcC5FYy5CTFMxMl8zODFnMSwgcDEsIHAyKS50b0ZpeGVkKHsKICAgIGVjX2FkZCBCTFMxMl8zODFnMQogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6MjM0LTIzNgogICAgLy8gcmV0dXJuIG9wLkVsbGlwdGljQ3VydmUuYWRkKG9wLkVjLkJMUzEyXzM4MWcxLCBwMSwgcDIpLnRvRml4ZWQoewogICAgLy8gICBsZW5ndGg6IDk2LAogICAgLy8gfSk7CiAgICBkdXAKICAgIGxlbgogICAgaW50Y18wIC8vIDk2CiAgICA9PQogICAgYXNzZXJ0IC8vIExlbmd0aCBtdXN0IGJlIDk2CiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czo3NDkKICAgIC8vIGxldCBmUG9pbnRzID0gb3AuY29uY2F0KHByb29mLkEsIHByb29mLkIpOwogICAgZnJhbWVfZGlnIDkKICAgIGZyYW1lX2RpZyAxMAogICAgY29uY2F0CiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czo3NTAKICAgIC8vIGZQb2ludHMgPSBvcC5jb25jYXQoZlBvaW50cywgcHJvb2YuQyk7CiAgICBmcmFtZV9kaWcgNQogICAgY29uY2F0CiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czo3NTEKICAgIC8vIGZQb2ludHMgPSBvcC5jb25jYXQoZlBvaW50cywgdmsuUzEpOwogICAgZnJhbWVfZGlnIDQyCiAgICBjb25jYXQKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjc1MgogICAgLy8gZlBvaW50cyA9IG9wLmNvbmNhdChmUG9pbnRzLCB2ay5TMik7CiAgICBmcmFtZV9kaWcgNDMKICAgIGNvbmNhdAogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6NzU2CiAgICAvLyAoY2hhbGxlbmdlcy52WzFdIGFzIFVpbnQyNTYpLmJ5dGVzLAogICAgdW5jb3ZlciA4CiAgICBleHRyYWN0IDEyOCAxOTIKICAgIGR1cAogICAgZXh0cmFjdCAzMiAzMiAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjc1Ni03NTcKICAgIC8vIChjaGFsbGVuZ2VzLnZbMV0gYXMgVWludDI1NikuYnl0ZXMsCiAgICAvLyAoY2hhbGxlbmdlcy52WzJdIGFzIFVpbnQyNTYpLmJ5dGVzLAogICAgZGlnIDEKICAgIGV4dHJhY3QgNjQgMzIgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czo3NTUtNzU4CiAgICAvLyBsZXQgZlNjYWxhcnMgPSBvcC5jb25jYXQoCiAgICAvLyAgIChjaGFsbGVuZ2VzLnZbMV0gYXMgVWludDI1NikuYnl0ZXMsCiAgICAvLyAgIChjaGFsbGVuZ2VzLnZbMl0gYXMgVWludDI1NikuYnl0ZXMsCiAgICAvLyApOwogICAgZHVwMgogICAgY29uY2F0CiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czo3NTkKICAgIC8vIGZTY2FsYXJzID0gb3AuY29uY2F0KGZTY2FsYXJzLCAoY2hhbGxlbmdlcy52WzNdIGFzIFVpbnQyNTYpLmJ5dGVzKTsKICAgIGRpZyAzCiAgICBleHRyYWN0IDk2IDMyIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgc3dhcAogICAgZGlnIDEKICAgIGNvbmNhdAogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6NzYwCiAgICAvLyBmU2NhbGFycyA9IG9wLmNvbmNhdChmU2NhbGFycywgKGNoYWxsZW5nZXMudls0XSBhcyBVaW50MjU2KS5ieXRlcyk7CiAgICBkaWcgNAogICAgZXh0cmFjdCAxMjggMzIgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBzd2FwCiAgICBkaWcgMQogICAgY29uY2F0CiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czo3NjEKICAgIC8vIGZTY2FsYXJzID0gb3AuY29uY2F0KGZTY2FsYXJzLCAoY2hhbGxlbmdlcy52WzVdIGFzIFVpbnQyNTYpLmJ5dGVzKTsKICAgIHVuY292ZXIgNQogICAgZXh0cmFjdCAxNjAgMzIgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBzd2FwCiAgICBkaWcgMQogICAgY29uY2F0CiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czo3NjMtNzY3CiAgICAvLyBjb25zdCBmQmF0Y2hlZCA9IG9wLkVsbGlwdGljQ3VydmUuc2NhbGFyTXVsTXVsdGkoCiAgICAvLyAgIG9wLkVjLkJMUzEyXzM4MWcxLAogICAgLy8gICBmUG9pbnRzLAogICAgLy8gICBmU2NhbGFycywKICAgIC8vICk7CiAgICB1bmNvdmVyIDYKICAgIHN3YXAKICAgIGVjX211bHRpX3NjYWxhcl9tdWwgQkxTMTJfMzgxZzEKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjc2OAogICAgLy8gY29uc3QgRiA9IGcxQWRkKEQsIGZCYXRjaGVkLnRvRml4ZWQoeyBsZW5ndGg6IDk2IH0pKTsKICAgIGR1cAogICAgbGVuCiAgICBpbnRjXzAgLy8gOTYKICAgID09CiAgICBhc3NlcnQgLy8gTGVuZ3RoIG11c3QgYmUgOTYKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjIzNAogICAgLy8gcmV0dXJuIG9wLkVsbGlwdGljQ3VydmUuYWRkKG9wLkVjLkJMUzEyXzM4MWcxLCBwMSwgcDIpLnRvRml4ZWQoewogICAgZGlnIDYKICAgIHN3YXAKICAgIGVjX2FkZCBCTFMxMl8zODFnMQogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6MjM0LTIzNgogICAgLy8gcmV0dXJuIG9wLkVsbGlwdGljQ3VydmUuYWRkKG9wLkVjLkJMUzEyXzM4MWcxLCBwMSwgcDIpLnRvRml4ZWQoewogICAgLy8gICBsZW5ndGg6IDk2LAogICAgLy8gfSk7CiAgICBkdXAKICAgIGxlbgogICAgaW50Y18wIC8vIDk2CiAgICA9PQogICAgYXNzZXJ0IC8vIExlbmd0aCBtdXN0IGJlIDk2CiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czo3NzAKICAgIC8vIHJldHVybiB7IEQsIEYgfTsKICAgIHVuY292ZXIgNgogICAgc3dhcAogICAgY29uY2F0CiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czo0MDgKICAgIC8vIGNvbnN0IHsgRDogZCwgRjogZiB9ID0gY2FsY3VsYXRlREYocHJvb2YsIGNoYWxsZW5nZXMsIHZrLCBMWzFdIGFzIFVpbnQyNTYpOwogICAgZHVwCiAgICBleHRyYWN0IDAgOTYKICAgIHN3YXAKICAgIGV4dHJhY3QgOTYgOTYKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjQwOQogICAgLy8gZGVidWdMb2coIkQiLCBkKTsKICAgIHB1c2hieXRlcyAiRCIKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjIxMwogICAgLy8gbG9nKG5hbWUpOwogICAgbG9nCiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czoyMTQKICAgIC8vIGxvZyh2YWx1ZSk7CiAgICBzd2FwCiAgICBsb2cKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjQxMAogICAgLy8gZGVidWdMb2coIkYiLCBmKTsKICAgIHB1c2hieXRlcyAiRiIKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjIxMwogICAgLy8gbG9nKG5hbWUpOwogICAgbG9nCiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czoyMTQKICAgIC8vIGxvZyh2YWx1ZSk7CiAgICBkdXAKICAgIGxvZwogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6NjQKICAgIC8vIHJldHVybiAoYSAqIGIpICUgQkxTMTJfMzgxX1NDQUxBUl9NT0RVTFVTOwogICAgdW5jb3ZlciA1CiAgICB1bmNvdmVyIDEyCiAgICBiKgogICAgYnl0ZWNfMCAvLyAweDczZWRhNzUzMjk5ZDdkNDgzMzM5ZDgwODA5YTFkODA1NTNiZGE0MDJmZmZlNWJmZWZmZmZmZmZmMDAwMDAwMDEKICAgIGIlCiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czo3ODQtNzg3CiAgICAvLyBsZXQgZSA9IGZyU3ViKAogICAgLy8gICBmck11bCgoY2hhbGxlbmdlcy52WzFdIGFzIFVpbnQyNTYpLm5hdGl2ZSwgcHJvb2YuZXZhbF9hLm5hdGl2ZSksCiAgICAvLyAgIHIwLm5hdGl2ZSwKICAgIC8vICk7CiAgICB1bmNvdmVyIDkKICAgIGNhbGxzdWIgZnJTdWIKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjY0CiAgICAvLyByZXR1cm4gKGEgKiBiKSAlIEJMUzEyXzM4MV9TQ0FMQVJfTU9EVUxVUzsKICAgIHVuY292ZXIgNQogICAgdW5jb3ZlciA5CiAgICBiKgogICAgYnl0ZWNfMCAvLyAweDczZWRhNzUzMjk5ZDdkNDgzMzM5ZDgwODA5YTFkODA1NTNiZGE0MDJmZmZlNWJmZWZmZmZmZmZmMDAwMDAwMDEKICAgIGIlCiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czoxNDcKICAgIC8vIGNvbnN0IGFOOiBiaWd1aW50ID0gYSAlIHI7CiAgICBzd2FwCiAgICBieXRlY18wIC8vIDB4NzNlZGE3NTMyOTlkN2Q0ODMzMzlkODA4MDlhMWQ4MDU1M2JkYTQwMmZmZmU1YmZlZmZmZmZmZmYwMDAwMDAwMQogICAgYiUKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjE0OAogICAgLy8gY29uc3QgYk46IGJpZ3VpbnQgPSBiICUgcjsKICAgIHN3YXAKICAgIGJ5dGVjXzAgLy8gMHg3M2VkYTc1MzI5OWQ3ZDQ4MzMzOWQ4MDgwOWExZDgwNTUzYmRhNDAyZmZmZTViZmVmZmZmZmZmZjAwMDAwMDAxCiAgICBiJQogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6MTQ5CiAgICAvLyByZXR1cm4gKGFOICsgYk4pICUgcjsKICAgIGIrCiAgICBieXRlY18wIC8vIDB4NzNlZGE3NTMyOTlkN2Q0ODMzMzlkODA4MDlhMWQ4MDU1M2JkYTQwMmZmZmU1YmZlZmZmZmZmZmYwMDAwMDAwMQogICAgYiUKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjY0CiAgICAvLyByZXR1cm4gKGEgKiBiKSAlIEJMUzEyXzM4MV9TQ0FMQVJfTU9EVUxVUzsKICAgIHVuY292ZXIgNAogICAgdW5jb3ZlciA4CiAgICBiKgogICAgYnl0ZWNfMCAvLyAweDczZWRhNzUzMjk5ZDdkNDgzMzM5ZDgwODA5YTFkODA1NTNiZGE0MDJmZmZlNWJmZWZmZmZmZmZmMDAwMDAwMDEKICAgIGIlCiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czoxNDcKICAgIC8vIGNvbnN0IGFOOiBiaWd1aW50ID0gYSAlIHI7CiAgICBzd2FwCiAgICBieXRlY18wIC8vIDB4NzNlZGE3NTMyOTlkN2Q0ODMzMzlkODA4MDlhMWQ4MDU1M2JkYTQwMmZmZmU1YmZlZmZmZmZmZmYwMDAwMDAwMQogICAgYiUKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjE0OAogICAgLy8gY29uc3QgYk46IGJpZ3VpbnQgPSBiICUgcjsKICAgIHN3YXAKICAgIGJ5dGVjXzAgLy8gMHg3M2VkYTc1MzI5OWQ3ZDQ4MzMzOWQ4MDgwOWExZDgwNTUzYmRhNDAyZmZmZTViZmVmZmZmZmZmZjAwMDAwMDAxCiAgICBiJQogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6MTQ5CiAgICAvLyByZXR1cm4gKGFOICsgYk4pICUgcjsKICAgIGIrCiAgICBieXRlY18wIC8vIDB4NzNlZGE3NTMyOTlkN2Q0ODMzMzlkODA4MDlhMWQ4MDU1M2JkYTQwMmZmZmU1YmZlZmZmZmZmZmYwMDAwMDAwMQogICAgYiUKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjY0CiAgICAvLyByZXR1cm4gKGEgKiBiKSAlIEJMUzEyXzM4MV9TQ0FMQVJfTU9EVUxVUzsKICAgIHVuY292ZXIgMwogICAgdW5jb3ZlciA5CiAgICBiKgogICAgYnl0ZWNfMCAvLyAweDczZWRhNzUzMjk5ZDdkNDgzMzM5ZDgwODA5YTFkODA1NTNiZGE0MDJmZmZlNWJmZWZmZmZmZmZmMDAwMDAwMDEKICAgIGIlCiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czoxNDcKICAgIC8vIGNvbnN0IGFOOiBiaWd1aW50ID0gYSAlIHI7CiAgICBzd2FwCiAgICBieXRlY18wIC8vIDB4NzNlZGE3NTMyOTlkN2Q0ODMzMzlkODA4MDlhMWQ4MDU1M2JkYTQwMmZmZmU1YmZlZmZmZmZmZmYwMDAwMDAwMQogICAgYiUKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjE0OAogICAgLy8gY29uc3QgYk46IGJpZ3VpbnQgPSBiICUgcjsKICAgIHN3YXAKICAgIGJ5dGVjXzAgLy8gMHg3M2VkYTc1MzI5OWQ3ZDQ4MzMzOWQ4MDgwOWExZDgwNTUzYmRhNDAyZmZmZTViZmVmZmZmZmZmZjAwMDAwMDAxCiAgICBiJQogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6MTQ5CiAgICAvLyByZXR1cm4gKGFOICsgYk4pICUgcjsKICAgIGIrCiAgICBieXRlY18wIC8vIDB4NzNlZGE3NTMyOTlkN2Q0ODMzMzlkODA4MDlhMWQ4MDU1M2JkYTQwMmZmZmU1YmZlZmZmZmZmZmYwMDAwMDAwMQogICAgYiUKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjY0CiAgICAvLyByZXR1cm4gKGEgKiBiKSAlIEJMUzEyXzM4MV9TQ0FMQVJfTU9EVUxVUzsKICAgIHVuY292ZXIgMgogICAgdW5jb3ZlciA3CiAgICBiKgogICAgYnl0ZWNfMCAvLyAweDczZWRhNzUzMjk5ZDdkNDgzMzM5ZDgwODA5YTFkODA1NTNiZGE0MDJmZmZlNWJmZWZmZmZmZmZmMDAwMDAwMDEKICAgIGIlCiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czoxNDcKICAgIC8vIGNvbnN0IGFOOiBiaWd1aW50ID0gYSAlIHI7CiAgICBzd2FwCiAgICBieXRlY18wIC8vIDB4NzNlZGE3NTMyOTlkN2Q0ODMzMzlkODA4MDlhMWQ4MDU1M2JkYTQwMmZmZmU1YmZlZmZmZmZmZmYwMDAwMDAwMQogICAgYiUKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjE0OAogICAgLy8gY29uc3QgYk46IGJpZ3VpbnQgPSBiICUgcjsKICAgIHN3YXAKICAgIGJ5dGVjXzAgLy8gMHg3M2VkYTc1MzI5OWQ3ZDQ4MzMzOWQ4MDgwOWExZDgwNTUzYmRhNDAyZmZmZTViZmVmZmZmZmZmZjAwMDAwMDAxCiAgICBiJQogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6MTQ5CiAgICAvLyByZXR1cm4gKGFOICsgYk4pICUgcjsKICAgIGIrCiAgICBieXRlY18wIC8vIDB4NzNlZGE3NTMyOTlkN2Q0ODMzMzlkODA4MDlhMWQ4MDU1M2JkYTQwMmZmZmU1YmZlZmZmZmZmZmYwMDAwMDAwMQogICAgYiUKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjY0CiAgICAvLyByZXR1cm4gKGEgKiBiKSAlIEJMUzEyXzM4MV9TQ0FMQVJfTU9EVUxVUzsKICAgIGRpZyAyCiAgICB1bmNvdmVyIDYKICAgIGIqCiAgICBieXRlY18wIC8vIDB4NzNlZGE3NTMyOTlkN2Q0ODMzMzlkODA4MDlhMWQ4MDU1M2JkYTQwMmZmZmU1YmZlZmZmZmZmZmYwMDAwMDAwMQogICAgYiUKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjE0NwogICAgLy8gY29uc3QgYU46IGJpZ3VpbnQgPSBhICUgcjsKICAgIHN3YXAKICAgIGJ5dGVjXzAgLy8gMHg3M2VkYTc1MzI5OWQ3ZDQ4MzMzOWQ4MDgwOWExZDgwNTUzYmRhNDAyZmZmZTViZmVmZmZmZmZmZjAwMDAwMDAxCiAgICBiJQogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6MTQ4CiAgICAvLyBjb25zdCBiTjogYmlndWludCA9IGIgJSByOwogICAgc3dhcAogICAgYnl0ZWNfMCAvLyAweDczZWRhNzUzMjk5ZDdkNDgzMzM5ZDgwODA5YTFkODA1NTNiZGE0MDJmZmZlNWJmZWZmZmZmZmZmMDAwMDAwMDEKICAgIGIlCiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czoxNDkKICAgIC8vIHJldHVybiAoYU4gKyBiTikgJSByOwogICAgYisKICAgIGJ5dGVjXzAgLy8gMHg3M2VkYTc1MzI5OWQ3ZDQ4MzMzOWQ4MDgwOWExZDgwNTUzYmRhNDAyZmZmZTViZmVmZmZmZmZmZjAwMDAwMDAxCiAgICBiJQogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6ODAwCiAgICAvLyBjb25zdCByZXMgPSBnMVRpbWVzRnIoRzFfT05FLnRvRml4ZWQoeyBsZW5ndGg6IDk2IH0pLCBlKTsKICAgIHB1c2hieXRlcyAweDE3ZjFkM2E3MzE5N2Q3OTQyNjk1NjM4YzRmYTlhYzBmYzM2ODhjNGY5Nzc0YjkwNWExNGUzYTNmMTcxYmFjNTg2YzU1ZTgzZmY5N2ExYWVmZmIzYWYwMGFkYjIyYzZiYjA4YjNmNDgxZTNhYWEwZjFhMDllMzBlZDc0MWQ4YWU0ZmNmNWUwOTVkNWQwMGFmNjAwZGIxOGNiMmMwNGIzZWRkMDNjYzc0NGEyODg4YWU0MGNhYTIzMjk0NmM1ZTdlMQogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6MjIzCiAgICAvLyByZXR1cm4gb3AuRWxsaXB0aWNDdXJ2ZS5zY2FsYXJNdWwob3AuRWMuQkxTMTJfMzgxZzEsIHAsIEJ5dGVzKHMpKS50b0ZpeGVkKHsKICAgIHN3YXAKICAgIGVjX3NjYWxhcl9tdWwgQkxTMTJfMzgxZzEKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjIyMy0yMjUKICAgIC8vIHJldHVybiBvcC5FbGxpcHRpY0N1cnZlLnNjYWxhck11bChvcC5FYy5CTFMxMl8zODFnMSwgcCwgQnl0ZXMocykpLnRvRml4ZWQoewogICAgLy8gICBsZW5ndGg6IDk2LAogICAgLy8gfSk7CiAgICBkdXAKICAgIGxlbgogICAgaW50Y18wIC8vIDk2CiAgICA9PQogICAgYXNzZXJ0IC8vIExlbmd0aCBtdXN0IGJlIDk2CiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czo0MTQKICAgIC8vIGRlYnVnTG9nKCJFIiwgZSk7CiAgICBwdXNoYnl0ZXMgIkUiCiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czoyMTMKICAgIC8vIGxvZyhuYW1lKTsKICAgIGxvZwogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6MjE0CiAgICAvLyBsb2codmFsdWUpOwogICAgZHVwCiAgICBsb2cKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjIyMwogICAgLy8gcmV0dXJuIG9wLkVsbGlwdGljQ3VydmUuc2NhbGFyTXVsKG9wLkVjLkJMUzEyXzM4MWcxLCBwLCBCeXRlcyhzKSkudG9GaXhlZCh7CiAgICBmcmFtZV9kaWcgMjMKICAgIGRpZyAzCiAgICBlY19zY2FsYXJfbXVsIEJMUzEyXzM4MWcxCiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czoyMjMtMjI1CiAgICAvLyByZXR1cm4gb3AuRWxsaXB0aWNDdXJ2ZS5zY2FsYXJNdWwob3AuRWMuQkxTMTJfMzgxZzEsIHAsIEJ5dGVzKHMpKS50b0ZpeGVkKHsKICAgIC8vICAgbGVuZ3RoOiA5NiwKICAgIC8vIH0pOwogICAgZHVwCiAgICBsZW4KICAgIGludGNfMCAvLyA5NgogICAgPT0KICAgIGFzc2VydCAvLyBMZW5ndGggbXVzdCBiZSA5NgogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6MjM0CiAgICAvLyByZXR1cm4gb3AuRWxsaXB0aWNDdXJ2ZS5hZGQob3AuRWMuQkxTMTJfMzgxZzEsIHAxLCBwMikudG9GaXhlZCh7CiAgICBmcmFtZV9kaWcgMjcKICAgIHN3YXAKICAgIGVjX2FkZCBCTFMxMl8zODFnMQogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6MjM0LTIzNgogICAgLy8gcmV0dXJuIG9wLkVsbGlwdGljQ3VydmUuYWRkKG9wLkVjLkJMUzEyXzM4MWcxLCBwMSwgcDIpLnRvRml4ZWQoewogICAgLy8gICBsZW5ndGg6IDk2LAogICAgLy8gfSk7CiAgICBkdXAKICAgIGxlbgogICAgaW50Y18wIC8vIDk2CiAgICA9PQogICAgYXNzZXJ0IC8vIExlbmd0aCBtdXN0IGJlIDk2CiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czo2NAogICAgLy8gcmV0dXJuIChhICogYikgJSBCTFMxMl8zODFfU0NBTEFSX01PRFVMVVM7CiAgICB1bmNvdmVyIDMKICAgIGRpZyA1CiAgICBiKgogICAgYnl0ZWNfMCAvLyAweDczZWRhNzUzMjk5ZDdkNDgzMzM5ZDgwODA5YTFkODA1NTNiZGE0MDJmZmZlNWJmZWZmZmZmZmZmMDAwMDAwMDEKICAgIGIlCiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czo4MzIKICAgIC8vIFJPT1RfT0ZfVU5JVFksCiAgICBieXRlYyA0IC8vIFRNUExfUk9PVF9PRl9VTklUWQogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6NjQKICAgIC8vIHJldHVybiAoYSAqIGIpICUgQkxTMTJfMzgxX1NDQUxBUl9NT0RVTFVTOwogICAgYioKICAgIGJ5dGVjXzAgLy8gMHg3M2VkYTc1MzI5OWQ3ZDQ4MzMzOWQ4MDgwOWExZDgwNTUzYmRhNDAyZmZmZTViZmVmZmZmZmZmZjAwMDAwMDAxCiAgICBiJQogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6ODM0CiAgICAvLyBjb25zdCBwYWlyaW5nU2NhbGFycyA9IG9wLmNvbmNhdChjaGFsbGVuZ2VzLnhpLmJ5dGVzLCBiMzIocykpOwogICAgY2FsbHN1YiBiMzIKICAgIHVuY292ZXIgNQogICAgc3dhcAogICAgY29uY2F0CiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czo4MzYtODQwCiAgICAvLyBsZXQgQjEgPSBvcC5FbGxpcHRpY0N1cnZlLnNjYWxhck11bE11bHRpKAogICAgLy8gICBvcC5FYy5CTFMxMl8zODFnMSwKICAgIC8vICAgcGFpcmluZ1BvaW50cywKICAgIC8vICAgcGFpcmluZ1NjYWxhcnMsCiAgICAvLyApLnRvRml4ZWQoeyBsZW5ndGg6IDk2IH0pOwogICAgZnJhbWVfZGlnIDI4CiAgICBzd2FwCiAgICBlY19tdWx0aV9zY2FsYXJfbXVsIEJMUzEyXzM4MWcxCiAgICBkdXAKICAgIGxlbgogICAgaW50Y18wIC8vIDk2CiAgICA9PQogICAgYXNzZXJ0IC8vIExlbmd0aCBtdXN0IGJlIDk2CiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czoyMzQKICAgIC8vIHJldHVybiBvcC5FbGxpcHRpY0N1cnZlLmFkZChvcC5FYy5CTFMxMl8zODFnMSwgcDEsIHAyKS50b0ZpeGVkKHsKICAgIHVuY292ZXIgMwogICAgZWNfYWRkIEJMUzEyXzM4MWcxCiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czoyMzQtMjM2CiAgICAvLyByZXR1cm4gb3AuRWxsaXB0aWNDdXJ2ZS5hZGQob3AuRWMuQkxTMTJfMzgxZzEsIHAxLCBwMikudG9GaXhlZCh7CiAgICAvLyAgIGxlbmd0aDogOTYsCiAgICAvLyB9KTsKICAgIGR1cAogICAgbGVuCiAgICBpbnRjXzAgLy8gOTYKICAgID09CiAgICBhc3NlcnQgLy8gTGVuZ3RoIG11c3QgYmUgOTYKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjIyMwogICAgLy8gcmV0dXJuIG9wLkVsbGlwdGljQ3VydmUuc2NhbGFyTXVsKG9wLkVjLkJMUzEyXzM4MWcxLCBwLCBCeXRlcyhzKSkudG9GaXhlZCh7CiAgICB1bmNvdmVyIDIKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjI0NQogICAgLy8gcmV0dXJuIGcxVGltZXNGcihwLCBSX01JTlVTXzEpOwogICAgYnl0ZWNfMyAvLyAweDczZWRhNzUzMjk5ZDdkNDgzMzM5ZDgwODA5YTFkODA1NTNiZGE0MDJmZmZlNWJmZWZmZmZmZmZmMDAwMDAwMDAKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjIyMwogICAgLy8gcmV0dXJuIG9wLkVsbGlwdGljQ3VydmUuc2NhbGFyTXVsKG9wLkVjLkJMUzEyXzM4MWcxLCBwLCBCeXRlcyhzKSkudG9GaXhlZCh7CiAgICBlY19zY2FsYXJfbXVsIEJMUzEyXzM4MWcxCiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czoyMjMtMjI1CiAgICAvLyByZXR1cm4gb3AuRWxsaXB0aWNDdXJ2ZS5zY2FsYXJNdWwob3AuRWMuQkxTMTJfMzgxZzEsIHAsIEJ5dGVzKHMpKS50b0ZpeGVkKHsKICAgIC8vICAgbGVuZ3RoOiA5NiwKICAgIC8vIH0pOwogICAgZHVwCiAgICBsZW4KICAgIGludGNfMCAvLyA5NgogICAgPT0KICAgIGFzc2VydCAvLyBMZW5ndGggbXVzdCBiZSA5NgogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6MjM0CiAgICAvLyByZXR1cm4gb3AuRWxsaXB0aWNDdXJ2ZS5hZGQob3AuRWMuQkxTMTJfMzgxZzEsIHAxLCBwMikudG9GaXhlZCh7CiAgICBlY19hZGQgQkxTMTJfMzgxZzEKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjIzNC0yMzYKICAgIC8vIHJldHVybiBvcC5FbGxpcHRpY0N1cnZlLmFkZChvcC5FYy5CTFMxMl8zODFnMSwgcDEsIHAyKS50b0ZpeGVkKHsKICAgIC8vICAgbGVuZ3RoOiA5NiwKICAgIC8vIH0pOwogICAgZHVwCiAgICBsZW4KICAgIGludGNfMCAvLyA5NgogICAgPT0KICAgIGFzc2VydCAvLyBMZW5ndGggbXVzdCBiZSA5NgogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6MjIzCiAgICAvLyByZXR1cm4gb3AuRWxsaXB0aWNDdXJ2ZS5zY2FsYXJNdWwob3AuRWMuQkxTMTJfMzgxZzEsIHAsIEJ5dGVzKHMpKS50b0ZpeGVkKHsKICAgIHN3YXAKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjI0NQogICAgLy8gcmV0dXJuIGcxVGltZXNGcihwLCBSX01JTlVTXzEpOwogICAgYnl0ZWNfMyAvLyAweDczZWRhNzUzMjk5ZDdkNDgzMzM5ZDgwODA5YTFkODA1NTNiZGE0MDJmZmZlNWJmZWZmZmZmZmZmMDAwMDAwMDAKICAgIC8vIGNvbnRyYWN0cy9wbG9ua19ibHMxMjM4MS5hbGdvLnRzOjIyMwogICAgLy8gcmV0dXJuIG9wLkVsbGlwdGljQ3VydmUuc2NhbGFyTXVsKG9wLkVjLkJMUzEyXzM4MWcxLCBwLCBCeXRlcyhzKSkudG9GaXhlZCh7CiAgICBlY19zY2FsYXJfbXVsIEJMUzEyXzM4MWcxCiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czoyMjMtMjI1CiAgICAvLyByZXR1cm4gb3AuRWxsaXB0aWNDdXJ2ZS5zY2FsYXJNdWwob3AuRWMuQkxTMTJfMzgxZzEsIHAsIEJ5dGVzKHMpKS50b0ZpeGVkKHsKICAgIC8vICAgbGVuZ3RoOiA5NiwKICAgIC8vIH0pOwogICAgZHVwCiAgICBsZW4KICAgIGludGNfMCAvLyA5NgogICAgPT0KICAgIGFzc2VydCAvLyBMZW5ndGggbXVzdCBiZSA5NgogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6ODQ3CiAgICAvLyBvcC5jb25jYXQoZzFOZWcoQTEpLCBCMSksIC8vIEcxIHBvaW50cwogICAgc3dhcAogICAgY29uY2F0CiAgICAvLyBjb250cmFjdHMvcGxvbmtfYmxzMTIzODEuYWxnby50czo4NDgKICAgIC8vIG9wLmNvbmNhdCh2ay5YXzIsIEcyX09ORSksIC8vIEcyIHBvaW50cwogICAgc3dhcAogICAgaW50YyAxNCAvLyA4MDAKICAgIGludGMgNSAvLyAxOTIKICAgIGV4dHJhY3QzCiAgICBwdXNoYnl0ZXMgMHgwMjRhYTJiMmYwOGYwYTkxMjYwODA1MjcyZGM1MTA1MWM2ZTQ3YWQ0ZmE0MDNiMDJiNDUxMGI2NDdhZTNkMTc3MGJhYzAzMjZhODA1YmJlZmQ0ODA1NmM4YzEyMWJkYjgxM2UwMmI2MDUyNzE5ZjYwN2RhY2QzYTA4ODI3NGY2NTU5NmJkMGQwOTkyMGI2MWFiNWRhNjFiYmRjN2Y1MDQ5MzM0Y2YxMTIxMzk0NWQ1N2U1YWM3ZDA1NWQwNDJiN2UwY2U1ZDUyNzcyN2Q2ZTExOGNjOWNkYzZkYTJlMzUxYWFkZmQ5YmFhOGNiZGQzYTc2ZDQyOWE2OTUxNjBkMTJjOTIzYWM5Y2MzYmFjYTI4OWUxOTM1NDg2MDhiODI4MDEwNjA2YzRhMDJlYTczNGNjMzJhY2QyYjAyYmMyOGI5OWNiM2UyODdlODVhNzYzYWYyNjc0OTJhYjU3MmU5OWFiM2YzNzBkMjc1Y2VjMWRhMWFhYTkwNzVmZjA1Zjc5YmUKICAgIGNvbmNhdAogICAgLy8gY29udHJhY3RzL3Bsb25rX2JsczEyMzgxLmFsZ28udHM6ODQ1LTg0OQogICAgLy8gY29uc3QgcmVzID0gb3AuRWxsaXB0aWNDdXJ2ZS5wYWlyaW5nQ2hlY2soCiAgICAvLyAgIG9wLkVjLkJMUzEyXzM4MWcxLAogICAgLy8gICBvcC5jb25jYXQoZzFOZWcoQTEpLCBCMSksIC8vIEcxIHBvaW50cwogICAgLy8gICBvcC5jb25jYXQodmsuWF8yLCBHMl9PTkUpLCAvLyBHMiBwb2ludHMKICAgIC8vICk7CiAgICBlY19wYWlyaW5nX2NoZWNrIEJMUzEyXzM4MWcxCiAgICAvLyBjb250cmFjdHMvdmVyaWZpZXIuYWxnby50czoyOQogICAgLy8gYXNzZXJ0KHZlcmlmeUZyb21UZW1wbGF0ZVdpdGhMb2dzKHNpZ25hbHMsIHByb29mKSwgIlZlcmlmaWNhdGlvbiBmYWlsZWQiKTsKICAgIGFzc2VydCAvLyBWZXJpZmljYXRpb24gZmFpbGVkCiAgICByZXRzdWIKCnZlcmlmeV90ZXJuYXJ5X2ZhbHNlQDE0OgogICAgZnJhbWVfZGlnIDM4CiAgICBmcmFtZV9idXJ5IDM2CiAgICBiIHZlcmlmeV90ZXJuYXJ5X21lcmdlQDE1Cg==",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiARYCABAIADwAGgAuADwASgBYAGiAaQBpgGoAbgB+ACJgYgc+2nUymdfUgzOdgICaHYBVO9pAL//lv+/////wAAAAEAAQEgc+2nUymdfUgzOdgICaHYBVO9pAL//lv+/////wAAAAAAADEbQQAzggIElcEM5ARD2Qo4NhoAjgIAEwABADEZFEQxGEQ2GgE2GgKIAFAkQzEZgQISRDEYRCRDMRlA/90xGBREJEOKAgGL/iiqi/8oqkwooEyhKKqJigEBi/8VIw5EI6+L/6tJFSMSRImKAQGL/wIoqkkVIw5EI6+riYoCACVHISlHBCcFSRUlSwEPJUsCTwJNIksCDyJLA08CTUsDTwJLAlJJFSISRCEFSwMPIQVLBE8CTUsETwNLAlJJFSISRCEGSwQPIQZLBU8CTUsFTwNLAlJJFSISRCEESwUPIQRLBk8CTUsGTwNLAlJJFSISRCEHSwYPIQdLB08CTUsHTwNLAlJJFSISRCEISwcPIQhLCE8CTUsITwNLAlJJFSISRCEJSwgPIQlLCU8CTUsJTwNLAlJJFSISRCEKSwkPIQpLCk8CTUsKTwNLAlJJFSISRCELSwoPIQtLC08CTUsLTwNLAlIXIQxLCw8hDEsMTwJNSwxPA0sCUhchDUsMDyENSw1PAk1LDU8DSwJSFyEOSw0PIQ5LDk8CTUsOTwNLAlIXIQ9LDg8hD08PTwJNTw5PA08CUkkVIQUSRE8MTwxQTwtQTwpQTwlQTwhQTwdQTwZQTwUWUE8EFlBPAxZQTwIWUExQRwJXAGBLAVdgYFBLAVfAYFBLASEGIlhQSU4CSwEhBCJYSU4DUEsBIQciWElOA1BLASEIIlhJTgNQTCEJIlhJTgJQi/4lWSWLL4suDEEAIIv+VwIAiy9JTgIjCyNYKKqI/hKLLUxQjC0kCIwvQv/Yi/9XAGBJjAmLLUxQi/9XYGBJjApQi/9XwGBJjAVQiP34SYj99FBJjC2L/yEGIlhJjBZQiP3jSYwLi/8hBCJYSYwGUIv/IQciWEmMB1CL/yEIIlhJjAhQiP2/SYwgi/+B4AYjWEmMElCL/4GAByNYSYwTUIv/gaAHI1hJjBRQi/+BwAcjWEmMD1CL/yEPI1hJjA1Qi/+BgAgjWEmMDlAhBa9MiP10XCCMHYECjCOLI4EGDEEALYsjSSQJIwuLHUlPAiNYSwFXICCjKKpJFSMORCOvq0sCIwtMXYwdJAiMI0L/y4v/IQkiWEmMG4v/IQoiWEmMF1BJjByI/R6LLYsLUIsgUIsdUExQgEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUEmMEElXACCABGJldGGwsElXICCABWdhbW1hsLBJV0AggAVhbHBoYbCwSVdgIIACeGmwSbBLAYHAAiNYgAF1sLBLASEQI1iAA3hpbrCwSwEhBCNYgAJ6aLCwTFeAwElXICCABHZbMV2wsElXQCCABHZbMl2wsElXYCCABHZbM12wsElXgCCABHZbNF2wsFegIIAEdls1XbCwJIwiJYwjjCGLJyEKW4sjDUEAGIshSaMoqowhiyKBAguMIosjJAiMI0L/3YshSRUjDkQjr0mMA0qrixAhEE8CXU8CKoj7yUkVIw5ETwKrIQRMXYwQiyIWKKqMFSqMH4AiAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIwAiychC1tJjCZABXMkjCQkjCWLJYskDkEAvYsQSSEEI1iLH0lPAqMoqk8CV2AgTwKI+1mLFaMoqkwoqowBKKpJKalEgCBz7adTKZ19SDM52AgJodgFU72kAv/+W/7////+/////yqMGUwoqowMjBGLESmlQQAtixEqrCmpixmMGkEACYsZiwyjKKqMGosajBmLDEmjKKqMDIsRgAECoowRQv/MiwGLGaMoqkkVIw5EiwOriwBJTwJQTCVZJAgWVwYCXACMAIsfJwSjKKqMH4slJAiMJUL/O4ACAaKLEFCLAFBJjARJJVlLARVSSVcCAIwCVyIgSYwegAZMMSh4aSmwsCmMGCWMI4sjiy4MQQAri/5XAgCLI0lOAiMLI1goqkwkCEmMIyMLiwJMI1ijKKqLGEyI+leMGEL/zYsYSRUjDkSLA0lOAquABlBJKHhpKbBJsIsEgwICoANYSVdAIElLAaMoqoseoyiqSwJXACBJiw9JTgijKKqLEklOByiqTCiqSwGgKKpLBVcgIEwoqkwoqkxLAaAoqksDiw1JTgyjKKqLE0lOBCiqTCiqSwGgKKooqksDoCiqixRJTgooqklLBaAoqk8ETwOjKKpJTwKjKKqLDklOD6MoqksJoyiqTwxLCYj5p0yI+aNJFSMORE8Oq4ACcjCwSbCLKIsGUIsHUIsIUEsNSwejKKpLDSEEI1hJKKopTIj5dEsPIRAjWElLA6MoqilMiPljSwFPAqMoqk8DoyiqKUyI+VJPA4j5YEsRiPlbUEsKiPlVUEsPiPlPUE8DiPlJUE8CiPlDUEyI+T5Q4wJJFSISRIsp4AJJFSISREsMV2AgSwlLAaMoqkkoqk8KoCiqKKpLCKAoqosnSU4DIQyBCFhLAqMoqiiqTwmgKKooqksJoCiqSwMhDYEIWE8DoyiqKKpPCKAoqiiqTwigKKpOAqMoqqMoqksJoyiqKKpPCCiqoCiqSwqBwAIjWEwoqksBKKqgKKqLFkzhAkkVIhJETwRM4AJJFSISRE8ITwijKKpLC6Moqk8GoyiqiyxM4QJJFSISRCvhAkkVIhJE4AJJFSISRIsJiwpQiwVQiypQiytQTwhXgMBJVyAgSwFXQCBKUEsDV2AgTEsBUEsEV4AgTEsBUE8FV6AgTEsBUE8GTOMCSRUiEkRLBkzgAkkVIhJETwZMUElXAGBMV2BggAFEsEywgAFGsEmwTwVPDKMoqk8JiPfyTwVPCaMoqkwoqkwoqqAoqk8ETwijKKpMKKpMKKqgKKpPA08JoyiqTCiqTCiqoCiqTwJPB6MoqkwoqkwoqqAoqksCTwajKKpMKKpMKKqgKKqAYBfx06cxl9eUJpVjjE+prA/DaIxPl3S5BaFOOj8XG6xYbFXoP/l6Gu/7OvAK2yLGuwiz9IHjqqDxoJ4w7XQdiuT89eCV1dAK9gDbGMssBLPt0DzHRKKIiuQMqiMpRsXn4UzhAkkVIhJEgAFFsEmwixdLA+ECSRUiEkSLG0zgAkkVIhJETwNLBaMoqicEoyiqiPchTwVMUIscTOMCSRUiEkRPA+ACSRUiEkRPAivhAkkVIhJE4AJJFSISREwr4QJJFSISRExQTCEOIQVYgMABAkqisvCPCpEmCAUnLcUQUcbketT6QDsCtFELZHrj0XcLrAMmqAW779SAVsjBIb24E+ArYFJxn2B9rNOgiCdPZVlr0NCZILYatdphu9x/UEkzTPESE5RdV+WsfQVdBCt+DOXVJ3J9bhGMyc3G2i41Gq39m6qMvdOnbUKaaVFg0SySOsnMO6yiieGTVIYIuCgBBgbEoC6nNMwyrNKwK8KLmcs+KH6Fp2OvJnSSq1cumas/Nw0nXOwdoaqpB1/wX3m+UOICRImLJowkQvqJ",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 0,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {
        "ROOT_OF_UNITY": {
            "type": "AVMBytes"
        },
        "VERIFICATION_KEY": {
            "type": "AVMBytes"
        }
    }
}