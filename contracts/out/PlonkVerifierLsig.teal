#pragma version 10
#pragma typetrack false

// contracts/verifier.algo.ts::program() -> uint64:
main:
    intcblock 96 32 0 1 384 192 288 480 576 672 768 992 864 896 928 960 1024 776 784 792 800
    bytecblock 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001 0x 0x01 TMPL_ROOT_OF_UNITY 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000000 TMPL_VERIFICATION_KEY
    intc_2 // 0
    dupn 38
    bytec_1 // ""
    dupn 5
    // contracts/verifier.algo.ts:45
    // assertMatch(Txn, { fee: 0, rekeyTo: Global.zeroAddress });
    txn Fee
    !
    txn RekeyTo
    global ZeroAddress
    ==
    &&
    assert // assert target is match for conditions
    // contracts/verifier.algo.ts:66
    // const proofBytes = Txn.applicationArgs(2);
    pushint 2 // 2
    txnas ApplicationArgs
    // contracts/verifier.algo.ts:68
    // A: proofBytes.slice(0, 96).toFixed({ length: 96 }),
    dup
    len
    intc_2 // 0
    dig 1
    >=
    intc_2 // 0
    dig 2
    uncover 2
    select
    intc_0 // 96
    dig 2
    >=
    intc_0 // 96
    dig 3
    uncover 2
    select
    dig 3
    uncover 2
    dig 2
    substring3
    dup
    len
    intc_0 // 96
    ==
    assert // Length must be 96
    // contracts/verifier.algo.ts:69
    // B: proofBytes.slice(96, 192).toFixed({ length: 96 }),
    intc 5 // 192
    dig 3
    >=
    intc 5 // 192
    dig 4
    uncover 2
    select
    dig 4
    uncover 3
    dig 2
    substring3
    dup
    len
    intc_0 // 96
    ==
    assert // Length must be 96
    // contracts/verifier.algo.ts:70
    // C: proofBytes.slice(192, 288).toFixed({ length: 96 }),
    intc 6 // 288
    dig 4
    >=
    intc 6 // 288
    dig 5
    uncover 2
    select
    dig 5
    uncover 3
    dig 2
    substring3
    dup
    len
    intc_0 // 96
    ==
    assert // Length must be 96
    // contracts/verifier.algo.ts:71
    // Z: proofBytes.slice(288, 384).toFixed({ length: 96 }),
    intc 4 // 384
    dig 5
    >=
    intc 4 // 384
    dig 6
    uncover 2
    select
    dig 6
    uncover 3
    dig 2
    substring3
    dup
    len
    intc_0 // 96
    ==
    assert // Length must be 96
    // contracts/verifier.algo.ts:72
    // T1: proofBytes.slice(384, 480).toFixed({ length: 96 }),
    intc 7 // 480
    dig 6
    >=
    intc 7 // 480
    dig 7
    uncover 2
    select
    dig 7
    uncover 3
    dig 2
    substring3
    dup
    len
    intc_0 // 96
    ==
    assert // Length must be 96
    // contracts/verifier.algo.ts:73
    // T2: proofBytes.slice(480, 576).toFixed({ length: 96 }),
    intc 8 // 576
    dig 7
    >=
    intc 8 // 576
    dig 8
    uncover 2
    select
    dig 8
    uncover 3
    dig 2
    substring3
    dup
    len
    intc_0 // 96
    ==
    assert // Length must be 96
    // contracts/verifier.algo.ts:74
    // T3: proofBytes.slice(576, 672).toFixed({ length: 96 }),
    intc 9 // 672
    dig 8
    >=
    intc 9 // 672
    dig 9
    uncover 2
    select
    dig 9
    uncover 3
    dig 2
    substring3
    dup
    len
    intc_0 // 96
    ==
    assert // Length must be 96
    // contracts/verifier.algo.ts:75
    // Wxi: proofBytes.slice(672, 768).toFixed({ length: 96 }),
    intc 10 // 768
    dig 9
    >=
    intc 10 // 768
    dig 10
    uncover 2
    select
    dig 10
    uncover 3
    dig 2
    substring3
    dup
    len
    intc_0 // 96
    ==
    assert // Length must be 96
    // contracts/verifier.algo.ts:76
    // Wxiw: proofBytes.slice(768, 864).toFixed({ length: 96 }),
    intc 12 // 864
    dig 10
    >=
    intc 12 // 864
    dig 11
    uncover 2
    select
    dig 11
    uncover 3
    dig 2
    substring3
    dup
    len
    intc_0 // 96
    ==
    assert // Length must be 96
    // contracts/verifier.algo.ts:77
    // eval_a: interpretAsArc4<Uint256>(proofBytes.slice(864, 896)),
    intc 13 // 896
    dig 11
    >=
    intc 13 // 896
    dig 12
    uncover 2
    select
    dig 12
    uncover 3
    dig 2
    substring3
    // contracts/verifier.algo.ts:78
    // eval_b: interpretAsArc4<Uint256>(proofBytes.slice(896, 928)),
    intc 14 // 928
    dig 12
    >=
    intc 14 // 928
    dig 13
    uncover 2
    select
    dig 13
    uncover 3
    dig 2
    substring3
    // contracts/verifier.algo.ts:79
    // eval_c: interpretAsArc4<Uint256>(proofBytes.slice(928, 960)),
    intc 15 // 960
    dig 13
    >=
    intc 15 // 960
    dig 14
    uncover 2
    select
    dig 14
    uncover 3
    dig 2
    substring3
    // contracts/verifier.algo.ts:80
    // eval_s1: interpretAsArc4<Uint256>(proofBytes.slice(960, 992)),
    intc 11 // 992
    dig 14
    >=
    intc 11 // 992
    dig 15
    uncover 2
    select
    dig 15
    uncover 3
    dig 2
    substring3
    // contracts/verifier.algo.ts:81
    // eval_s2: interpretAsArc4<Uint256>(proofBytes.slice(992, 1024)),
    intc 16 // 1024
    dig 15
    >=
    intc 16 // 1024
    dig 16
    uncover 2
    select
    dig 16
    uncover 3
    dig 2
    substring3
    // contracts/verifier.algo.ts:82
    // eval_zw: interpretAsArc4<Uint256>(proofBytes.slice(1024, 1056)),
    pushint 1056 // 1056
    dig 16
    >=
    pushint 1056 // 1056
    uncover 17
    uncover 2
    select
    uncover 16
    uncover 3
    uncover 2
    substring3
    // contracts/verifier.algo.ts:67-83
    // const proof: Proof = {
    //   A: proofBytes.slice(0, 96).toFixed({ length: 96 }),
    //   B: proofBytes.slice(96, 192).toFixed({ length: 96 }),
    //   C: proofBytes.slice(192, 288).toFixed({ length: 96 }),
    //   Z: proofBytes.slice(288, 384).toFixed({ length: 96 }),
    //   T1: proofBytes.slice(384, 480).toFixed({ length: 96 }),
    //   T2: proofBytes.slice(480, 576).toFixed({ length: 96 }),
    //   T3: proofBytes.slice(576, 672).toFixed({ length: 96 }),
    //   Wxi: proofBytes.slice(672, 768).toFixed({ length: 96 }),
    //   Wxiw: proofBytes.slice(768, 864).toFixed({ length: 96 }),
    //   eval_a: interpretAsArc4<Uint256>(proofBytes.slice(864, 896)),
    //   eval_b: interpretAsArc4<Uint256>(proofBytes.slice(896, 928)),
    //   eval_c: interpretAsArc4<Uint256>(proofBytes.slice(928, 960)),
    //   eval_s1: interpretAsArc4<Uint256>(proofBytes.slice(960, 992)),
    //   eval_s2: interpretAsArc4<Uint256>(proofBytes.slice(992, 1024)),
    //   eval_zw: interpretAsArc4<Uint256>(proofBytes.slice(1024, 1056)),
    // };
    uncover 14
    uncover 14
    concat
    uncover 13
    concat
    uncover 12
    concat
    uncover 11
    concat
    uncover 10
    concat
    uncover 9
    concat
    uncover 8
    concat
    uncover 7
    concat
    uncover 6
    concat
    uncover 5
    concat
    uncover 4
    concat
    uncover 3
    concat
    uncover 2
    concat
    swap
    concat
    // contracts/verifier.algo.ts:85
    // const signalBytes = Txn.applicationArgs(1);
    intc_3 // 1
    txnas ApplicationArgs
    dup
    // contracts/verifier.algo.ts:89
    // const signals: Uint256[] = [];
    pushbytes 0x0000
    swap
    // contracts/verifier.algo.ts:91
    // for (const s of signalsArc4) {
    intc_2 // 0
    extract_uint16
    intc_2 // 0

main_for_header@1:
    // contracts/verifier.algo.ts:91
    // for (const s of signalsArc4) {
    dup
    dig 2
    <
    bz main_after_for@4
    dig 3
    extract 2 0
    dig 1
    dup
    cover 2
    intc_1 // 32
    *
    intc_1 // 32
    extract3 // on error: index access is out of bounds
    // contracts/verifier.algo.ts:92
    // signals.push(s);
    dig 4
    dup
    uncover 2
    concat // on error: max array length exceeded
    swap
    intc_2 // 0
    extract_uint16
    intc_3 // 1
    +
    itob
    extract 6 2
    replace2 0
    bury 4
    intc_3 // 1
    +
    bury 1
    b main_for_header@1

main_after_for@4:
    // contracts/plonk_bls12381.algo.ts:331
    // return verify(decodeVk(vkBytes), signals, proof);
    bytec 5 // TMPL_VERIFICATION_KEY
    // contracts/plonk_bls12381.algo.ts:294
    // Qm: vkBytes.slice(0, 96).toFixed({ length: 96 }),
    dup
    len
    intc_2 // 0
    dig 1
    >=
    intc_2 // 0
    dig 2
    uncover 2
    select
    intc_0 // 96
    dig 2
    >=
    intc_0 // 96
    dig 3
    uncover 2
    select
    dig 3
    uncover 2
    dig 2
    substring3
    dup
    len
    intc_0 // 96
    ==
    assert // Length must be 96
    // contracts/plonk_bls12381.algo.ts:295
    // Ql: vkBytes.slice(96, 192).toFixed({ length: 96 }),
    intc 5 // 192
    dig 3
    >=
    intc 5 // 192
    dig 4
    uncover 2
    select
    dig 4
    uncover 3
    dig 2
    substring3
    dup
    len
    intc_0 // 96
    ==
    assert // Length must be 96
    // contracts/plonk_bls12381.algo.ts:296
    // Qr: vkBytes.slice(192, 288).toFixed({ length: 96 }),
    intc 6 // 288
    dig 4
    >=
    intc 6 // 288
    dig 5
    uncover 2
    select
    dig 5
    uncover 3
    dig 2
    substring3
    dup
    len
    intc_0 // 96
    ==
    assert // Length must be 96
    // contracts/plonk_bls12381.algo.ts:297
    // Qo: vkBytes.slice(288, 384).toFixed({ length: 96 }),
    intc 4 // 384
    dig 5
    >=
    intc 4 // 384
    dig 6
    uncover 2
    select
    dig 6
    uncover 3
    dig 2
    substring3
    dup
    len
    intc_0 // 96
    ==
    assert // Length must be 96
    // contracts/plonk_bls12381.algo.ts:298
    // Qc: vkBytes.slice(384, 480).toFixed({ length: 96 }),
    intc 7 // 480
    dig 6
    >=
    intc 7 // 480
    dig 7
    uncover 2
    select
    dig 7
    uncover 3
    dig 2
    substring3
    dup
    len
    intc_0 // 96
    ==
    assert // Length must be 96
    // contracts/plonk_bls12381.algo.ts:299
    // S1: vkBytes.slice(480, 576).toFixed({ length: 96 }),
    intc 8 // 576
    dig 7
    >=
    intc 8 // 576
    dig 8
    uncover 2
    select
    dig 8
    uncover 3
    dig 2
    substring3
    dup
    len
    intc_0 // 96
    ==
    assert // Length must be 96
    // contracts/plonk_bls12381.algo.ts:300
    // S2: vkBytes.slice(576, 672).toFixed({ length: 96 }),
    intc 9 // 672
    dig 8
    >=
    intc 9 // 672
    dig 9
    uncover 2
    select
    dig 9
    uncover 3
    dig 2
    substring3
    dup
    len
    intc_0 // 96
    ==
    assert // Length must be 96
    // contracts/plonk_bls12381.algo.ts:301
    // S3: vkBytes.slice(672, 768).toFixed({ length: 96 }),
    intc 10 // 768
    dig 9
    >=
    intc 10 // 768
    dig 10
    uncover 2
    select
    dig 10
    uncover 3
    dig 2
    substring3
    dup
    len
    intc_0 // 96
    ==
    assert // Length must be 96
    // contracts/plonk_bls12381.algo.ts:302
    // power: op.btoi(vkBytes.slice(768, 776)),
    intc 17 // 776
    dig 10
    >=
    intc 17 // 776
    dig 11
    uncover 2
    select
    dig 11
    uncover 3
    dig 2
    substring3
    btoi
    // contracts/plonk_bls12381.algo.ts:303
    // nPublic: op.btoi(vkBytes.slice(776, 784)),
    intc 18 // 784
    dig 11
    >=
    intc 18 // 784
    dig 12
    uncover 2
    select
    dig 12
    uncover 3
    dig 2
    substring3
    btoi
    // contracts/plonk_bls12381.algo.ts:304
    // k1: op.btoi(vkBytes.slice(784, 792)),
    intc 19 // 792
    dig 12
    >=
    intc 19 // 792
    dig 13
    uncover 2
    select
    dig 13
    uncover 3
    dig 2
    substring3
    btoi
    // contracts/plonk_bls12381.algo.ts:305
    // k2: op.btoi(vkBytes.slice(792, 800)),
    intc 20 // 800
    dig 13
    >=
    intc 20 // 800
    dig 14
    uncover 2
    select
    dig 14
    uncover 3
    dig 2
    substring3
    btoi
    // contracts/plonk_bls12381.algo.ts:306
    // X_2: vkBytes.slice(800, 992).toFixed({ length: 192 }),
    intc 11 // 992
    dig 14
    >=
    intc 11 // 992
    uncover 15
    uncover 2
    select
    uncover 14
    uncover 3
    uncover 2
    substring3
    dup
    len
    intc 5 // 192
    ==
    assert // Length must be 192
    // contracts/plonk_bls12381.algo.ts:293-307
    // return {
    //   Qm: vkBytes.slice(0, 96).toFixed({ length: 96 }),
    //   Ql: vkBytes.slice(96, 192).toFixed({ length: 96 }),
    //   Qr: vkBytes.slice(192, 288).toFixed({ length: 96 }),
    //   Qo: vkBytes.slice(288, 384).toFixed({ length: 96 }),
    //   Qc: vkBytes.slice(384, 480).toFixed({ length: 96 }),
    //   S1: vkBytes.slice(480, 576).toFixed({ length: 96 }),
    //   S2: vkBytes.slice(576, 672).toFixed({ length: 96 }),
    //   S3: vkBytes.slice(672, 768).toFixed({ length: 96 }),
    //   power: op.btoi(vkBytes.slice(768, 776)),
    //   nPublic: op.btoi(vkBytes.slice(776, 784)),
    //   k1: op.btoi(vkBytes.slice(784, 792)),
    //   k2: op.btoi(vkBytes.slice(792, 800)),
    //   X_2: vkBytes.slice(800, 992).toFixed({ length: 192 }),
    // };
    uncover 12
    uncover 12
    concat
    uncover 11
    concat
    uncover 10
    concat
    uncover 9
    concat
    uncover 8
    concat
    uncover 7
    concat
    uncover 6
    concat
    uncover 5
    itob
    concat
    uncover 4
    itob
    concat
    uncover 3
    itob
    concat
    uncover 2
    itob
    concat
    swap
    concat
    dup
    bury 16
    // contracts/plonk_bls12381.algo.ts:439
    // let td = op.concat(vk.Qm, vk.Ql);
    dup
    extract 0 96
    dig 1
    extract 96 96
    concat
    // contracts/plonk_bls12381.algo.ts:440
    // td = op.concat(td, vk.Qr);
    dig 1
    extract 192 96
    concat
    // contracts/plonk_bls12381.algo.ts:441
    // td = op.concat(td, vk.Qo);
    dig 1
    intc 6 // 288
    intc_0 // 96
    extract3
    concat
    dup
    bury 22
    // contracts/plonk_bls12381.algo.ts:442
    // td = op.concat(td, vk.Qc);
    dig 1
    intc 4 // 384
    intc_0 // 96
    extract3
    dup
    bury 44
    concat
    // contracts/plonk_bls12381.algo.ts:443
    // td = op.concat(td, vk.S1);
    dig 1
    intc 7 // 480
    intc_0 // 96
    extract3
    dup
    bury 43
    concat
    // contracts/plonk_bls12381.algo.ts:444
    // td = op.concat(td, vk.S2);
    dig 1
    intc 8 // 576
    intc_0 // 96
    extract3
    dup
    bury 42
    concat
    // contracts/plonk_bls12381.algo.ts:445
    // td = op.concat(td, vk.S3);
    swap
    intc 9 // 672
    intc_0 // 96
    extract3
    dup
    bury 40
    concat
    bury 18
    // contracts/plonk_bls12381.algo.ts:447
    // for (const signal of signals) {
    dig 2
    intc_2 // 0
    extract_uint16
    bury 11
    intc_2 // 0
    bury 1

main_for_header@8:
    // contracts/plonk_bls12381.algo.ts:447
    // for (const signal of signals) {
    dup
    dig 11
    <
    bz main_after_for@10
    dig 2
    extract 2 0
    dig 1
    dup
    cover 2
    intc_1 // 32
    *
    intc_1 // 32
    extract3 // on error: index access is out of bounds
    // contracts/plonk_bls12381.algo.ts:158
    // return a % BLS12_381_SCALAR_MODULUS;
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:448
    // td = op.concat(td, b32(frScalar(signal.native)));
    callsub b32
    dig 19
    swap
    concat
    bury 19
    intc_3 // 1
    +
    bury 1
    b main_for_header@8

main_after_for@10:
    // contracts/plonk_bls12381.algo.ts:452
    // td = op.concat(td, proof.A);
    dig 4
    dup
    extract 0 96
    dup
    bury 39
    dig 19
    swap
    concat
    // contracts/plonk_bls12381.algo.ts:453
    // td = op.concat(td, proof.B);
    dig 1
    extract 96 96
    dup
    bury 39
    concat
    // contracts/plonk_bls12381.algo.ts:454
    // td = op.concat(td, proof.C);
    dig 1
    extract 192 96
    dup
    bury 49
    concat
    // contracts/plonk_bls12381.algo.ts:456
    // const beta = getChallenge(td);
    callsub getChallenge
    // contracts/plonk_bls12381.algo.ts:461
    // const gamma = getChallenge(td);
    dup
    callsub getChallenge
    // contracts/plonk_bls12381.algo.ts:468
    // td = op.concat(td, gamma.bytes);
    concat
    dup
    bury 20
    // contracts/plonk_bls12381.algo.ts:469
    // td = op.concat(td, proof.Z);
    dig 1
    intc 6 // 288
    intc_0 // 96
    extract3
    dup
    bury 48
    concat
    // contracts/plonk_bls12381.algo.ts:470
    // const alpha = getChallenge(td);
    callsub getChallenge
    dup
    bury 37
    // contracts/plonk_bls12381.algo.ts:477
    // td = op.concat(td, proof.T1);
    dig 1
    intc 4 // 384
    intc_0 // 96
    extract3
    dup
    bury 47
    concat
    // contracts/plonk_bls12381.algo.ts:478
    // td = op.concat(td, proof.T2);
    dig 1
    intc 7 // 480
    intc_0 // 96
    extract3
    dup
    bury 46
    concat
    // contracts/plonk_bls12381.algo.ts:479
    // td = op.concat(td, proof.T3);
    dig 1
    intc 8 // 576
    intc_0 // 96
    extract3
    dup
    bury 45
    concat
    // contracts/plonk_bls12381.algo.ts:480
    // const xi = getChallenge(td);
    callsub getChallenge
    dup
    bury 15
    // contracts/plonk_bls12381.algo.ts:487
    // td = op.concat(td, proof.eval_a.bytes);
    dig 1
    intc 12 // 864
    intc_1 // 32
    extract3
    dup
    bury 31
    concat
    // contracts/plonk_bls12381.algo.ts:488
    // td = op.concat(td, proof.eval_b.bytes);
    dig 1
    intc 13 // 896
    intc_1 // 32
    extract3
    dup
    bury 30
    concat
    // contracts/plonk_bls12381.algo.ts:489
    // td = op.concat(td, proof.eval_c.bytes);
    dig 1
    intc 14 // 928
    intc_1 // 32
    extract3
    dup
    bury 29
    concat
    // contracts/plonk_bls12381.algo.ts:490
    // td = op.concat(td, proof.eval_s1.bytes);
    dig 1
    intc 15 // 960
    intc_1 // 32
    extract3
    dup
    bury 34
    concat
    // contracts/plonk_bls12381.algo.ts:491
    // td = op.concat(td, proof.eval_s2.bytes);
    dig 1
    intc 11 // 992
    intc_1 // 32
    extract3
    dup
    bury 36
    concat
    // contracts/plonk_bls12381.algo.ts:492
    // td = op.concat(td, proof.eval_zw.bytes);
    swap
    intc 16 // 1024
    intc_1 // 32
    extract3
    dup
    bury 34
    concat
    // contracts/plonk_bls12381.algo.ts:494
    // const v = new FixedArray<Uint256, 6>();
    intc 5 // 192
    bzero
    // contracts/plonk_bls12381.algo.ts:495
    // v[1] = getChallenge(td); // v1
    swap
    callsub getChallenge
    replace2 32 // on error: index access is out of bounds
    bury 16
    // contracts/plonk_bls12381.algo.ts:496
    // for (let i: uint64 = 2; i < 6; i++) {
    pushint 2 // 2
    bury 9

main_while_top@11:
    // contracts/plonk_bls12381.algo.ts:496
    // for (let i: uint64 = 2; i < 6; i++) {
    dig 8
    pushint 6 // 6
    <
    bz main_after_while@13
    // contracts/plonk_bls12381.algo.ts:497
    // v[i] = new Uint256(frMul((v[i - 1] as Uint256).native, v[1].native)); // v[i] = v1^i
    dig 8
    dup
    intc_3 // 1
    -
    intc_1 // 32
    *
    dig 17
    dup
    uncover 2
    intc_1 // 32
    extract3 // on error: index access is out of bounds
    dig 1
    extract 32 32 // on error: index access is out of bounds
    // contracts/plonk_bls12381.algo.ts:64
    // return (a * b) % BLS12_381_SCALAR_MODULUS;
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:497
    // v[i] = new Uint256(frMul((v[i - 1] as Uint256).native, v[1].native)); // v[i] = v1^i
    dup
    len
    intc_1 // 32
    <=
    assert // overflow
    intc_1 // 32
    bzero
    b|
    dig 2
    intc_1 // 32
    *
    swap
    replace3 // on error: index access is out of bounds
    bury 17
    // contracts/plonk_bls12381.algo.ts:496
    // for (let i: uint64 = 2; i < 6; i++) {
    intc_3 // 1
    +
    bury 9
    b main_while_top@11

main_after_while@13:
    // contracts/plonk_bls12381.algo.ts:504
    // td = op.concat(td, proof.Wxi);
    dig 4
    dup
    intc 9 // 672
    intc_0 // 96
    extract3
    dup
    cover 2
    bury 21
    // contracts/plonk_bls12381.algo.ts:505
    // td = op.concat(td, proof.Wxiw);
    intc 10 // 768
    intc_0 // 96
    extract3
    dup
    bury 26
    concat
    dup
    bury 18
    // contracts/plonk_bls12381.algo.ts:506
    // const u = getChallenge(td);
    callsub getChallenge
    // contracts/plonk_bls12381.algo.ts:508-517
    // return {
    //   beta,
    //   gamma,
    //   alpha,
    //   xi,
    //   v,
    //   u,
    //   xin: new Uint256(),
    //   zh: new Uint256(),
    // };
    dig 18
    dig 36
    concat
    dig 14
    concat
    dig 17
    concat
    swap
    concat
    pushbytes 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
    concat
    dup
    bury 31
    // contracts/plonk_bls12381.algo.ts:528
    // let xin = challenges.xi.native;
    extract 96 32
    bury 12
    // contracts/plonk_bls12381.algo.ts:531
    // let domainSize: uint64 = 1;
    intc_3 // 1
    bury 10
    // contracts/plonk_bls12381.algo.ts:532
    // for (let i: uint64 = 0; i < vk.power; i++) {
    intc_2 // 0
    bury 9

main_while_top@14:
    // contracts/plonk_bls12381.algo.ts:532
    // for (let i: uint64 = 0; i < vk.power; i++) {
    dig 14
    intc 10 // 768
    extract_uint64
    dig 9
    >
    bz main_after_while@16
    // contracts/plonk_bls12381.algo.ts:64
    // return (a * b) % BLS12_381_SCALAR_MODULUS;
    dig 11
    dup
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    bury 12
    // contracts/plonk_bls12381.algo.ts:534
    // domainSize *= 2;
    dig 9
    pushint 2 // 2
    *
    bury 10
    // contracts/plonk_bls12381.algo.ts:532
    // for (let i: uint64 = 0; i < vk.power; i++) {
    dig 8
    intc_3 // 1
    +
    bury 9
    b main_while_top@14

main_after_while@16:
    // contracts/plonk_bls12381.algo.ts:537
    // challenges.xin = new Uint256(xin);
    dig 11
    dup
    len
    intc_1 // 32
    <=
    assert // overflow
    intc_1 // 32
    bzero
    dup
    bury 50
    dup2
    b|
    dig 32
    pushint 352 // 352
    uncover 2
    replace3
    // contracts/plonk_bls12381.algo.ts:538
    // challenges.zh = new Uint256(frSub(xin, BigUint(1))); // Vanishing polynomial Z_H(ξ) = ξ^n - 1
    uncover 2
    bytec_2 // 0x01
    callsub frSub
    dup
    len
    intc_1 // 32
    <=
    assert // overflow
    uncover 2
    b|
    intc 4 // 384
    swap
    replace3
    bury 30
    // contracts/plonk_bls12381.algo.ts:540
    // const n = frScalar(BigUint(domainSize));
    dig 9
    itob
    // contracts/plonk_bls12381.algo.ts:158
    // return a % BLS12_381_SCALAR_MODULUS;
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    bury 25
    // contracts/plonk_bls12381.algo.ts:546
    // let w = BigUint(1);
    bytec_2 // 0x01
    bury 14
    // contracts/plonk_bls12381.algo.ts:555
    // const L: Uint256[] = [new Uint256()];
    pushbytes 0x00010000000000000000000000000000000000000000000000000000000000000000
    bury 50
    // contracts/plonk_bls12381.algo.ts:558
    // const iterations: uint64 = vk.nPublic === 0 ? 1 : vk.nPublic;
    dig 14
    intc 17 // 776
    extract_uint64
    dup
    bury 7
    bnz main_ternary_false@18
    intc_3 // 1
    bury 8

main_ternary_merge@19:
    // contracts/plonk_bls12381.algo.ts:559
    // for (let i: uint64 = 1; i <= iterations; i++) {
    intc_3 // 1
    bury 7

main_while_top@20:
    // contracts/plonk_bls12381.algo.ts:559
    // for (let i: uint64 = 1; i <= iterations; i++) {
    dig 6
    dig 8
    <=
    bz main_after_while@22
    // contracts/plonk_bls12381.algo.ts:563
    // frMul(w, challenges.zh.native),
    dig 29
    dup
    intc 4 // 384
    intc_1 // 32
    extract3
    // contracts/plonk_bls12381.algo.ts:64
    // return (a * b) % BLS12_381_SCALAR_MODULUS;
    dig 15
    dup
    uncover 2
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:564
    // frMul(n, frSub(challenges.xi.native, w)),
    uncover 2
    extract 96 32
    uncover 2
    callsub frSub
    // contracts/plonk_bls12381.algo.ts:64
    // return (a * b) % BLS12_381_SCALAR_MODULUS;
    dig 26
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:158
    // return a % BLS12_381_SCALAR_MODULUS;
    swap
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    bury 50
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:111
    // assert(x !== (0n as biguint), "Fr inverse of zero");
    dup
    bytec_1 // 0x
    b!=
    assert // Fr inverse of zero
    // contracts/plonk_bls12381.algo.ts:112
    // const inv = modPow(x, BLS12_381_R_MINUS_2, r);
    pushbytes 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfefffffffeffffffff
    // contracts/plonk_bls12381.algo.ts:90
    // let result = 1n as biguint;
    bytec_2 // 0x01
    bury 24
    // contracts/plonk_bls12381.algo.ts:91
    // let b: biguint = base % mod;
    swap
    // contracts/plonk_bls12381.algo.ts:112
    // const inv = modPow(x, BLS12_381_R_MINUS_2, r);
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    // contracts/plonk_bls12381.algo.ts:91
    // let b: biguint = base % mod;
    b%
    bury 35
    bury 29

main_while_top@29:
    // contracts/plonk_bls12381.algo.ts:93
    // while (e > (0n as biguint)) {
    dig 28
    bytec_1 // 0x
    b>
    // contracts/plonk_bls12381.algo.ts:93-99
    // while (e > (0n as biguint)) {
    //   if ((e & (1n as biguint)) !== (0n as biguint)) {
    //     result = (result * b) % mod;
    //   }
    //   b = (b * b) % mod;
    //   e = e / BigUint(2);
    // }
    bz main_after_while@33
    // contracts/plonk_bls12381.algo.ts:94
    // if ((e & (1n as biguint)) !== (0n as biguint)) {
    dig 28
    bytec_2 // 0x01
    b&
    bytec_1 // 0x
    b!=
    dig 22
    bury 22
    bz main_after_if_else@32
    // contracts/plonk_bls12381.algo.ts:95
    // result = (result * b) % mod;
    dig 21
    dig 34
    b*
    // contracts/plonk_bls12381.algo.ts:112
    // const inv = modPow(x, BLS12_381_R_MINUS_2, r);
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    // contracts/plonk_bls12381.algo.ts:95
    // result = (result * b) % mod;
    b%
    bury 21

main_after_if_else@32:
    dig 20
    bury 22
    // contracts/plonk_bls12381.algo.ts:97
    // b = (b * b) % mod;
    dig 33
    dup
    b*
    // contracts/plonk_bls12381.algo.ts:112
    // const inv = modPow(x, BLS12_381_R_MINUS_2, r);
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    // contracts/plonk_bls12381.algo.ts:97
    // b = (b * b) % mod;
    b%
    bury 34
    // contracts/plonk_bls12381.algo.ts:98
    // e = e / BigUint(2);
    dig 28
    pushbytes 0x02
    b/
    bury 29
    b main_while_top@29

main_after_while@33:
    // contracts/plonk_bls12381.algo.ts:125
    // return (aN * bInv) % r;
    dig 48
    dig 22
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:561-566
    // new Uint256(
    //   frDiv(
    //     frMul(w, challenges.zh.native),
    //     frMul(n, frSub(challenges.xi.native, w)),
    //   ),
    // ),
    dup
    len
    intc_1 // 32
    <=
    assert // overflow
    dig 48
    b|
    // contracts/plonk_bls12381.algo.ts:560-567
    // L.push(
    //   new Uint256(
    //     frDiv(
    //       frMul(w, challenges.zh.native),
    //       frMul(n, frSub(challenges.xi.native, w)),
    //     ),
    //   ),
    // );
    dig 50
    dup
    uncover 2
    concat // on error: max array length exceeded
    swap
    intc_2 // 0
    extract_uint16
    intc_3 // 1
    +
    itob
    extract 6 2
    replace2 0
    bury 50
    // contracts/plonk_bls12381.algo.ts:64
    // return (a * b) % BLS12_381_SCALAR_MODULUS;
    dig 13
    // contracts/plonk_bls12381.algo.ts:568
    // w = frMul(w, ROOT_OF_UNITY); // Next root of unity step (ω^i)
    bytec_3 // TMPL_ROOT_OF_UNITY
    // contracts/plonk_bls12381.algo.ts:64
    // return (a * b) % BLS12_381_SCALAR_MODULUS;
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    bury 14
    // contracts/plonk_bls12381.algo.ts:559
    // for (let i: uint64 = 1; i <= iterations; i++) {
    dig 6
    intc_3 // 1
    +
    bury 7
    b main_while_top@20

main_after_while@22:
    // contracts/plonk_bls12381.algo.ts:570
    // return { L, challenges };
    pushbytes 0x01a2
    dig 30
    concat
    dig 50
    concat
    bury 47
    // contracts/plonk_bls12381.algo.ts:580
    // let pi = BigUint(0);
    bytec_1 // 0x
    bury 23
    // contracts/plonk_bls12381.algo.ts:581
    // for (let i: uint64 = 0; i < publicSignals.length; i++) {
    intc_2 // 0
    bury 9

main_while_top@23:
    // contracts/plonk_bls12381.algo.ts:581
    // for (let i: uint64 = 0; i < publicSignals.length; i++) {
    dig 8
    dig 11
    <
    bz main_after_while@25
    // contracts/plonk_bls12381.algo.ts:582
    // const w = frScalar((publicSignals[i] as Uint256).native);
    dig 2
    extract 2 0
    dig 9
    dup
    cover 2
    intc_1 // 32
    *
    intc_1 // 32
    extract3 // on error: index access is out of bounds
    // contracts/plonk_bls12381.algo.ts:158
    // return a % BLS12_381_SCALAR_MODULUS;
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:583
    // pi = frSub(pi, frMul(w, (L[i + 1] as Uint256).native));
    swap
    intc_3 // 1
    +
    dup
    bury 11
    dig 48
    dup
    intc_2 // 0
    extract_uint16
    dig 1
    len
    substring3
    extract 2 0
    swap
    intc_1 // 32
    *
    intc_1 // 32
    extract3 // on error: index access is out of bounds
    // contracts/plonk_bls12381.algo.ts:64
    // return (a * b) % BLS12_381_SCALAR_MODULUS;
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:583
    // pi = frSub(pi, frMul(w, (L[i + 1] as Uint256).native));
    dig 23
    swap
    callsub frSub
    bury 23
    b main_while_top@23

main_after_while@25:
    // contracts/plonk_bls12381.algo.ts:585
    // return new Uint256(pi);
    dig 22
    dup
    len
    intc_1 // 32
    <=
    assert // overflow
    dig 48
    dup
    cover 2
    b|
    // contracts/plonk_bls12381.algo.ts:356
    // const r0 = calculateR0(proof, challenges, pi, L[1] as Uint256);
    dig 48
    dup
    intc_2 // 0
    extract_uint16
    dig 1
    len
    dig 2
    cover 2
    substring3
    extract 34 32
    // contracts/plonk_bls12381.algo.ts:606
    // frMul(challenges.alpha.native, challenges.alpha.native),
    swap
    pushints 2 416 // 2, 416
    extract3
    dup
    extract 64 32
    // contracts/plonk_bls12381.algo.ts:64
    // return (a * b) % BLS12_381_SCALAR_MODULUS;
    dup
    dig 1
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    uncover 3
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:613
    // frMul(challenges.beta.native, proof.eval_s1.native),
    dig 2
    extract 0 32
    // contracts/plonk_bls12381.algo.ts:64
    // return (a * b) % BLS12_381_SCALAR_MODULUS;
    dup
    dig 37
    dup
    cover 8
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:147
    // const aN: biguint = a % r;
    dig 35
    dup
    cover 6
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:148
    // const bN: biguint = b % r;
    swap
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:149
    // return (aN + bN) % r;
    dig 1
    b+
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:615
    // e3a = frAdd(e3a, challenges.gamma.native);
    dig 5
    extract 32 32
    // contracts/plonk_bls12381.algo.ts:147
    // const aN: biguint = a % r;
    swap
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:148
    // const bN: biguint = b % r;
    swap
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:149
    // return (aN + bN) % r;
    swap
    dig 1
    b+
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:64
    // return (a * b) % BLS12_381_SCALAR_MODULUS;
    dig 3
    dig 44
    dup
    cover 12
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:147
    // const aN: biguint = a % r;
    dig 39
    dup
    cover 4
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:148
    // const bN: biguint = b % r;
    swap
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:149
    // return (aN + bN) % r;
    dig 1
    b+
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:147
    // const aN: biguint = a % r;
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:149
    // return (aN + bN) % r;
    dig 3
    b+
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:147
    // const aN: biguint = a % r;
    dig 40
    dup
    cover 14
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:149
    // return (aN + bN) % r;
    dup
    dig 5
    b+
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:64
    // return (a * b) % BLS12_381_SCALAR_MODULUS;
    uncover 4
    uncover 3
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    dup
    uncover 2
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    dig 48
    dup
    cover 14
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    dig 9
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:630
    // const r0 = frSub(frSub(e1, e2), e3);
    uncover 12
    dig 9
    callsub frSub
    swap
    callsub frSub
    // contracts/plonk_bls12381.algo.ts:631
    // return new Uint256(r0);
    dup
    len
    intc_1 // 32
    <=
    assert // overflow
    uncover 13
    b|
    // contracts/plonk_bls12381.algo.ts:657
    // points = op.concat(points, proof.T1);
    dig 35
    dig 60
    concat
    // contracts/plonk_bls12381.algo.ts:658
    // points = op.concat(points, proof.T2);
    dig 59
    concat
    // contracts/plonk_bls12381.algo.ts:659
    // points = op.concat(points, proof.T3);
    dig 58
    concat
    // contracts/plonk_bls12381.algo.ts:660
    // points = op.concat(points, vk.Qc);
    dig 57
    concat
    // contracts/plonk_bls12381.algo.ts:64
    // return (a * b) % BLS12_381_SCALAR_MODULUS;
    dig 12
    dig 7
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:669
    // const quotientScalar1 = frSub(BigUint(0), challenges.zh.native); // -T1*zh
    dig 12
    intc 4 // 384
    intc_1 // 32
    extract3
    bytec_1 // 0x
    dig 1
    callsub frSub
    // contracts/plonk_bls12381.algo.ts:672
    // frMul(challenges.xin.native, challenges.zh.native),
    dig 14
    pushint 352 // 352
    intc_1 // 32
    extract3
    // contracts/plonk_bls12381.algo.ts:64
    // return (a * b) % BLS12_381_SCALAR_MODULUS;
    dup
    dig 3
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:671
    // BigUint(0),
    bytec_1 // 0x
    // contracts/plonk_bls12381.algo.ts:670-673
    // const quotientScalar2 = frSub(
    //   BigUint(0),
    //   frMul(challenges.xin.native, challenges.zh.native),
    // ); // -T2*xin*zh
    swap
    callsub frSub
    // contracts/plonk_bls12381.algo.ts:64
    // return (a * b) % BLS12_381_SCALAR_MODULUS;
    dig 1
    uncover 2
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    uncover 3
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:675
    // BigUint(0),
    bytec_1 // 0x
    // contracts/plonk_bls12381.algo.ts:674-680
    // const quotientScalar3 = frSub(
    //   BigUint(0),
    //   frMul(
    //     frMul(challenges.xin.native, challenges.xin.native),
    //     challenges.zh.native,
    //   ),
    // ); // -T3*xin²*zh
    swap
    callsub frSub
    // contracts/plonk_bls12381.algo.ts:683
    // const betaxi = frMul(challenges.beta.native, challenges.xi.native);
    dig 15
    extract 96 32
    // contracts/plonk_bls12381.algo.ts:64
    // return (a * b) % BLS12_381_SCALAR_MODULUS;
    dig 13
    dig 1
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:148
    // const bN: biguint = b % r;
    dup
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:149
    // return (aN + bN) % r;
    uncover 14
    b+
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:147
    // const aN: biguint = a % r;
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:149
    // return (aN + bN) % r;
    dig 12
    b+
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:689
    // frAdd(proof.eval_b.native, frMul(betaxi, BigUint(vk.k1))),
    dig 37
    dup
    cover 3
    intc 18 // 784
    pushint 8 // 8
    extract3
    // contracts/plonk_bls12381.algo.ts:64
    // return (a * b) % BLS12_381_SCALAR_MODULUS;
    dig 2
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:148
    // const bN: biguint = b % r;
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:149
    // return (aN + bN) % r;
    uncover 13
    b+
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:147
    // const aN: biguint = a % r;
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:149
    // return (aN + bN) % r;
    dig 13
    b+
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:693
    // frAdd(proof.eval_c.native, frMul(betaxi, BigUint(vk.k2))),
    dig 3
    intc 19 // 792
    pushint 8 // 8
    extract3
    // contracts/plonk_bls12381.algo.ts:64
    // return (a * b) % BLS12_381_SCALAR_MODULUS;
    uncover 3
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:148
    // const bN: biguint = b % r;
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:149
    // return (aN + bN) % r;
    uncover 12
    b+
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:147
    // const aN: biguint = a % r;
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:149
    // return (aN + bN) % r;
    uncover 12
    b+
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:64
    // return (a * b) % BLS12_381_SCALAR_MODULUS;
    cover 2
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    dig 13
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:147
    // const aN: biguint = a % r;
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:148
    // const bN: biguint = b % r;
    uncover 12
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:149
    // return (aN + bN) % r;
    b+
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:701
    // const zScalar = frAdd(frAdd(d2a, d2b), challenges.u.native);
    dig 13
    pushint 320 // 320
    intc_1 // 32
    extract3
    // contracts/plonk_bls12381.algo.ts:147
    // const aN: biguint = a % r;
    swap
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:148
    // const bN: biguint = b % r;
    dig 1
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:149
    // return (aN + bN) % r;
    b+
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:64
    // return (a * b) % BLS12_381_SCALAR_MODULUS;
    uncover 13
    uncover 13
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    dig 15
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    uncover 11
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:725
    // points = op.concat(points, proof.Z);
    uncover 9
    dig 62
    concat
    // contracts/plonk_bls12381.algo.ts:726
    // points = op.concat(points, vk.S3);
    dig 55
    concat
    // contracts/plonk_bls12381.algo.ts:727
    // points = op.concat(points, proof.A);
    dig 54
    concat
    // contracts/plonk_bls12381.algo.ts:728
    // points = op.concat(points, proof.B);
    dig 53
    concat
    // contracts/plonk_bls12381.algo.ts:729
    // points = op.concat(points, proof.C);
    dig 63
    concat
    // contracts/plonk_bls12381.algo.ts:730
    // points = op.concat(points, vk.S1);
    dig 57
    concat
    // contracts/plonk_bls12381.algo.ts:731
    // points = op.concat(points, vk.S2);
    dig 56
    concat
    // contracts/plonk_bls12381.algo.ts:734
    // let scalars = op.concat(b32(gateScalar1), b32(gateScalar2));
    uncover 9
    callsub b32
    dig 13
    callsub b32
    concat
    // contracts/plonk_bls12381.algo.ts:735
    // scalars = op.concat(scalars, b32(gateScalar3));
    dig 11
    callsub b32
    concat
    // contracts/plonk_bls12381.algo.ts:736
    // scalars = op.concat(scalars, b32(gateScalar4));
    dig 15
    callsub b32
    concat
    // contracts/plonk_bls12381.algo.ts:737
    // scalars = op.concat(scalars, b32(quotientScalar1));
    uncover 9
    callsub b32
    concat
    // contracts/plonk_bls12381.algo.ts:738
    // scalars = op.concat(scalars, b32(quotientScalar2));
    uncover 8
    callsub b32
    concat
    // contracts/plonk_bls12381.algo.ts:739
    // scalars = op.concat(scalars, b32(quotientScalar3));
    uncover 7
    callsub b32
    concat
    // contracts/plonk_bls12381.algo.ts:740
    // scalars = op.concat(scalars, b32(BigUint(1))); // Qc with scalar 1
    bytec_2 // 0x01
    callsub b32
    concat
    // contracts/plonk_bls12381.algo.ts:741
    // scalars = op.concat(scalars, b32(zScalar)); // Z with zScalar
    uncover 3
    callsub b32
    concat
    // contracts/plonk_bls12381.algo.ts:742
    // scalars = op.concat(scalars, b32(frSub(BigUint(0), s3Scalar))); // S3 with -s3Scalar
    bytec_1 // 0x
    uncover 3
    callsub frSub
    callsub b32
    concat
    // contracts/plonk_bls12381.algo.ts:743
    // scalars = op.concat(scalars, (challenges.v[1] as Uint256).bytes);
    uncover 7
    extract 128 192
    dup
    extract 32 32 // on error: index access is out of bounds
    uncover 2
    dig 1
    concat
    // contracts/plonk_bls12381.algo.ts:743-744
    // scalars = op.concat(scalars, (challenges.v[1] as Uint256).bytes);
    // scalars = op.concat(scalars, (challenges.v[2] as Uint256).bytes);
    dig 2
    extract 64 32 // on error: index access is out of bounds
    // contracts/plonk_bls12381.algo.ts:744
    // scalars = op.concat(scalars, (challenges.v[2] as Uint256).bytes);
    swap
    dig 1
    concat
    // contracts/plonk_bls12381.algo.ts:745
    // scalars = op.concat(scalars, (challenges.v[3] as Uint256).bytes);
    dig 3
    extract 96 32 // on error: index access is out of bounds
    swap
    dig 1
    concat
    // contracts/plonk_bls12381.algo.ts:746
    // scalars = op.concat(scalars, (challenges.v[4] as Uint256).bytes);
    dig 4
    extract 128 32 // on error: index access is out of bounds
    swap
    dig 1
    concat
    // contracts/plonk_bls12381.algo.ts:747
    // scalars = op.concat(scalars, (challenges.v[5] as Uint256).bytes);
    uncover 5
    extract 160 32 // on error: index access is out of bounds
    swap
    dig 1
    concat
    // contracts/plonk_bls12381.algo.ts:750-754
    // const F = op.EllipticCurve.scalarMulMulti(
    //   op.Ec.BLS12_381g1,
    //   points,
    //   scalars,
    // ).toFixed({ length: 96 });
    uncover 6
    swap
    ec_multi_scalar_mul BLS12_381g1
    dup
    len
    intc_0 // 96
    ==
    assert // Length must be 96
    // contracts/plonk_bls12381.algo.ts:64
    // return (a * b) % BLS12_381_SCALAR_MODULUS;
    uncover 5
    uncover 11
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:770-773
    // let e = frSub(
    //   frMul((challenges.v[1] as Uint256).native, proof.eval_a.native),
    //   r0.native,
    // );
    uncover 9
    callsub frSub
    // contracts/plonk_bls12381.algo.ts:64
    // return (a * b) % BLS12_381_SCALAR_MODULUS;
    uncover 5
    uncover 9
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:147
    // const aN: biguint = a % r;
    swap
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:148
    // const bN: biguint = b % r;
    swap
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:149
    // return (aN + bN) % r;
    b+
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:64
    // return (a * b) % BLS12_381_SCALAR_MODULUS;
    uncover 4
    uncover 9
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:147
    // const aN: biguint = a % r;
    swap
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:148
    // const bN: biguint = b % r;
    swap
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:149
    // return (aN + bN) % r;
    b+
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:64
    // return (a * b) % BLS12_381_SCALAR_MODULUS;
    uncover 3
    uncover 9
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:147
    // const aN: biguint = a % r;
    swap
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:148
    // const bN: biguint = b % r;
    swap
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:149
    // return (aN + bN) % r;
    b+
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:64
    // return (a * b) % BLS12_381_SCALAR_MODULUS;
    uncover 2
    uncover 7
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:147
    // const aN: biguint = a % r;
    swap
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:148
    // const bN: biguint = b % r;
    swap
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:149
    // return (aN + bN) % r;
    b+
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:64
    // return (a * b) % BLS12_381_SCALAR_MODULUS;
    dig 2
    uncover 6
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:147
    // const aN: biguint = a % r;
    swap
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:148
    // const bN: biguint = b % r;
    swap
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:149
    // return (aN + bN) % r;
    b+
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:786
    // const res = g1TimesFr(G1_ONE.toFixed({ length: 96 }), e);
    pushbytes 0x17f1d3a73197d7942695638c4fa9ac0fc3688c4f9774b905a14e3a3f171bac586c55e83ff97a1aeffb3af00adb22c6bb08b3f481e3aaa0f1a09e30ed741d8ae4fcf5e095d5d00af600db18cb2c04b3edd03cc744a2888ae40caa232946c5e7e1
    // contracts/plonk_bls12381.algo.ts:223
    // return op.EllipticCurve.scalarMul(op.Ec.BLS12_381g1, p, Bytes(s)).toFixed({
    swap
    ec_scalar_mul BLS12_381g1
    // contracts/plonk_bls12381.algo.ts:223-225
    // return op.EllipticCurve.scalarMul(op.Ec.BLS12_381g1, p, Bytes(s)).toFixed({
    //   length: 96,
    // });
    dup
    len
    intc_0 // 96
    ==
    assert // Length must be 96
    // contracts/plonk_bls12381.algo.ts:223
    // return op.EllipticCurve.scalarMul(op.Ec.BLS12_381g1, p, Bytes(s)).toFixed({
    dig 28
    dig 3
    ec_scalar_mul BLS12_381g1
    // contracts/plonk_bls12381.algo.ts:223-225
    // return op.EllipticCurve.scalarMul(op.Ec.BLS12_381g1, p, Bytes(s)).toFixed({
    //   length: 96,
    // });
    dup
    len
    intc_0 // 96
    ==
    assert // Length must be 96
    // contracts/plonk_bls12381.algo.ts:234
    // return op.EllipticCurve.add(op.Ec.BLS12_381g1, p1, p2).toFixed({
    dig 24
    swap
    ec_add BLS12_381g1
    // contracts/plonk_bls12381.algo.ts:234-236
    // return op.EllipticCurve.add(op.Ec.BLS12_381g1, p1, p2).toFixed({
    //   length: 96,
    // });
    dup
    len
    intc_0 // 96
    ==
    assert // Length must be 96
    // contracts/plonk_bls12381.algo.ts:64
    // return (a * b) % BLS12_381_SCALAR_MODULUS;
    uncover 3
    dig 5
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:818
    // ROOT_OF_UNITY,
    bytec_3 // TMPL_ROOT_OF_UNITY
    // contracts/plonk_bls12381.algo.ts:64
    // return (a * b) % BLS12_381_SCALAR_MODULUS;
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:820
    // const pairingScalars = op.concat(challenges.xi.bytes, b32(s));
    callsub b32
    uncover 5
    swap
    concat
    // contracts/plonk_bls12381.algo.ts:822-826
    // let B1 = op.EllipticCurve.scalarMulMulti(
    //   op.Ec.BLS12_381g1,
    //   pairingPoints,
    //   pairingScalars,
    // ).toFixed({ length: 96 });
    dig 21
    swap
    ec_multi_scalar_mul BLS12_381g1
    dup
    len
    intc_0 // 96
    ==
    assert // Length must be 96
    // contracts/plonk_bls12381.algo.ts:234
    // return op.EllipticCurve.add(op.Ec.BLS12_381g1, p1, p2).toFixed({
    uncover 3
    ec_add BLS12_381g1
    // contracts/plonk_bls12381.algo.ts:234-236
    // return op.EllipticCurve.add(op.Ec.BLS12_381g1, p1, p2).toFixed({
    //   length: 96,
    // });
    dup
    len
    intc_0 // 96
    ==
    assert // Length must be 96
    // contracts/plonk_bls12381.algo.ts:223
    // return op.EllipticCurve.scalarMul(op.Ec.BLS12_381g1, p, Bytes(s)).toFixed({
    uncover 2
    // contracts/plonk_bls12381.algo.ts:245
    // return g1TimesFr(p, R_MINUS_1);
    bytec 4 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000000
    // contracts/plonk_bls12381.algo.ts:223
    // return op.EllipticCurve.scalarMul(op.Ec.BLS12_381g1, p, Bytes(s)).toFixed({
    ec_scalar_mul BLS12_381g1
    // contracts/plonk_bls12381.algo.ts:223-225
    // return op.EllipticCurve.scalarMul(op.Ec.BLS12_381g1, p, Bytes(s)).toFixed({
    //   length: 96,
    // });
    dup
    len
    intc_0 // 96
    ==
    assert // Length must be 96
    // contracts/plonk_bls12381.algo.ts:234
    // return op.EllipticCurve.add(op.Ec.BLS12_381g1, p1, p2).toFixed({
    ec_add BLS12_381g1
    // contracts/plonk_bls12381.algo.ts:234-236
    // return op.EllipticCurve.add(op.Ec.BLS12_381g1, p1, p2).toFixed({
    //   length: 96,
    // });
    dup
    len
    intc_0 // 96
    ==
    assert // Length must be 96
    // contracts/plonk_bls12381.algo.ts:223
    // return op.EllipticCurve.scalarMul(op.Ec.BLS12_381g1, p, Bytes(s)).toFixed({
    swap
    // contracts/plonk_bls12381.algo.ts:245
    // return g1TimesFr(p, R_MINUS_1);
    bytec 4 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000000
    // contracts/plonk_bls12381.algo.ts:223
    // return op.EllipticCurve.scalarMul(op.Ec.BLS12_381g1, p, Bytes(s)).toFixed({
    ec_scalar_mul BLS12_381g1
    // contracts/plonk_bls12381.algo.ts:223-225
    // return op.EllipticCurve.scalarMul(op.Ec.BLS12_381g1, p, Bytes(s)).toFixed({
    //   length: 96,
    // });
    dup
    len
    intc_0 // 96
    ==
    assert // Length must be 96
    // contracts/plonk_bls12381.algo.ts:833
    // op.concat(g1Neg(A1), B1), // G1 points
    swap
    concat
    // contracts/plonk_bls12381.algo.ts:834
    // op.concat(vk.X_2, G2_ONE), // G2 points
    swap
    intc 20 // 800
    intc 5 // 192
    extract3
    pushbytes 0x024aa2b2f08f0a91260805272dc51051c6e47ad4fa403b02b4510b647ae3d1770bac0326a805bbefd48056c8c121bdb813e02b6052719f607dacd3a088274f65596bd0d09920b61ab5da61bbdc7f5049334cf11213945d57e5ac7d055d042b7e0ce5d527727d6e118cc9cdc6da2e351aadfd9baa8cbdd3a76d429a695160d12c923ac9cc3baca289e193548608b828010606c4a02ea734cc32acd2b02bc28b99cb3e287e85a763af267492ab572e99ab3f370d275cec1da1aaa9075ff05f79be
    concat
    // contracts/plonk_bls12381.algo.ts:831-835
    // const res = op.EllipticCurve.pairingCheck(
    //   op.Ec.BLS12_381g1,
    //   op.concat(g1Neg(A1), B1), // G1 points
    //   op.concat(vk.X_2, G2_ONE), // G2 points
    // );
    ec_pairing_check BLS12_381g1
    // contracts/verifier.algo.ts:95
    // assert(verifyFromTemplate(signals, proof), "Verification failed");
    assert // Verification failed
    // contracts/verifier.algo.ts:97
    // return true;
    intc_3 // 1
    return

main_ternary_false@18:
    dig 5
    bury 8
    b main_ternary_merge@19


// contracts/plonk_bls12381.algo.ts::frSub(a: bytes, b: bytes) -> bytes:
frSub:
    // contracts/plonk_bls12381.algo.ts:133
    // function frSub(a: biguint, b: biguint): biguint {
    proto 2 1
    // contracts/plonk_bls12381.algo.ts:135
    // const aN: biguint = a % r;
    frame_dig -2
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:136
    // const bN: biguint = b % r;
    frame_dig -1
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:137
    // return (aN + r - bN) % r;
    swap
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b+
    swap
    b-
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    retsub


// contracts/plonk_bls12381.algo.ts::b32(a: bytes) -> bytes:
b32:
    // contracts/plonk_bls12381.algo.ts:165
    // function b32(a: biguint): bytes<32> {
    proto 1 1
    // contracts/plonk_bls12381.algo.ts:166
    // return new Uint256(a).bytes.toFixed({ length: 32 });
    frame_dig -1
    len
    intc_1 // 32
    <=
    assert // overflow
    intc_1 // 32
    bzero
    frame_dig -1
    b|
    dup
    len
    intc_1 // 32
    ==
    assert // Length must be 32
    retsub


// contracts/plonk_bls12381.algo.ts::getChallenge(td: bytes) -> bytes:
getChallenge:
    // contracts/plonk_bls12381.algo.ts:422
    // export function getChallenge(td: bytes): Uint256 {
    proto 1 1
    // contracts/plonk_bls12381.algo.ts:423
    // let hash = op.keccak256(td);
    frame_dig -1
    keccak256
    // contracts/plonk_bls12381.algo.ts:158
    // return a % BLS12_381_SCALAR_MODULUS;
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/plonk_bls12381.algo.ts:424
    // return new Uint256(frScalar(BigUint(hash)));
    dup
    len
    intc_1 // 32
    <=
    assert // overflow
    intc_1 // 32
    bzero
    b|
    retsub
