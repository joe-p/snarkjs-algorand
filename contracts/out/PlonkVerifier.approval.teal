#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 32 1 96 0 384
    bytecblock 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001 0x 0x01 0x151f7c75
    // contracts/verifier.algo.ts:131
    // export class PlonkVerifier extends Contract {
    txn NumAppArgs
    bz main_bare_routing@8
    pushbytess 0x1d2ce80d 0x03aade66 0x055f06d6 // method "verify((byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64,byte[32]),byte[32][],(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[32],byte[32],byte[32],byte[32],byte[32],byte[32]))bool", method "computeChallenges((byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64,byte[32]),byte[32][],(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[32],byte[32],byte[32],byte[32],byte[32],byte[32]))(byte[32],byte[32],byte[32],byte[32],byte[32][6],byte[32],byte[32],byte[32])", method "calculateLagrangeEvaluations((byte[32],byte[32],byte[32],byte[32],byte[32][6],byte[32],byte[32],byte[32]),(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64,byte[32]))(byte[32][],(byte[32],byte[32],byte[32],byte[32],byte[32][6],byte[32],byte[32],byte[32]))"
    txna ApplicationArgs 0
    match main_verify_route@3 main_computeChallenges_route@4 main_calculateLagrangeEvaluations_route@5

main_after_if_else@12:
    // contracts/verifier.algo.ts:131
    // export class PlonkVerifier extends Contract {
    intc_3 // 0
    return

main_calculateLagrangeEvaluations_route@5:
    // contracts/verifier.algo.ts:239-242
    // calculateLagrangeEvaluations(
    //   challengesInput: Challenges,
    //   vk: VerificationKey,
    // ): { L: bytes<32>[]; challenges: Challenges } {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // contracts/verifier.algo.ts:131
    // export class PlonkVerifier extends Contract {
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    // contracts/verifier.algo.ts:239-242
    // calculateLagrangeEvaluations(
    //   challengesInput: Challenges,
    //   vk: VerificationKey,
    // ): { L: bytes<32>[]; challenges: Challenges } {
    callsub calculateLagrangeEvaluations
    bytec_3 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_computeChallenges_route@4:
    // contracts/verifier.algo.ts:150-154
    // computeChallenges(
    //   vk: VerificationKey,
    //   signals: PublicSignals,
    //   proof: Proof,
    // ): Challenges {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // contracts/verifier.algo.ts:131
    // export class PlonkVerifier extends Contract {
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    // contracts/verifier.algo.ts:150-154
    // computeChallenges(
    //   vk: VerificationKey,
    //   signals: PublicSignals,
    //   proof: Proof,
    // ): Challenges {
    callsub computeChallenges
    popn 3
    bytec_3 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_verify_route@3:
    // contracts/verifier.algo.ts:132-136
    // public verify(
    //   vk: VerificationKey,
    //   signals: PublicSignals,
    //   proof: Proof,
    // ): boolean {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // contracts/verifier.algo.ts:131
    // export class PlonkVerifier extends Contract {
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    // contracts/verifier.algo.ts:132-136
    // public verify(
    //   vk: VerificationKey,
    //   signals: PublicSignals,
    //   proof: Proof,
    // ): boolean {
    callsub verify
    pushbytes 0x00
    intc_3 // 0
    uncover 2
    setbit
    bytec_3 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_bare_routing@8:
    // contracts/verifier.algo.ts:131
    // export class PlonkVerifier extends Contract {
    txn OnCompletion
    bnz main_after_if_else@12
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    return


// contracts/verifier.algo.ts::frSub(a: bytes, b: bytes) -> bytes:
frSub:
    // contracts/verifier.algo.ts:68
    // function frSub(a: biguint, b: biguint): biguint {
    proto 2 1
    // contracts/verifier.algo.ts:70
    // const aN: biguint = a % r;
    frame_dig -2
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:71
    // const bN: biguint = b % r;
    frame_dig -1
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:72
    // return (aN + r - bN) % r; // (a - b) mod r, guaranteed non-negative
    swap
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b+
    swap
    b-
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    retsub


// contracts/verifier.algo.ts::PlonkVerifier.verify(vk: bytes, signals: bytes, proof: bytes) -> uint64:
verify:
    // contracts/verifier.algo.ts:132-136
    // public verify(
    //   vk: VerificationKey,
    //   signals: PublicSignals,
    //   proof: Proof,
    // ): boolean {
    proto 3 1
    // contracts/verifier.algo.ts:138
    // const challenge = this.computeChallenges(vk, signals, proof);
    frame_dig -3
    frame_dig -2
    frame_dig -1
    callsub computeChallenges
    frame_bury -1
    frame_bury -2
    frame_bury -3
    // contracts/verifier.algo.ts:139
    // log(challenge.alpha);
    extract 64 32
    log
    // contracts/verifier.algo.ts:140
    // return true;
    intc_1 // 1
    retsub


// contracts/verifier.algo.ts::PlonkVerifier.getChallenge(td: bytes) -> bytes:
getChallenge:
    // contracts/verifier.algo.ts:143
    // private getChallenge(td: bytes): bytes<32> {
    proto 1 1
    // contracts/verifier.algo.ts:144
    // let hash = op.keccak256(td);
    frame_dig -1
    keccak256
    // contracts/verifier.algo.ts:145
    // return Bytes(BigUint(hash) % BLS12_381_SCALAR_MODULUS).toFixed({
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:145-147
    // return Bytes(BigUint(hash) % BLS12_381_SCALAR_MODULUS).toFixed({
    //   length: 32,
    // });
    dup
    len
    intc_0 // 32
    ==
    assert // Length must be 32
    retsub


// contracts/verifier.algo.ts::PlonkVerifier.computeChallenges(vk: bytes, signals: bytes, proof: bytes) -> bytes, bytes, bytes, bytes:
computeChallenges:
    // contracts/verifier.algo.ts:150-154
    // computeChallenges(
    //   vk: VerificationKey,
    //   signals: PublicSignals,
    //   proof: Proof,
    // ): Challenges {
    proto 3 4
    intc_3 // 0
    dupn 4
    bytec_1 // ""
    // contracts/verifier.algo.ts:158
    // let td = op.concat(vk.Qm, vk.Ql);
    frame_dig -3
    extract 0 96
    frame_dig -3
    extract 96 96
    concat
    // contracts/verifier.algo.ts:159
    // td = op.concat(td, vk.Qr);
    frame_dig -3
    extract 192 96
    concat
    // contracts/verifier.algo.ts:160
    // td = op.concat(td, vk.Qo);
    frame_dig -3
    pushint 288 // 288
    intc_2 // 96
    extract3
    concat
    // contracts/verifier.algo.ts:161
    // td = op.concat(td, vk.Qc);
    frame_dig -3
    intc 4 // 384
    intc_2 // 96
    extract3
    concat
    // contracts/verifier.algo.ts:162
    // td = op.concat(td, vk.S1);
    frame_dig -3
    pushint 480 // 480
    intc_2 // 96
    extract3
    concat
    // contracts/verifier.algo.ts:163
    // td = op.concat(td, vk.S2);
    frame_dig -3
    pushint 576 // 576
    intc_2 // 96
    extract3
    concat
    // contracts/verifier.algo.ts:164
    // td = op.concat(td, vk.S3);
    frame_dig -3
    pushint 672 // 672
    intc_2 // 96
    extract3
    concat
    // contracts/verifier.algo.ts:166
    // for (const signal of signals) {
    frame_dig -2
    intc_3 // 0
    extract_uint16
    intc_3 // 0

computeChallenges_for_header@1:
    // contracts/verifier.algo.ts:166
    // for (const signal of signals) {
    frame_dig 8
    frame_dig 7
    <
    bz computeChallenges_after_for@4
    frame_dig -2
    extract 2 0
    frame_dig 8
    dup
    cover 2
    intc_0 // 32
    *
    intc_0 // 32
    extract3 // on error: index access is out of bounds
    // contracts/verifier.algo.ts:77
    // return ((a % r) + r) % r; // ensures [0, r)
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b+
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:81
    // return Bytes(a).toFixed({ length: 32 });
    dup
    len
    intc_0 // 32
    ==
    assert // Length must be 32
    // contracts/verifier.algo.ts:167
    // td = op.concat(td, b32(frNorm(BigUint(signal))));
    frame_dig 6
    swap
    concat
    frame_bury 6
    intc_1 // 1
    +
    frame_bury 8
    b computeChallenges_for_header@1

computeChallenges_after_for@4:
    // contracts/verifier.algo.ts:170
    // td = op.concat(td, proof.A);
    frame_dig -1
    extract 0 96
    frame_dig 6
    swap
    concat
    // contracts/verifier.algo.ts:171
    // td = op.concat(td, proof.B);
    frame_dig -1
    extract 96 96
    concat
    // contracts/verifier.algo.ts:172
    // td = op.concat(td, proof.C);
    frame_dig -1
    extract 192 96
    concat
    // contracts/verifier.algo.ts:174
    // const beta = this.getChallenge(td);
    callsub getChallenge
    dup
    frame_bury 1
    // contracts/verifier.algo.ts:179
    // const gamma = this.getChallenge(td);
    dup
    callsub getChallenge
    dup
    frame_bury 2
    // contracts/verifier.algo.ts:186
    // td = op.concat(td, gamma);
    dig 1
    swap
    concat
    dup
    frame_bury 6
    // contracts/verifier.algo.ts:187
    // td = op.concat(td, proof.Z);
    frame_dig -1
    pushint 288 // 288
    intc_2 // 96
    extract3
    concat
    // contracts/verifier.algo.ts:188
    // const alpha = this.getChallenge(td);
    callsub getChallenge
    frame_bury 0
    // contracts/verifier.algo.ts:195
    // td = op.concat(td, proof.T1);
    frame_dig -1
    intc 4 // 384
    intc_2 // 96
    extract3
    concat
    // contracts/verifier.algo.ts:196
    // td = op.concat(td, proof.T2);
    frame_dig -1
    pushint 480 // 480
    intc_2 // 96
    extract3
    concat
    // contracts/verifier.algo.ts:197
    // td = op.concat(td, proof.T3);
    frame_dig -1
    pushint 576 // 576
    intc_2 // 96
    extract3
    concat
    // contracts/verifier.algo.ts:198
    // const xi = this.getChallenge(td);
    callsub getChallenge
    dup
    frame_bury 4
    // contracts/verifier.algo.ts:205
    // td = op.concat(td, proof.eval_a);
    frame_dig -1
    pushint 864 // 864
    intc_0 // 32
    extract3
    concat
    // contracts/verifier.algo.ts:206
    // td = op.concat(td, proof.eval_b);
    frame_dig -1
    pushint 896 // 896
    intc_0 // 32
    extract3
    concat
    // contracts/verifier.algo.ts:207
    // td = op.concat(td, proof.eval_c);
    frame_dig -1
    pushint 928 // 928
    intc_0 // 32
    extract3
    concat
    // contracts/verifier.algo.ts:208
    // td = op.concat(td, proof.eval_s1);
    frame_dig -1
    pushint 960 // 960
    intc_0 // 32
    extract3
    concat
    // contracts/verifier.algo.ts:209
    // td = op.concat(td, proof.eval_s2);
    frame_dig -1
    pushint 992 // 992
    intc_0 // 32
    extract3
    concat
    // contracts/verifier.algo.ts:210
    // td = op.concat(td, proof.eval_zw);
    frame_dig -1
    pushint 1024 // 1024
    intc_0 // 32
    extract3
    concat
    // contracts/verifier.algo.ts:212
    // const v = new FixedArray<bytes<32>, 6>();
    pushint 192 // 192
    bzero
    // contracts/verifier.algo.ts:213
    // v[1] = this.getChallenge(td);
    swap
    callsub getChallenge
    dup
    len
    intc_0 // 32
    ==
    assert // invalid size
    replace2 32
    frame_bury 3
    // contracts/verifier.algo.ts:215
    // for (let i: uint64 = 2; i < 6; i++) {
    pushint 2 // 2
    frame_bury 5

computeChallenges_while_top@5:
    // contracts/verifier.algo.ts:215
    // for (let i: uint64 = 2; i < 6; i++) {
    frame_dig 5
    pushint 6 // 6
    <
    bz computeChallenges_after_while@7
    // contracts/verifier.algo.ts:216
    // v[i] = b32(frMul(BigUint(v[i - 1] as bytes<32>), BigUint(v[1])));
    frame_dig 5
    dup
    intc_1 // 1
    -
    intc_0 // 32
    *
    frame_dig 3
    dup
    uncover 2
    intc_0 // 32
    extract3 // on error: index access is out of bounds
    dig 1
    extract 32 32 // on error: index access is out of bounds
    // contracts/verifier.algo.ts:30
    // return (a * b) % BLS12_381_SCALAR_MODULUS;
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:81
    // return Bytes(a).toFixed({ length: 32 });
    dup
    len
    intc_0 // 32
    ==
    assert // Length must be 32
    // contracts/verifier.algo.ts:216
    // v[i] = b32(frMul(BigUint(v[i - 1] as bytes<32>), BigUint(v[1])));
    dig 2
    intc_0 // 32
    *
    swap
    replace3
    frame_bury 3
    // contracts/verifier.algo.ts:215
    // for (let i: uint64 = 2; i < 6; i++) {
    intc_1 // 1
    +
    frame_bury 5
    b computeChallenges_while_top@5

computeChallenges_after_while@7:
    // contracts/verifier.algo.ts:223
    // td = op.concat(td, proof.Wxi);
    frame_dig -1
    pushint 672 // 672
    intc_2 // 96
    extract3
    // contracts/verifier.algo.ts:224
    // td = op.concat(td, proof.Wxiw);
    frame_dig -1
    pushint 768 // 768
    intc_2 // 96
    extract3
    concat
    // contracts/verifier.algo.ts:225
    // const u = this.getChallenge(td);
    callsub getChallenge
    // contracts/verifier.algo.ts:227-236
    // return {
    //   beta,
    //   gamma,
    //   alpha,
    //   xi,
    //   v,
    //   u,
    //   xin: Bytes<32>(),
    //   zh: Bytes<32>(),
    // };
    frame_dig 1
    len
    intc_0 // 32
    ==
    assert // invalid size
    frame_dig 2
    len
    intc_0 // 32
    ==
    assert // invalid size
    frame_dig 0
    dup
    len
    intc_0 // 32
    ==
    assert // invalid size
    frame_dig 6
    swap
    concat
    frame_dig 4
    dup
    cover 2
    len
    intc_0 // 32
    ==
    assert // invalid size
    swap
    concat
    frame_dig 3
    concat
    dig 1
    len
    intc_0 // 32
    ==
    assert // invalid size
    swap
    concat
    pushbytes 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
    concat
    frame_dig -3
    frame_dig -2
    frame_dig -1
    frame_bury 3
    frame_bury 2
    frame_bury 1
    frame_bury 0
    retsub


// contracts/verifier.algo.ts::PlonkVerifier.calculateLagrangeEvaluations(challengesInput: bytes, vk: bytes) -> bytes:
calculateLagrangeEvaluations:
    // contracts/verifier.algo.ts:239-242
    // calculateLagrangeEvaluations(
    //   challengesInput: Challenges,
    //   vk: VerificationKey,
    // ): { L: bytes<32>[]; challenges: Challenges } {
    proto 2 1
    intc_3 // 0
    dupn 8
    bytec_1 // ""
    dupn 2
    // contracts/verifier.algo.ts:244
    // let xin = BigUint(challenges.xi);
    frame_dig -2
    extract 96 32
    // contracts/verifier.algo.ts:246
    // let domainSize: uint64 = 1;
    intc_1 // 1
    // contracts/verifier.algo.ts:247
    // for (let i: uint64 = 0; i < vk.power; i++) {
    intc_3 // 0

calculateLagrangeEvaluations_while_top@1:
    // contracts/verifier.algo.ts:247
    // for (let i: uint64 = 0; i < vk.power; i++) {
    frame_dig -1
    pushint 768 // 768
    extract_uint64
    frame_dig 14
    >
    bz calculateLagrangeEvaluations_after_while@3
    // contracts/verifier.algo.ts:30
    // return (a * b) % BLS12_381_SCALAR_MODULUS;
    frame_dig 12
    dup
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    frame_bury 12
    // contracts/verifier.algo.ts:249
    // domainSize *= 2;
    frame_dig 13
    pushint 2 // 2
    *
    frame_bury 13
    // contracts/verifier.algo.ts:247
    // for (let i: uint64 = 0; i < vk.power; i++) {
    frame_dig 14
    intc_1 // 1
    +
    frame_bury 14
    b calculateLagrangeEvaluations_while_top@1

calculateLagrangeEvaluations_after_while@3:
    // contracts/verifier.algo.ts:81
    // return Bytes(a).toFixed({ length: 32 });
    frame_dig 12
    dup
    len
    intc_0 // 32
    ==
    assert // Length must be 32
    // contracts/verifier.algo.ts:252
    // challenges.xin = b32(xin);
    frame_dig -2
    pushint 352 // 352
    dig 2
    replace3
    // contracts/verifier.algo.ts:253
    // challenges.zh = b32(frSub(xin, BigUint(1)));
    swap
    bytec_2 // 0x01
    callsub frSub
    // contracts/verifier.algo.ts:81
    // return Bytes(a).toFixed({ length: 32 });
    dup
    len
    intc_0 // 32
    ==
    assert // Length must be 32
    // contracts/verifier.algo.ts:253
    // challenges.zh = b32(frSub(xin, BigUint(1)));
    intc 4 // 384
    swap
    replace3
    frame_bury 3
    // contracts/verifier.algo.ts:255
    // const L: bytes<32>[] = [];
    pushbytes 0x0000
    frame_bury 0
    // contracts/verifier.algo.ts:257
    // const n = frNorm(BigUint(domainSize));
    frame_dig 13
    itob
    // contracts/verifier.algo.ts:77
    // return ((a % r) + r) % r; // ensures [0, r)
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b+
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    frame_bury 5
    // contracts/verifier.algo.ts:259
    // let w = BigUint(1);
    bytec_2 // 0x01
    frame_bury 8
    // contracts/verifier.algo.ts:261
    // const iterations: uint64 = vk.nPublic === 0 ? 1 : vk.nPublic;
    frame_dig -1
    pushint 776 // 776
    extract_uint64
    dup
    frame_bury 11
    bnz calculateLagrangeEvaluations_ternary_false@5
    intc_1 // 1
    frame_bury 9

calculateLagrangeEvaluations_ternary_merge@6:
    // contracts/verifier.algo.ts:262
    // for (let i: uint64 = 1; i < iterations; i++) {
    intc_1 // 1
    frame_bury 10

calculateLagrangeEvaluations_while_top@7:
    // contracts/verifier.algo.ts:262
    // for (let i: uint64 = 1; i < iterations; i++) {
    frame_dig 10
    frame_dig 9
    <
    bz calculateLagrangeEvaluations_after_while@9
    // contracts/verifier.algo.ts:265
    // frMul(w, BigUint(challenges.zh)),
    frame_dig 3
    dup
    intc 4 // 384
    intc_0 // 32
    extract3
    // contracts/verifier.algo.ts:30
    // return (a * b) % BLS12_381_SCALAR_MODULUS;
    frame_dig 8
    dup
    uncover 2
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:266
    // frMul(n, frSub(BigUint(challenges.xi), w)),
    uncover 2
    extract 96 32
    uncover 2
    callsub frSub
    // contracts/verifier.algo.ts:30
    // return (a * b) % BLS12_381_SCALAR_MODULUS;
    frame_dig 5
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:77
    // return ((a % r) + r) % r; // ensures [0, r)
    swap
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b+
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    frame_bury 1
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b+
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:56
    // assert(x !== (0n as biguint), "Fr inverse of zero");
    dup
    bytec_1 // 0x
    b!=
    assert // Fr inverse of zero
    // contracts/verifier.algo.ts:57
    // const inv = modPow(x, BLS12_381_R_MINUS_2, r);
    pushbytes 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfefffffffeffffffff
    // contracts/verifier.algo.ts:40
    // let result = 1n as biguint;
    bytec_2 // 0x01
    frame_bury 6
    // contracts/verifier.algo.ts:41
    // let b: biguint = base % mod;
    swap
    // contracts/verifier.algo.ts:57
    // const inv = modPow(x, BLS12_381_R_MINUS_2, r);
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    // contracts/verifier.algo.ts:41
    // let b: biguint = base % mod;
    b%
    frame_bury 2
    frame_bury 4

calculateLagrangeEvaluations_while_top@11:
    // contracts/verifier.algo.ts:43
    // while (e > (0n as biguint)) {
    frame_dig 4
    bytec_1 // 0x
    b>
    // contracts/verifier.algo.ts:43-49
    // while (e > (0n as biguint)) {
    //   if ((e & (1n as biguint)) !== (0n as biguint)) {
    //     result = (result * b) % mod;
    //   }
    //   b = (b * b) % mod;
    //   e = e / BigUint(2); // e >> 1
    // }
    bz calculateLagrangeEvaluations_after_while@15
    // contracts/verifier.algo.ts:44
    // if ((e & (1n as biguint)) !== (0n as biguint)) {
    frame_dig 4
    bytec_2 // 0x01
    b&
    bytec_1 // 0x
    b!=
    frame_dig 6
    frame_bury 7
    bz calculateLagrangeEvaluations_after_if_else@14
    // contracts/verifier.algo.ts:45
    // result = (result * b) % mod;
    frame_dig 6
    frame_dig 2
    b*
    // contracts/verifier.algo.ts:57
    // const inv = modPow(x, BLS12_381_R_MINUS_2, r);
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    // contracts/verifier.algo.ts:45
    // result = (result * b) % mod;
    b%
    frame_bury 7

calculateLagrangeEvaluations_after_if_else@14:
    frame_dig 7
    frame_bury 6
    // contracts/verifier.algo.ts:47
    // b = (b * b) % mod;
    frame_dig 2
    dup
    b*
    // contracts/verifier.algo.ts:57
    // const inv = modPow(x, BLS12_381_R_MINUS_2, r);
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    // contracts/verifier.algo.ts:47
    // b = (b * b) % mod;
    b%
    frame_bury 2
    // contracts/verifier.algo.ts:48
    // e = e / BigUint(2); // e >> 1
    frame_dig 4
    pushbytes 0x02
    b/
    frame_bury 4
    b calculateLagrangeEvaluations_while_top@11

calculateLagrangeEvaluations_after_while@15:
    // contracts/verifier.algo.ts:65
    // return (aN * bInv) % r;
    frame_dig 1
    frame_dig 6
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:81
    // return Bytes(a).toFixed({ length: 32 });
    dup
    len
    intc_0 // 32
    ==
    assert // Length must be 32
    // contracts/verifier.algo.ts:263-268
    // L[i] = b32(
    //   frDiv(
    //     frMul(w, BigUint(challenges.zh)),
    //     frMul(n, frSub(BigUint(challenges.xi), w)),
    //   ),
    // );
    frame_dig 10
    dup
    cover 2
    intc_0 // 32
    *
    pushint 2 // 2
    +
    frame_dig 0
    swap
    uncover 2
    replace3
    frame_bury 0
    // contracts/verifier.algo.ts:30
    // return (a * b) % BLS12_381_SCALAR_MODULUS;
    frame_dig 8
    // contracts/verifier.algo.ts:270
    // w = frMul(w, Frw11);
    pushbytes 0x43527a8bca252472eb674a1a620890d7a534af14b61e0abe74a1f6718c130477
    // contracts/verifier.algo.ts:30
    // return (a * b) % BLS12_381_SCALAR_MODULUS;
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    frame_bury 8
    // contracts/verifier.algo.ts:262
    // for (let i: uint64 = 1; i < iterations; i++) {
    intc_1 // 1
    +
    frame_bury 10
    b calculateLagrangeEvaluations_while_top@7

calculateLagrangeEvaluations_after_while@9:
    // contracts/verifier.algo.ts:272
    // return { L, challenges };
    pushbytes 0x01a2
    frame_dig 3
    concat
    frame_dig 0
    concat
    frame_bury 0
    retsub

calculateLagrangeEvaluations_ternary_false@5:
    frame_dig 11
    frame_bury 9
    b calculateLagrangeEvaluations_ternary_merge@6
