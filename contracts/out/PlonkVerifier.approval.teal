#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 96 32 1 0 384 192 288 480 576 672 768 776 784 792 992 352
    bytecblock 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001 TMPL_VERIFICATION_KEY 0x 0x01 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000000
    // contracts/verifier.algo.ts:186
    // export class PlonkVerifier extends Contract {
    txn NumAppArgs
    bz main_bare_routing@7
    pushbytess 0x95c10ce4 0xdd79169f // method "_dummy((byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64,uint64,uint64,byte[192]))void", method "verify(uint256[],(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint256,uint256,uint256,uint256,uint256,uint256))bool"
    txna ApplicationArgs 0
    match main__dummy_route@3 main_verify_route@4

main_after_if_else@11:
    // contracts/verifier.algo.ts:186
    // export class PlonkVerifier extends Contract {
    intc_3 // 0
    return

main_verify_route@4:
    // contracts/verifier.algo.ts:191
    // public verify(signals: PublicSignals, proof: Proof): boolean {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // contracts/verifier.algo.ts:186
    // export class PlonkVerifier extends Contract {
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    // contracts/verifier.algo.ts:191
    // public verify(signals: PublicSignals, proof: Proof): boolean {
    callsub verify
    pushbytes 0x00
    intc_3 // 0
    uncover 2
    setbit
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_2 // 1
    return

main__dummy_route@3:
    // contracts/verifier.algo.ts:188
    // @abimethod({ allowActions: "CloseOut" })
    txn OnCompletion
    pushint 2 // CloseOut
    ==
    assert // OnCompletion is not CloseOut
    txn ApplicationID
    assert // can only call when not creating
    intc_2 // 1
    return

main_bare_routing@7:
    // contracts/verifier.algo.ts:186
    // export class PlonkVerifier extends Contract {
    txn OnCompletion
    bnz main_after_if_else@11
    txn ApplicationID
    !
    assert // can only call when creating
    intc_2 // 1
    return


// contracts/verifier.algo.ts::frSub(a: bytes, b: bytes) -> bytes:
frSub:
    // contracts/verifier.algo.ts:90
    // function frSub(a: biguint, b: biguint): biguint {
    proto 2 1
    // contracts/verifier.algo.ts:92
    // const aN: biguint = a % r;
    frame_dig -2
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:93
    // const bN: biguint = b % r;
    frame_dig -1
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:94
    // return (aN + r - bN) % r; // (a - b) mod r, guaranteed non-negative
    swap
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b+
    swap
    b-
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    retsub


// contracts/verifier.algo.ts::PlonkVerifier.verify(signals: bytes, proof: bytes) -> uint64:
verify:
    // contracts/verifier.algo.ts:191
    // public verify(signals: PublicSignals, proof: Proof): boolean {
    proto 2 1
    intc_3 // 0
    dupn 30
    bytec_2 // ""
    dupn 4
    // contracts/verifier.algo.ts:195
    // Qm: vkBytes.slice(0, 96).toFixed({ length: 96 }),
    bytec_1 // TMPL_VERIFICATION_KEY
    len
    intc_3 // 0
    dig 1
    >=
    intc_3 // 0
    dig 2
    uncover 2
    select
    intc_0 // 96
    dig 2
    >=
    intc_0 // 96
    dig 3
    uncover 2
    select
    bytec_1 // TMPL_VERIFICATION_KEY
    uncover 2
    dig 2
    substring3
    dup
    len
    intc_0 // 96
    ==
    assert // Length must be 96
    // contracts/verifier.algo.ts:196
    // Ql: vkBytes.slice(96, 192).toFixed({ length: 96 }),
    intc 5 // 192
    dig 3
    >=
    intc 5 // 192
    dig 4
    uncover 2
    select
    bytec_1 // TMPL_VERIFICATION_KEY
    uncover 3
    dig 2
    substring3
    dup
    len
    intc_0 // 96
    ==
    assert // Length must be 96
    // contracts/verifier.algo.ts:197
    // Qr: vkBytes.slice(192, 288).toFixed({ length: 96 }),
    intc 6 // 288
    dig 4
    >=
    intc 6 // 288
    dig 5
    uncover 2
    select
    bytec_1 // TMPL_VERIFICATION_KEY
    uncover 3
    dig 2
    substring3
    dup
    len
    intc_0 // 96
    ==
    assert // Length must be 96
    // contracts/verifier.algo.ts:198
    // Qo: vkBytes.slice(288, 384).toFixed({ length: 96 }),
    intc 4 // 384
    dig 5
    >=
    intc 4 // 384
    dig 6
    uncover 2
    select
    bytec_1 // TMPL_VERIFICATION_KEY
    uncover 3
    dig 2
    substring3
    dup
    len
    intc_0 // 96
    ==
    assert // Length must be 96
    // contracts/verifier.algo.ts:199
    // Qc: vkBytes.slice(384, 480).toFixed({ length: 96 }),
    intc 7 // 480
    dig 6
    >=
    intc 7 // 480
    dig 7
    uncover 2
    select
    bytec_1 // TMPL_VERIFICATION_KEY
    uncover 3
    dig 2
    substring3
    dup
    len
    intc_0 // 96
    ==
    assert // Length must be 96
    // contracts/verifier.algo.ts:200
    // S1: vkBytes.slice(480, 576).toFixed({ length: 96 }),
    intc 8 // 576
    dig 7
    >=
    intc 8 // 576
    dig 8
    uncover 2
    select
    bytec_1 // TMPL_VERIFICATION_KEY
    uncover 3
    dig 2
    substring3
    dup
    len
    intc_0 // 96
    ==
    assert // Length must be 96
    // contracts/verifier.algo.ts:201
    // S2: vkBytes.slice(576, 672).toFixed({ length: 96 }),
    intc 9 // 672
    dig 8
    >=
    intc 9 // 672
    dig 9
    uncover 2
    select
    bytec_1 // TMPL_VERIFICATION_KEY
    uncover 3
    dig 2
    substring3
    dup
    len
    intc_0 // 96
    ==
    assert // Length must be 96
    // contracts/verifier.algo.ts:202
    // S3: vkBytes.slice(672, 768).toFixed({ length: 96 }),
    intc 10 // 768
    dig 9
    >=
    intc 10 // 768
    dig 10
    uncover 2
    select
    bytec_1 // TMPL_VERIFICATION_KEY
    uncover 3
    dig 2
    substring3
    dup
    len
    intc_0 // 96
    ==
    assert // Length must be 96
    // contracts/verifier.algo.ts:203
    // power: op.btoi(vkBytes.slice(768, 776)),
    intc 11 // 776
    dig 10
    >=
    intc 11 // 776
    dig 11
    uncover 2
    select
    bytec_1 // TMPL_VERIFICATION_KEY
    uncover 3
    dig 2
    substring3
    btoi
    // contracts/verifier.algo.ts:204
    // nPublic: op.btoi(vkBytes.slice(776, 784)),
    intc 12 // 784
    dig 11
    >=
    intc 12 // 784
    dig 12
    uncover 2
    select
    bytec_1 // TMPL_VERIFICATION_KEY
    uncover 3
    dig 2
    substring3
    btoi
    // contracts/verifier.algo.ts:205
    // k1: op.btoi(vkBytes.slice(784, 792)),
    intc 13 // 792
    dig 12
    >=
    intc 13 // 792
    dig 13
    uncover 2
    select
    bytec_1 // TMPL_VERIFICATION_KEY
    uncover 3
    dig 2
    substring3
    btoi
    // contracts/verifier.algo.ts:206
    // k2: op.btoi(vkBytes.slice(792, 800)),
    pushint 800 // 800
    dig 13
    >=
    pushint 800 // 800
    dig 14
    uncover 2
    select
    bytec_1 // TMPL_VERIFICATION_KEY
    uncover 3
    dig 2
    substring3
    btoi
    // contracts/verifier.algo.ts:207
    // X_2: vkBytes.slice(800, 992).toFixed({ length: 192 }),
    intc 14 // 992
    dig 14
    >=
    intc 14 // 992
    uncover 15
    uncover 2
    select
    bytec_1 // TMPL_VERIFICATION_KEY
    uncover 3
    uncover 2
    substring3
    dup
    len
    intc 5 // 192
    ==
    assert // Length must be 192
    // contracts/verifier.algo.ts:194-208
    // const vk: VerificationKey = {
    //   Qm: vkBytes.slice(0, 96).toFixed({ length: 96 }),
    //   Ql: vkBytes.slice(96, 192).toFixed({ length: 96 }),
    //   Qr: vkBytes.slice(192, 288).toFixed({ length: 96 }),
    //   Qo: vkBytes.slice(288, 384).toFixed({ length: 96 }),
    //   Qc: vkBytes.slice(384, 480).toFixed({ length: 96 }),
    //   S1: vkBytes.slice(480, 576).toFixed({ length: 96 }),
    //   S2: vkBytes.slice(576, 672).toFixed({ length: 96 }),
    //   S3: vkBytes.slice(672, 768).toFixed({ length: 96 }),
    //   power: op.btoi(vkBytes.slice(768, 776)),
    //   nPublic: op.btoi(vkBytes.slice(776, 784)),
    //   k1: op.btoi(vkBytes.slice(784, 792)),
    //   k2: op.btoi(vkBytes.slice(792, 800)),
    //   X_2: vkBytes.slice(800, 992).toFixed({ length: 192 }),
    // };
    uncover 12
    uncover 12
    concat
    uncover 11
    concat
    uncover 10
    concat
    uncover 9
    concat
    uncover 8
    concat
    uncover 7
    concat
    uncover 6
    concat
    uncover 5
    itob
    concat
    uncover 4
    itob
    concat
    uncover 3
    itob
    concat
    uncover 2
    itob
    concat
    swap
    concat
    dupn 2
    // contracts/verifier.algo.ts:268
    // let td = op.concat(vk.Qm, vk.Ql);
    extract 0 96
    dup
    uncover 2
    dup
    extract 96 96
    dup
    cover 3
    uncover 2
    swap
    concat
    // contracts/verifier.algo.ts:269
    // td = op.concat(td, vk.Qr);
    dig 1
    extract 192 96
    dup
    cover 3
    concat
    // contracts/verifier.algo.ts:270
    // td = op.concat(td, vk.Qo);
    dig 1
    intc 6 // 288
    intc_0 // 96
    extract3
    dup
    cover 3
    concat
    // contracts/verifier.algo.ts:271
    // td = op.concat(td, vk.Qc);
    dig 1
    intc 4 // 384
    intc_0 // 96
    extract3
    dup
    cover 3
    concat
    // contracts/verifier.algo.ts:272
    // td = op.concat(td, vk.S1);
    dig 1
    intc 7 // 480
    intc_0 // 96
    extract3
    dup
    cover 3
    concat
    // contracts/verifier.algo.ts:273
    // td = op.concat(td, vk.S2);
    dig 1
    intc 8 // 576
    intc_0 // 96
    extract3
    dup
    cover 3
    concat
    // contracts/verifier.algo.ts:274
    // td = op.concat(td, vk.S3);
    swap
    intc 9 // 672
    intc_0 // 96
    extract3
    dup
    cover 2
    concat
    // contracts/verifier.algo.ts:276
    // for (const signal of signals) {
    frame_dig -2
    intc_3 // 0
    extract_uint16
    intc_3 // 0

verify_for_header@2:
    // contracts/verifier.algo.ts:276
    // for (const signal of signals) {
    frame_dig 47
    frame_dig 46
    <
    bz verify_after_for@5
    frame_dig -2
    extract 2 0
    frame_dig 47
    dup
    cover 2
    intc_1 // 32
    *
    intc_1 // 32
    extract3 // on error: index access is out of bounds
    // contracts/verifier.algo.ts:105
    // return a % BLS12_381_SCALAR_MODULUS;
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:109
    // return new Uint256(a).bytes.toFixed({ length: 32 });
    dup
    len
    intc_1 // 32
    <=
    assert // overflow
    intc_1 // 32
    bzero
    b|
    dup
    len
    intc_1 // 32
    ==
    assert // Length must be 32
    // contracts/verifier.algo.ts:277
    // td = op.concat(td, b32(frScalar(signal.native)));
    frame_dig 45
    swap
    concat
    frame_bury 45
    intc_2 // 1
    +
    frame_bury 47
    b verify_for_header@2

verify_after_for@5:
    // contracts/verifier.algo.ts:280
    // td = op.concat(td, proof.A);
    frame_dig -1
    extract 0 96
    dup
    frame_bury 18
    frame_dig 45
    swap
    concat
    // contracts/verifier.algo.ts:281
    // td = op.concat(td, proof.B);
    frame_dig -1
    extract 96 96
    dup
    frame_bury 19
    concat
    // contracts/verifier.algo.ts:282
    // td = op.concat(td, proof.C);
    frame_dig -1
    extract 192 96
    dup
    frame_bury 20
    concat
    // contracts/verifier.algo.ts:284
    // const beta = this.getChallenge(td);
    callsub getChallenge
    // contracts/verifier.algo.ts:289
    // const gamma = this.getChallenge(td);
    dup
    callsub getChallenge
    // contracts/verifier.algo.ts:296
    // td = op.concat(td, gamma.bytes);
    concat
    dup
    frame_bury 45
    // contracts/verifier.algo.ts:297
    // td = op.concat(td, proof.Z);
    frame_dig -1
    intc 6 // 288
    intc_0 // 96
    extract3
    dup
    frame_bury 21
    concat
    // contracts/verifier.algo.ts:298
    // const alpha = this.getChallenge(td);
    callsub getChallenge
    dup
    frame_bury 8
    // contracts/verifier.algo.ts:305
    // td = op.concat(td, proof.T1);
    frame_dig -1
    intc 4 // 384
    intc_0 // 96
    extract3
    dup
    frame_bury 14
    concat
    // contracts/verifier.algo.ts:306
    // td = op.concat(td, proof.T2);
    frame_dig -1
    intc 7 // 480
    intc_0 // 96
    extract3
    dup
    frame_bury 22
    concat
    // contracts/verifier.algo.ts:307
    // td = op.concat(td, proof.T3);
    frame_dig -1
    intc 8 // 576
    intc_0 // 96
    extract3
    dup
    frame_bury 23
    concat
    // contracts/verifier.algo.ts:308
    // const xi = this.getChallenge(td);
    callsub getChallenge
    dup
    frame_bury 29
    // contracts/verifier.algo.ts:315
    // td = op.concat(td, proof.eval_a.bytes);
    frame_dig -1
    pushint 864 // 864
    intc_1 // 32
    extract3
    dup
    frame_bury 1
    concat
    // contracts/verifier.algo.ts:316
    // td = op.concat(td, proof.eval_b.bytes);
    frame_dig -1
    pushint 896 // 896
    intc_1 // 32
    extract3
    dup
    frame_bury 3
    concat
    // contracts/verifier.algo.ts:317
    // td = op.concat(td, proof.eval_c.bytes);
    frame_dig -1
    pushint 928 // 928
    intc_1 // 32
    extract3
    dup
    frame_bury 2
    concat
    // contracts/verifier.algo.ts:318
    // td = op.concat(td, proof.eval_s1.bytes);
    frame_dig -1
    pushint 960 // 960
    intc_1 // 32
    extract3
    dup
    frame_bury 12
    concat
    // contracts/verifier.algo.ts:319
    // td = op.concat(td, proof.eval_s2.bytes);
    frame_dig -1
    intc 14 // 992
    intc_1 // 32
    extract3
    dup
    frame_bury 10
    concat
    // contracts/verifier.algo.ts:320
    // td = op.concat(td, proof.eval_zw.bytes);
    frame_dig -1
    pushint 1024 // 1024
    intc_1 // 32
    extract3
    dup
    frame_bury 11
    concat
    // contracts/verifier.algo.ts:322
    // const v = new FixedArray<Uint256, 6>();
    intc 5 // 192
    bzero
    // contracts/verifier.algo.ts:323
    // v[1] = this.getChallenge(td);
    swap
    callsub getChallenge
    replace2 32
    frame_bury 27
    // contracts/verifier.algo.ts:325
    // for (let i: uint64 = 2; i < 6; i++) {
    pushint 2 // 2
    frame_bury 32

verify_while_top@6:
    // contracts/verifier.algo.ts:325
    // for (let i: uint64 = 2; i < 6; i++) {
    frame_dig 32
    pushint 6 // 6
    <
    bz verify_after_while@8
    // contracts/verifier.algo.ts:326
    // v[i] = new Uint256(frMul((v[i - 1] as Uint256).native, v[1].native));
    frame_dig 32
    dup
    intc_2 // 1
    -
    intc_1 // 32
    *
    frame_dig 27
    dup
    uncover 2
    intc_1 // 32
    extract3 // on error: index access is out of bounds
    dig 1
    extract 32 32 // on error: index access is out of bounds
    // contracts/verifier.algo.ts:46
    // return (a * b) % BLS12_381_SCALAR_MODULUS;
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:326
    // v[i] = new Uint256(frMul((v[i - 1] as Uint256).native, v[1].native));
    dup
    len
    intc_1 // 32
    <=
    assert // overflow
    intc_1 // 32
    bzero
    b|
    dig 2
    intc_1 // 32
    *
    swap
    replace3
    frame_bury 27
    // contracts/verifier.algo.ts:325
    // for (let i: uint64 = 2; i < 6; i++) {
    intc_2 // 1
    +
    frame_bury 32
    b verify_while_top@6

verify_after_while@8:
    // contracts/verifier.algo.ts:333
    // td = op.concat(td, proof.Wxi);
    frame_dig -1
    intc 9 // 672
    intc_0 // 96
    extract3
    // contracts/verifier.algo.ts:334
    // td = op.concat(td, proof.Wxiw);
    frame_dig -1
    intc 10 // 768
    intc_0 // 96
    extract3
    concat
    // contracts/verifier.algo.ts:335
    // const u = this.getChallenge(td);
    callsub getChallenge
    // contracts/verifier.algo.ts:337-346
    // return {
    //   beta,
    //   gamma,
    //   alpha,
    //   xi,
    //   v,
    //   u,
    //   xin: new Uint256(),
    //   zh: new Uint256(),
    // };
    frame_dig 45
    frame_dig 8
    concat
    frame_dig 29
    concat
    frame_dig 27
    concat
    swap
    concat
    pushbytes 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
    concat
    dup
    frame_bury 13
    // contracts/verifier.algo.ts:212
    // namedLog("beta", challenges.beta.bytes);
    dup
    extract 0 32
    pushbytes "beta"
    // contracts/verifier.algo.ts:146
    // log(name);
    log
    // contracts/verifier.algo.ts:147
    // log(value);
    log
    // contracts/verifier.algo.ts:213
    // namedLog("gamma", challenges.gamma.bytes);
    dup
    extract 32 32
    pushbytes "gamma"
    // contracts/verifier.algo.ts:146
    // log(name);
    log
    // contracts/verifier.algo.ts:147
    // log(value);
    log
    // contracts/verifier.algo.ts:214
    // namedLog("alpha", challenges.alpha.bytes);
    dup
    extract 64 32
    pushbytes "alpha"
    // contracts/verifier.algo.ts:146
    // log(name);
    log
    // contracts/verifier.algo.ts:147
    // log(value);
    log
    // contracts/verifier.algo.ts:215
    // namedLog("xi", challenges.xi.bytes);
    dup
    extract 96 32
    pushbytes "xi"
    // contracts/verifier.algo.ts:146
    // log(name);
    log
    // contracts/verifier.algo.ts:147
    // log(value);
    dup
    log
    // contracts/verifier.algo.ts:216
    // namedLog("u", challenges.u.bytes);
    dig 1
    pushint 320 // 320
    intc_1 // 32
    extract3
    pushbytes "u"
    // contracts/verifier.algo.ts:146
    // log(name);
    log
    // contracts/verifier.algo.ts:147
    // log(value);
    log
    // contracts/verifier.algo.ts:217
    // namedLog("xin", challenges.xin.bytes);
    dig 1
    intc 15 // 352
    intc_1 // 32
    extract3
    pushbytes "xin"
    // contracts/verifier.algo.ts:146
    // log(name);
    log
    // contracts/verifier.algo.ts:147
    // log(value);
    log
    // contracts/verifier.algo.ts:218
    // namedLog("zh", challenges.zh.bytes);
    dig 1
    intc 4 // 384
    intc_1 // 32
    extract3
    pushbytes "zh"
    // contracts/verifier.algo.ts:146
    // log(name);
    log
    // contracts/verifier.algo.ts:147
    // log(value);
    log
    // contracts/verifier.algo.ts:219
    // namedLog("v[1]", (challenges.v[1] as Uint256).bytes);
    swap
    extract 128 192
    dup
    extract 32 32 // on error: index access is out of bounds
    pushbytes "v[1]"
    // contracts/verifier.algo.ts:146
    // log(name);
    log
    // contracts/verifier.algo.ts:147
    // log(value);
    log
    // contracts/verifier.algo.ts:219-220
    // namedLog("v[1]", (challenges.v[1] as Uint256).bytes);
    // namedLog("v[2]", (challenges.v[2] as Uint256).bytes);
    dup
    extract 64 32 // on error: index access is out of bounds
    // contracts/verifier.algo.ts:220
    // namedLog("v[2]", (challenges.v[2] as Uint256).bytes);
    pushbytes "v[2]"
    // contracts/verifier.algo.ts:146
    // log(name);
    log
    // contracts/verifier.algo.ts:147
    // log(value);
    log
    // contracts/verifier.algo.ts:221
    // namedLog("v[3]", (challenges.v[3] as Uint256).bytes);
    dup
    extract 96 32 // on error: index access is out of bounds
    pushbytes "v[3]"
    // contracts/verifier.algo.ts:146
    // log(name);
    log
    // contracts/verifier.algo.ts:147
    // log(value);
    log
    // contracts/verifier.algo.ts:222
    // namedLog("v[4]", (challenges.v[4] as Uint256).bytes);
    dup
    extract 128 32 // on error: index access is out of bounds
    pushbytes "v[4]"
    // contracts/verifier.algo.ts:146
    // log(name);
    log
    // contracts/verifier.algo.ts:147
    // log(value);
    log
    // contracts/verifier.algo.ts:223
    // namedLog("v[5]", (challenges.v[5] as Uint256).bytes);
    extract 160 32 // on error: index access is out of bounds
    pushbytes "v[5]"
    // contracts/verifier.algo.ts:146
    // log(name);
    log
    // contracts/verifier.algo.ts:147
    // log(value);
    log
    // contracts/verifier.algo.ts:356
    // let domainSize: uint64 = 1;
    intc_2 // 1
    frame_bury 31
    // contracts/verifier.algo.ts:357
    // for (let i: uint64 = 0; i < vk.power; i++) {
    intc_3 // 0
    frame_bury 32
    frame_bury 30

verify_while_top@11:
    // contracts/verifier.algo.ts:357
    // for (let i: uint64 = 0; i < vk.power; i++) {
    frame_dig 36
    intc 10 // 768
    extract_uint64
    frame_dig 32
    >
    bz verify_after_while@13
    // contracts/verifier.algo.ts:46
    // return (a * b) % BLS12_381_SCALAR_MODULUS;
    frame_dig 30
    dup
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    frame_bury 30
    // contracts/verifier.algo.ts:359
    // domainSize *= 2;
    frame_dig 31
    pushint 2 // 2
    *
    frame_bury 31
    // contracts/verifier.algo.ts:357
    // for (let i: uint64 = 0; i < vk.power; i++) {
    frame_dig 32
    intc_2 // 1
    +
    frame_bury 32
    b verify_while_top@11

verify_after_while@13:
    // contracts/verifier.algo.ts:362
    // challenges.xin = new Uint256(xin);
    frame_dig 30
    dup
    len
    intc_1 // 32
    <=
    assert // overflow
    intc_1 // 32
    bzero
    dup
    frame_bury 6
    dup2
    b|
    frame_dig 13
    intc 15 // 352
    uncover 2
    replace3
    // contracts/verifier.algo.ts:363
    // challenges.zh = new Uint256(frSub(xin, BigUint(1)));
    uncover 2
    bytec_3 // 0x01
    callsub frSub
    dup
    len
    intc_1 // 32
    <=
    assert // overflow
    uncover 2
    b|
    intc 4 // 384
    swap
    replace3
    frame_bury 13
    // contracts/verifier.algo.ts:365
    // const n = frScalar(BigUint(domainSize));
    frame_dig 31
    itob
    // contracts/verifier.algo.ts:105
    // return a % BLS12_381_SCALAR_MODULUS;
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    frame_bury 17
    // contracts/verifier.algo.ts:367
    // let w = BigUint(1);
    bytec_3 // 0x01
    frame_bury 28
    // contracts/verifier.algo.ts:369
    // const L: Uint256[] = [new Uint256(), new Uint256()];
    pushbytes 0x000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
    frame_bury 0
    // contracts/verifier.algo.ts:370
    // const iterations: uint64 = vk.nPublic === 0 ? 1 : vk.nPublic;
    frame_dig 36
    intc 11 // 776
    extract_uint64
    dup
    frame_bury 35
    bnz verify_ternary_false@15
    intc_2 // 1
    frame_bury 33

verify_ternary_merge@16:
    // contracts/verifier.algo.ts:371
    // for (let i: uint64 = 1; i <= iterations; i++) {
    intc_2 // 1
    frame_bury 34

verify_while_top@17:
    // contracts/verifier.algo.ts:371
    // for (let i: uint64 = 1; i <= iterations; i++) {
    frame_dig 34
    frame_dig 33
    <=
    bz verify_after_while@19
    // contracts/verifier.algo.ts:374
    // frMul(w, challenges.zh.native),
    frame_dig 13
    dup
    intc 4 // 384
    intc_1 // 32
    extract3
    // contracts/verifier.algo.ts:46
    // return (a * b) % BLS12_381_SCALAR_MODULUS;
    frame_dig 28
    dup
    uncover 2
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:375
    // frMul(n, frSub(challenges.xi.native, w)),
    uncover 2
    extract 96 32
    uncover 2
    callsub frSub
    // contracts/verifier.algo.ts:46
    // return (a * b) % BLS12_381_SCALAR_MODULUS;
    frame_dig 17
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:105
    // return a % BLS12_381_SCALAR_MODULUS;
    swap
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    frame_bury 4
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:78
    // assert(x !== (0n as biguint), "Fr inverse of zero");
    dup
    bytec_2 // 0x
    b!=
    assert // Fr inverse of zero
    // contracts/verifier.algo.ts:79
    // const inv = modPow(x, BLS12_381_R_MINUS_2, r);
    pushbytes 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfefffffffeffffffff
    // contracts/verifier.algo.ts:62
    // let result = 1n as biguint;
    bytec_3 // 0x01
    frame_bury 25
    // contracts/verifier.algo.ts:63
    // let b: biguint = base % mod;
    swap
    // contracts/verifier.algo.ts:79
    // const inv = modPow(x, BLS12_381_R_MINUS_2, r);
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    // contracts/verifier.algo.ts:63
    // let b: biguint = base % mod;
    b%
    frame_bury 9
    frame_bury 15

verify_while_top@26:
    // contracts/verifier.algo.ts:65
    // while (e > (0n as biguint)) {
    frame_dig 15
    bytec_2 // 0x
    b>
    // contracts/verifier.algo.ts:65-71
    // while (e > (0n as biguint)) {
    //   if ((e & (1n as biguint)) !== (0n as biguint)) {
    //     result = (result * b) % mod;
    //   }
    //   b = (b * b) % mod;
    //   e = e / BigUint(2); // e >> 1
    // }
    bz verify_after_while@30
    // contracts/verifier.algo.ts:66
    // if ((e & (1n as biguint)) !== (0n as biguint)) {
    frame_dig 15
    bytec_3 // 0x01
    b&
    bytec_2 // 0x
    b!=
    frame_dig 25
    frame_bury 26
    bz verify_after_if_else@29
    // contracts/verifier.algo.ts:67
    // result = (result * b) % mod;
    frame_dig 25
    frame_dig 9
    b*
    // contracts/verifier.algo.ts:79
    // const inv = modPow(x, BLS12_381_R_MINUS_2, r);
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    // contracts/verifier.algo.ts:67
    // result = (result * b) % mod;
    b%
    frame_bury 26

verify_after_if_else@29:
    frame_dig 26
    frame_bury 25
    // contracts/verifier.algo.ts:69
    // b = (b * b) % mod;
    frame_dig 9
    dup
    b*
    // contracts/verifier.algo.ts:79
    // const inv = modPow(x, BLS12_381_R_MINUS_2, r);
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    // contracts/verifier.algo.ts:69
    // b = (b * b) % mod;
    b%
    frame_bury 9
    // contracts/verifier.algo.ts:70
    // e = e / BigUint(2); // e >> 1
    frame_dig 15
    pushbytes 0x02
    b/
    frame_bury 15
    b verify_while_top@26

verify_after_while@30:
    // contracts/verifier.algo.ts:87
    // return (aN * bInv) % r;
    frame_dig 4
    frame_dig 25
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:372-377
    // L[i] = new Uint256(
    //   frDiv(
    //     frMul(w, challenges.zh.native),
    //     frMul(n, frSub(challenges.xi.native, w)),
    //   ),
    // );
    dup
    len
    intc_1 // 32
    <=
    assert // overflow
    frame_dig 6
    b|
    frame_dig 34
    dup
    cover 2
    intc_1 // 32
    *
    pushint 2 // 2
    +
    frame_dig 0
    swap
    uncover 2
    replace3
    frame_bury 0
    // contracts/verifier.algo.ts:46
    // return (a * b) % BLS12_381_SCALAR_MODULUS;
    frame_dig 28
    // contracts/verifier.algo.ts:379
    // w = frMul(w, Frw11);
    pushbytes 0x43527a8bca252472eb674a1a620890d7a534af14b61e0abe74a1f6718c130477
    // contracts/verifier.algo.ts:46
    // return (a * b) % BLS12_381_SCALAR_MODULUS;
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    frame_bury 28
    // contracts/verifier.algo.ts:371
    // for (let i: uint64 = 1; i <= iterations; i++) {
    intc_2 // 1
    +
    frame_bury 34
    b verify_while_top@17

verify_after_while@19:
    // contracts/verifier.algo.ts:381
    // return { L, challenges };
    pushbytes 0x01a2
    frame_dig 13
    concat
    frame_dig 0
    concat
    dup
    frame_bury 7
    // contracts/verifier.algo.ts:228
    // namedLog("L1(xi)", (L[1] as Uint256).bytes);
    dup
    intc_3 // 0
    extract_uint16
    dig 1
    len
    substring3
    dup
    extract 2 0
    frame_bury 5
    extract 34 32
    dup
    frame_bury 16
    pushbytes "L1(xi)"
    // contracts/verifier.algo.ts:146
    // log(name);
    log
    // contracts/verifier.algo.ts:147
    // log(value);
    log
    // contracts/verifier.algo.ts:385
    // let pi = BigUint(0);
    bytec_2 // 0x
    frame_bury 24
    // contracts/verifier.algo.ts:386
    // for (let i: uint64 = 0; i < publicSignals.length; i++) {
    intc_3 // 0
    frame_bury 32

verify_while_top@22:
    // contracts/verifier.algo.ts:386
    // for (let i: uint64 = 0; i < publicSignals.length; i++) {
    frame_dig 32
    frame_dig 46
    <
    bz verify_after_while@24
    // contracts/verifier.algo.ts:387
    // const w = frScalar((publicSignals[i] as Uint256).native);
    frame_dig -2
    extract 2 0
    frame_dig 32
    dup
    cover 2
    intc_1 // 32
    *
    intc_1 // 32
    extract3 // on error: index access is out of bounds
    // contracts/verifier.algo.ts:105
    // return a % BLS12_381_SCALAR_MODULUS;
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:388
    // pi = frSub(pi, frMul(w, (L[i + 1] as Uint256).native));
    swap
    intc_2 // 1
    +
    dup
    frame_bury 32
    intc_1 // 32
    *
    frame_dig 5
    swap
    intc_1 // 32
    extract3 // on error: index access is out of bounds
    // contracts/verifier.algo.ts:46
    // return (a * b) % BLS12_381_SCALAR_MODULUS;
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:388
    // pi = frSub(pi, frMul(w, (L[i + 1] as Uint256).native));
    frame_dig 24
    swap
    callsub frSub
    frame_bury 24
    b verify_while_top@22

verify_after_while@24:
    // contracts/verifier.algo.ts:390
    // return new Uint256(pi);
    frame_dig 24
    dup
    len
    intc_1 // 32
    <=
    assert // overflow
    frame_dig 6
    dup
    cover 2
    b|
    // contracts/verifier.algo.ts:233
    // namedLog("PI(xi)", pi.bytes);
    pushbytes "PI(xi)"
    // contracts/verifier.algo.ts:146
    // log(name);
    log
    // contracts/verifier.algo.ts:147
    // log(value);
    dup
    log
    // contracts/verifier.algo.ts:403
    // frMul(challenges.alpha.native, challenges.alpha.native),
    frame_dig 7
    pushints 2 416 // 2, 416
    extract3
    dup
    extract 64 32
    // contracts/verifier.algo.ts:46
    // return (a * b) % BLS12_381_SCALAR_MODULUS;
    dup
    dig 1
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    frame_dig 16
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:408
    // frMul(challenges.beta.native, proof.eval_s1.native),
    dig 2
    extract 0 32
    // contracts/verifier.algo.ts:46
    // return (a * b) % BLS12_381_SCALAR_MODULUS;
    dup
    frame_dig 12
    dup
    cover 8
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:99
    // const aN: biguint = a % r;
    frame_dig 1
    dup
    cover 6
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:100
    // const bN: biguint = b % r;
    swap
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:101
    // return (aN + bN) % r;
    dig 1
    b+
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:411
    // e3a = frAdd(e3a, challenges.gamma.native);
    dig 5
    extract 32 32
    // contracts/verifier.algo.ts:99
    // const aN: biguint = a % r;
    swap
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:100
    // const bN: biguint = b % r;
    swap
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:101
    // return (aN + bN) % r;
    swap
    dig 1
    b+
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:46
    // return (a * b) % BLS12_381_SCALAR_MODULUS;
    dig 3
    frame_dig 10
    dup
    cover 12
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:99
    // const aN: biguint = a % r;
    frame_dig 3
    dup
    cover 4
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:100
    // const bN: biguint = b % r;
    swap
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:101
    // return (aN + bN) % r;
    dig 1
    b+
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:99
    // const aN: biguint = a % r;
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:101
    // return (aN + bN) % r;
    dig 3
    b+
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:99
    // const aN: biguint = a % r;
    frame_dig 2
    dup
    cover 8
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:101
    // return (aN + bN) % r;
    dup
    dig 5
    b+
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:46
    // return (a * b) % BLS12_381_SCALAR_MODULUS;
    uncover 4
    uncover 3
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    dup
    uncover 2
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    frame_dig 11
    dup
    cover 15
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    dig 10
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:425
    // const r0 = frSub(frSub(e1, e2), e3);
    uncover 13
    dig 10
    callsub frSub
    swap
    callsub frSub
    // contracts/verifier.algo.ts:427
    // return new Uint256(r0);
    dup
    len
    intc_1 // 32
    <=
    assert // overflow
    uncover 14
    b|
    // contracts/verifier.algo.ts:236
    // namedLog("r0", r0.bytes);
    pushbytes "r0"
    // contracts/verifier.algo.ts:146
    // log(name);
    log
    // contracts/verifier.algo.ts:147
    // log(value);
    dup
    log
    // contracts/verifier.algo.ts:46
    // return (a * b) % BLS12_381_SCALAR_MODULUS;
    dig 12
    dig 6
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:151
    // return op.EllipticCurve.scalarMul(op.Ec.BLS12_381g1, p, Bytes(s)).toFixed({
    frame_dig 37
    swap
    ec_scalar_mul BLS12_381g1
    // contracts/verifier.algo.ts:151-153
    // return op.EllipticCurve.scalarMul(op.Ec.BLS12_381g1, p, Bytes(s)).toFixed({
    //   length: 96,
    // });
    dup
    len
    intc_0 // 96
    ==
    assert // Length must be 96
    // contracts/verifier.algo.ts:151
    // return op.EllipticCurve.scalarMul(op.Ec.BLS12_381g1, p, Bytes(s)).toFixed({
    frame_dig 38
    dig 14
    ec_scalar_mul BLS12_381g1
    // contracts/verifier.algo.ts:151-153
    // return op.EllipticCurve.scalarMul(op.Ec.BLS12_381g1, p, Bytes(s)).toFixed({
    //   length: 96,
    // });
    dup
    len
    intc_0 // 96
    ==
    assert // Length must be 96
    // contracts/verifier.algo.ts:157
    // return op.EllipticCurve.add(op.Ec.BLS12_381g1, p1, p2).toFixed({
    ec_add BLS12_381g1
    // contracts/verifier.algo.ts:157-159
    // return op.EllipticCurve.add(op.Ec.BLS12_381g1, p1, p2).toFixed({
    //   length: 96,
    // });
    dup
    len
    intc_0 // 96
    ==
    assert // Length must be 96
    // contracts/verifier.algo.ts:151
    // return op.EllipticCurve.scalarMul(op.Ec.BLS12_381g1, p, Bytes(s)).toFixed({
    frame_dig 39
    dig 7
    ec_scalar_mul BLS12_381g1
    // contracts/verifier.algo.ts:151-153
    // return op.EllipticCurve.scalarMul(op.Ec.BLS12_381g1, p, Bytes(s)).toFixed({
    //   length: 96,
    // });
    dup
    len
    intc_0 // 96
    ==
    assert // Length must be 96
    // contracts/verifier.algo.ts:157
    // return op.EllipticCurve.add(op.Ec.BLS12_381g1, p1, p2).toFixed({
    ec_add BLS12_381g1
    // contracts/verifier.algo.ts:157-159
    // return op.EllipticCurve.add(op.Ec.BLS12_381g1, p1, p2).toFixed({
    //   length: 96,
    // });
    dup
    len
    intc_0 // 96
    ==
    assert // Length must be 96
    // contracts/verifier.algo.ts:151
    // return op.EllipticCurve.scalarMul(op.Ec.BLS12_381g1, p, Bytes(s)).toFixed({
    frame_dig 40
    dig 10
    ec_scalar_mul BLS12_381g1
    // contracts/verifier.algo.ts:151-153
    // return op.EllipticCurve.scalarMul(op.Ec.BLS12_381g1, p, Bytes(s)).toFixed({
    //   length: 96,
    // });
    dup
    len
    intc_0 // 96
    ==
    assert // Length must be 96
    // contracts/verifier.algo.ts:157
    // return op.EllipticCurve.add(op.Ec.BLS12_381g1, p1, p2).toFixed({
    ec_add BLS12_381g1
    // contracts/verifier.algo.ts:157-159
    // return op.EllipticCurve.add(op.Ec.BLS12_381g1, p1, p2).toFixed({
    //   length: 96,
    // });
    dup
    len
    intc_0 // 96
    ==
    assert // Length must be 96
    // contracts/verifier.algo.ts:157
    // return op.EllipticCurve.add(op.Ec.BLS12_381g1, p1, p2).toFixed({
    frame_dig 41
    ec_add BLS12_381g1
    // contracts/verifier.algo.ts:157-159
    // return op.EllipticCurve.add(op.Ec.BLS12_381g1, p1, p2).toFixed({
    //   length: 96,
    // });
    dup
    len
    intc_0 // 96
    ==
    assert // Length must be 96
    // contracts/verifier.algo.ts:442
    // const betaxi = frMul(challenges.beta.native, challenges.xi.native);
    dig 12
    extract 96 32
    // contracts/verifier.algo.ts:46
    // return (a * b) % BLS12_381_SCALAR_MODULUS;
    dig 9
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:100
    // const bN: biguint = b % r;
    dup
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:101
    // return (aN + bN) % r;
    uncover 9
    b+
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:99
    // const aN: biguint = a % r;
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:101
    // return (aN + bN) % r;
    dig 7
    b+
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:449
    // frAdd(proof.eval_b.native, frMul(betaxi, BigUint(vk.k1))),
    frame_dig 36
    dup
    cover 3
    intc 12 // 784
    pushint 8 // 8
    extract3
    // contracts/verifier.algo.ts:46
    // return (a * b) % BLS12_381_SCALAR_MODULUS;
    dig 2
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:100
    // const bN: biguint = b % r;
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:101
    // return (aN + bN) % r;
    uncover 8
    b+
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:99
    // const aN: biguint = a % r;
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:101
    // return (aN + bN) % r;
    dig 8
    b+
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:453
    // frAdd(proof.eval_c.native, frMul(betaxi, BigUint(vk.k2))),
    uncover 3
    intc 13 // 792
    pushint 8 // 8
    extract3
    // contracts/verifier.algo.ts:46
    // return (a * b) % BLS12_381_SCALAR_MODULUS;
    uncover 3
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:100
    // const bN: biguint = b % r;
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:101
    // return (aN + bN) % r;
    uncover 6
    b+
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:99
    // const aN: biguint = a % r;
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:101
    // return (aN + bN) % r;
    uncover 6
    b+
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:46
    // return (a * b) % BLS12_381_SCALAR_MODULUS;
    cover 2
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    dig 8
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:99
    // const aN: biguint = a % r;
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:100
    // const bN: biguint = b % r;
    uncover 7
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:101
    // return (aN + bN) % r;
    b+
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:464
    // const d2 = g1TimesFr(proof.Z, frAdd(frAdd(d2a, d2b), challenges.u.native));
    dig 8
    pushint 320 // 320
    intc_1 // 32
    extract3
    // contracts/verifier.algo.ts:99
    // const aN: biguint = a % r;
    swap
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:100
    // const bN: biguint = b % r;
    dig 1
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:101
    // return (aN + bN) % r;
    b+
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:151
    // return op.EllipticCurve.scalarMul(op.Ec.BLS12_381g1, p, Bytes(s)).toFixed({
    frame_dig 21
    swap
    ec_scalar_mul BLS12_381g1
    // contracts/verifier.algo.ts:151-153
    // return op.EllipticCurve.scalarMul(op.Ec.BLS12_381g1, p, Bytes(s)).toFixed({
    //   length: 96,
    // });
    dup
    len
    intc_0 // 96
    ==
    assert // Length must be 96
    // contracts/verifier.algo.ts:46
    // return (a * b) % BLS12_381_SCALAR_MODULUS;
    uncover 8
    uncover 7
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    dig 10
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    uncover 5
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:151
    // return op.EllipticCurve.scalarMul(op.Ec.BLS12_381g1, p, Bytes(s)).toFixed({
    frame_dig 44
    swap
    ec_scalar_mul BLS12_381g1
    // contracts/verifier.algo.ts:151-153
    // return op.EllipticCurve.scalarMul(op.Ec.BLS12_381g1, p, Bytes(s)).toFixed({
    //   length: 96,
    // });
    dup
    len
    intc_0 // 96
    ==
    assert // Length must be 96
    // contracts/verifier.algo.ts:488
    // const d4mid = g1TimesFr(proof.T2, challenges.xin.native);
    dig 7
    intc 15 // 352
    intc_1 // 32
    extract3
    // contracts/verifier.algo.ts:151
    // return op.EllipticCurve.scalarMul(op.Ec.BLS12_381g1, p, Bytes(s)).toFixed({
    frame_dig 22
    dig 1
    ec_scalar_mul BLS12_381g1
    // contracts/verifier.algo.ts:151-153
    // return op.EllipticCurve.scalarMul(op.Ec.BLS12_381g1, p, Bytes(s)).toFixed({
    //   length: 96,
    // });
    dup
    len
    intc_0 // 96
    ==
    assert // Length must be 96
    // contracts/verifier.algo.ts:46
    // return (a * b) % BLS12_381_SCALAR_MODULUS;
    dig 1
    uncover 2
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:151
    // return op.EllipticCurve.scalarMul(op.Ec.BLS12_381g1, p, Bytes(s)).toFixed({
    frame_dig 23
    swap
    ec_scalar_mul BLS12_381g1
    // contracts/verifier.algo.ts:151-153
    // return op.EllipticCurve.scalarMul(op.Ec.BLS12_381g1, p, Bytes(s)).toFixed({
    //   length: 96,
    // });
    dup
    len
    intc_0 // 96
    ==
    assert // Length must be 96
    // contracts/verifier.algo.ts:157
    // return op.EllipticCurve.add(op.Ec.BLS12_381g1, p1, p2).toFixed({
    ec_add BLS12_381g1
    // contracts/verifier.algo.ts:157-159
    // return op.EllipticCurve.add(op.Ec.BLS12_381g1, p1, p2).toFixed({
    //   length: 96,
    // });
    dup
    len
    intc_0 // 96
    ==
    assert // Length must be 96
    // contracts/verifier.algo.ts:157
    // return op.EllipticCurve.add(op.Ec.BLS12_381g1, p1, p2).toFixed({
    frame_dig 14
    swap
    ec_add BLS12_381g1
    // contracts/verifier.algo.ts:157-159
    // return op.EllipticCurve.add(op.Ec.BLS12_381g1, p1, p2).toFixed({
    //   length: 96,
    // });
    dup
    len
    intc_0 // 96
    ==
    assert // Length must be 96
    // contracts/verifier.algo.ts:494
    // d4 = g1TimesFr(d4, challenges.zh.native);
    dig 8
    intc 4 // 384
    intc_1 // 32
    extract3
    // contracts/verifier.algo.ts:151
    // return op.EllipticCurve.scalarMul(op.Ec.BLS12_381g1, p, Bytes(s)).toFixed({
    ec_scalar_mul BLS12_381g1
    // contracts/verifier.algo.ts:151-153
    // return op.EllipticCurve.scalarMul(op.Ec.BLS12_381g1, p, Bytes(s)).toFixed({
    //   length: 96,
    // });
    dup
    len
    intc_0 // 96
    ==
    assert // Length must be 96
    // contracts/verifier.algo.ts:157
    // return op.EllipticCurve.add(op.Ec.BLS12_381g1, p1, p2).toFixed({
    uncover 4
    uncover 3
    ec_add BLS12_381g1
    // contracts/verifier.algo.ts:157-159
    // return op.EllipticCurve.add(op.Ec.BLS12_381g1, p1, p2).toFixed({
    //   length: 96,
    // });
    dup
    len
    intc_0 // 96
    ==
    assert // Length must be 96
    // contracts/verifier.algo.ts:151
    // return op.EllipticCurve.scalarMul(op.Ec.BLS12_381g1, p, Bytes(s)).toFixed({
    uncover 2
    // contracts/verifier.algo.ts:163
    // return g1TimesFr(p, R_MINUS_1);
    bytec 4 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000000
    // contracts/verifier.algo.ts:151
    // return op.EllipticCurve.scalarMul(op.Ec.BLS12_381g1, p, Bytes(s)).toFixed({
    ec_scalar_mul BLS12_381g1
    // contracts/verifier.algo.ts:151-153
    // return op.EllipticCurve.scalarMul(op.Ec.BLS12_381g1, p, Bytes(s)).toFixed({
    //   length: 96,
    // });
    dup
    len
    intc_0 // 96
    ==
    assert // Length must be 96
    // contracts/verifier.algo.ts:157
    // return op.EllipticCurve.add(op.Ec.BLS12_381g1, p1, p2).toFixed({
    ec_add BLS12_381g1
    // contracts/verifier.algo.ts:157-159
    // return op.EllipticCurve.add(op.Ec.BLS12_381g1, p1, p2).toFixed({
    //   length: 96,
    // });
    dup
    len
    intc_0 // 96
    ==
    assert // Length must be 96
    // contracts/verifier.algo.ts:151
    // return op.EllipticCurve.scalarMul(op.Ec.BLS12_381g1, p, Bytes(s)).toFixed({
    swap
    // contracts/verifier.algo.ts:163
    // return g1TimesFr(p, R_MINUS_1);
    bytec 4 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000000
    // contracts/verifier.algo.ts:151
    // return op.EllipticCurve.scalarMul(op.Ec.BLS12_381g1, p, Bytes(s)).toFixed({
    ec_scalar_mul BLS12_381g1
    // contracts/verifier.algo.ts:151-153
    // return op.EllipticCurve.scalarMul(op.Ec.BLS12_381g1, p, Bytes(s)).toFixed({
    //   length: 96,
    // });
    dup
    len
    intc_0 // 96
    ==
    assert // Length must be 96
    // contracts/verifier.algo.ts:157
    // return op.EllipticCurve.add(op.Ec.BLS12_381g1, p1, p2).toFixed({
    ec_add BLS12_381g1
    // contracts/verifier.algo.ts:157-159
    // return op.EllipticCurve.add(op.Ec.BLS12_381g1, p1, p2).toFixed({
    //   length: 96,
    // });
    dup
    len
    intc_0 // 96
    ==
    assert // Length must be 96
    // contracts/verifier.algo.ts:239
    // namedLog("D", d);
    pushbytes "D"
    // contracts/verifier.algo.ts:146
    // log(name);
    log
    // contracts/verifier.algo.ts:147
    // log(value);
    dup
    log
    // contracts/verifier.algo.ts:507
    // let res = g1Add(D, g1TimesFr(proof.A, (challenges.v[1] as Uint256).native));
    uncover 5
    extract 128 192
    dup
    extract 32 32 // on error: index access is out of bounds
    // contracts/verifier.algo.ts:151
    // return op.EllipticCurve.scalarMul(op.Ec.BLS12_381g1, p, Bytes(s)).toFixed({
    frame_dig 18
    dig 1
    ec_scalar_mul BLS12_381g1
    // contracts/verifier.algo.ts:151-153
    // return op.EllipticCurve.scalarMul(op.Ec.BLS12_381g1, p, Bytes(s)).toFixed({
    //   length: 96,
    // });
    dup
    len
    intc_0 // 96
    ==
    assert // Length must be 96
    // contracts/verifier.algo.ts:157
    // return op.EllipticCurve.add(op.Ec.BLS12_381g1, p1, p2).toFixed({
    uncover 3
    swap
    ec_add BLS12_381g1
    // contracts/verifier.algo.ts:157-159
    // return op.EllipticCurve.add(op.Ec.BLS12_381g1, p1, p2).toFixed({
    //   length: 96,
    // });
    dup
    len
    intc_0 // 96
    ==
    assert // Length must be 96
    // contracts/verifier.algo.ts:507-508
    // let res = g1Add(D, g1TimesFr(proof.A, (challenges.v[1] as Uint256).native));
    // res = g1Add(res, g1TimesFr(proof.B, (challenges.v[2] as Uint256).native));
    dig 2
    extract 64 32 // on error: index access is out of bounds
    // contracts/verifier.algo.ts:151
    // return op.EllipticCurve.scalarMul(op.Ec.BLS12_381g1, p, Bytes(s)).toFixed({
    frame_dig 19
    dig 1
    ec_scalar_mul BLS12_381g1
    // contracts/verifier.algo.ts:151-153
    // return op.EllipticCurve.scalarMul(op.Ec.BLS12_381g1, p, Bytes(s)).toFixed({
    //   length: 96,
    // });
    dup
    len
    intc_0 // 96
    ==
    assert // Length must be 96
    // contracts/verifier.algo.ts:157
    // return op.EllipticCurve.add(op.Ec.BLS12_381g1, p1, p2).toFixed({
    uncover 2
    swap
    ec_add BLS12_381g1
    // contracts/verifier.algo.ts:157-159
    // return op.EllipticCurve.add(op.Ec.BLS12_381g1, p1, p2).toFixed({
    //   length: 96,
    // });
    dup
    len
    intc_0 // 96
    ==
    assert // Length must be 96
    // contracts/verifier.algo.ts:509
    // res = g1Add(res, g1TimesFr(proof.C, (challenges.v[3] as Uint256).native));
    dig 3
    extract 96 32 // on error: index access is out of bounds
    // contracts/verifier.algo.ts:151
    // return op.EllipticCurve.scalarMul(op.Ec.BLS12_381g1, p, Bytes(s)).toFixed({
    frame_dig 20
    dig 1
    ec_scalar_mul BLS12_381g1
    // contracts/verifier.algo.ts:151-153
    // return op.EllipticCurve.scalarMul(op.Ec.BLS12_381g1, p, Bytes(s)).toFixed({
    //   length: 96,
    // });
    dup
    len
    intc_0 // 96
    ==
    assert // Length must be 96
    // contracts/verifier.algo.ts:157
    // return op.EllipticCurve.add(op.Ec.BLS12_381g1, p1, p2).toFixed({
    uncover 2
    swap
    ec_add BLS12_381g1
    // contracts/verifier.algo.ts:157-159
    // return op.EllipticCurve.add(op.Ec.BLS12_381g1, p1, p2).toFixed({
    //   length: 96,
    // });
    dup
    len
    intc_0 // 96
    ==
    assert // Length must be 96
    // contracts/verifier.algo.ts:511
    // res = g1Add(res, g1TimesFr(vk.S1, (challenges.v[4] as Uint256).native));
    dig 4
    extract 128 32 // on error: index access is out of bounds
    // contracts/verifier.algo.ts:151
    // return op.EllipticCurve.scalarMul(op.Ec.BLS12_381g1, p, Bytes(s)).toFixed({
    frame_dig 42
    dig 1
    ec_scalar_mul BLS12_381g1
    // contracts/verifier.algo.ts:151-153
    // return op.EllipticCurve.scalarMul(op.Ec.BLS12_381g1, p, Bytes(s)).toFixed({
    //   length: 96,
    // });
    dup
    len
    intc_0 // 96
    ==
    assert // Length must be 96
    // contracts/verifier.algo.ts:157
    // return op.EllipticCurve.add(op.Ec.BLS12_381g1, p1, p2).toFixed({
    uncover 2
    swap
    ec_add BLS12_381g1
    // contracts/verifier.algo.ts:157-159
    // return op.EllipticCurve.add(op.Ec.BLS12_381g1, p1, p2).toFixed({
    //   length: 96,
    // });
    dup
    len
    intc_0 // 96
    ==
    assert // Length must be 96
    // contracts/verifier.algo.ts:512
    // res = g1Add(res, g1TimesFr(vk.S2, (challenges.v[5] as Uint256).native));
    uncover 5
    extract 160 32 // on error: index access is out of bounds
    // contracts/verifier.algo.ts:151
    // return op.EllipticCurve.scalarMul(op.Ec.BLS12_381g1, p, Bytes(s)).toFixed({
    frame_dig 43
    dig 1
    ec_scalar_mul BLS12_381g1
    // contracts/verifier.algo.ts:151-153
    // return op.EllipticCurve.scalarMul(op.Ec.BLS12_381g1, p, Bytes(s)).toFixed({
    //   length: 96,
    // });
    dup
    len
    intc_0 // 96
    ==
    assert // Length must be 96
    // contracts/verifier.algo.ts:157
    // return op.EllipticCurve.add(op.Ec.BLS12_381g1, p1, p2).toFixed({
    uncover 2
    swap
    ec_add BLS12_381g1
    // contracts/verifier.algo.ts:157-159
    // return op.EllipticCurve.add(op.Ec.BLS12_381g1, p1, p2).toFixed({
    //   length: 96,
    // });
    dup
    len
    intc_0 // 96
    ==
    assert // Length must be 96
    // contracts/verifier.algo.ts:242
    // namedLog("F", f);
    pushbytes "F"
    // contracts/verifier.algo.ts:146
    // log(name);
    log
    // contracts/verifier.algo.ts:147
    // log(value);
    log
    // contracts/verifier.algo.ts:46
    // return (a * b) % BLS12_381_SCALAR_MODULUS;
    uncover 4
    uncover 9
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:522-525
    // let e = frSub(
    //   frMul((challenges.v[1] as Uint256).native, proof.eval_a.native),
    //   r0.native,
    // );
    uncover 6
    callsub frSub
    // contracts/verifier.algo.ts:46
    // return (a * b) % BLS12_381_SCALAR_MODULUS;
    uncover 4
    uncover 6
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:99
    // const aN: biguint = a % r;
    swap
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:100
    // const bN: biguint = b % r;
    swap
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:101
    // return (aN + bN) % r;
    b+
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:46
    // return (a * b) % BLS12_381_SCALAR_MODULUS;
    uncover 3
    uncover 5
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:99
    // const aN: biguint = a % r;
    swap
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:100
    // const bN: biguint = b % r;
    swap
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:101
    // return (aN + bN) % r;
    b+
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:46
    // return (a * b) % BLS12_381_SCALAR_MODULUS;
    uncover 2
    uncover 6
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:99
    // const aN: biguint = a % r;
    swap
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:100
    // const bN: biguint = b % r;
    swap
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:101
    // return (aN + bN) % r;
    b+
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:46
    // return (a * b) % BLS12_381_SCALAR_MODULUS;
    swap
    uncover 4
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:99
    // const aN: biguint = a % r;
    swap
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:100
    // const bN: biguint = b % r;
    swap
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:101
    // return (aN + bN) % r;
    b+
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:46
    // return (a * b) % BLS12_381_SCALAR_MODULUS;
    swap
    uncover 2
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:99
    // const aN: biguint = a % r;
    swap
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:100
    // const bN: biguint = b % r;
    swap
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:101
    // return (aN + bN) % r;
    b+
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:545
    // const res = g1TimesFr(G1_ONE.toFixed({ length: 96 }), e);
    pushbytes 0x17f1d3a73197d7942695638c4fa9ac0fc3688c4f9774b905a14e3a3f171bac586c55e83ff97a1aeffb3af00adb22c6bb08b3f481e3aaa0f1a09e30ed741d8ae4fcf5e095d5d00af600db18cb2c04b3edd03cc744a2888ae40caa232946c5e7e1
    // contracts/verifier.algo.ts:151
    // return op.EllipticCurve.scalarMul(op.Ec.BLS12_381g1, p, Bytes(s)).toFixed({
    swap
    ec_scalar_mul BLS12_381g1
    // contracts/verifier.algo.ts:151-153
    // return op.EllipticCurve.scalarMul(op.Ec.BLS12_381g1, p, Bytes(s)).toFixed({
    //   length: 96,
    // });
    dup
    len
    intc_0 // 96
    ==
    assert // Length must be 96
    // contracts/verifier.algo.ts:245
    // namedLog("E", e);
    pushbytes "E"
    // contracts/verifier.algo.ts:146
    // log(name);
    log
    // contracts/verifier.algo.ts:147
    // log(value);
    log
    // contracts/verifier.algo.ts:252
    // return true;
    intc_2 // 1
    frame_bury 0
    retsub

verify_ternary_false@15:
    frame_dig 35
    frame_bury 33
    b verify_ternary_merge@16


// contracts/verifier.algo.ts::PlonkVerifier.getChallenge(td: bytes) -> bytes:
getChallenge:
    // contracts/verifier.algo.ts:255
    // private getChallenge(td: bytes): Uint256 {
    proto 1 1
    // contracts/verifier.algo.ts:256
    // let hash = op.keccak256(td);
    frame_dig -1
    keccak256
    // contracts/verifier.algo.ts:105
    // return a % BLS12_381_SCALAR_MODULUS;
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:257
    // return new Uint256(frScalar(BigUint(hash)));
    dup
    len
    intc_1 // 32
    <=
    assert // overflow
    intc_1 // 32
    bzero
    b|
    retsub
