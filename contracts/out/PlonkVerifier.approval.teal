#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 32 96 1 0
    bytecblock 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    // contracts/verifier.algo.ts:136
    // export class PlonkVerifier extends Contract {
    txn NumAppArgs
    bz main_bare_routing@6
    pushbytes 0x5812d0f4 // method "verify((byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64),byte[32][],(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[32],byte[32],byte[32],byte[32],byte[32],byte[32]))bool"
    txna ApplicationArgs 0
    match main_verify_route@3

main_after_if_else@10:
    // contracts/verifier.algo.ts:136
    // export class PlonkVerifier extends Contract {
    intc_3 // 0
    return

main_verify_route@3:
    // contracts/verifier.algo.ts:137-141
    // public verify(
    //   vk: VerificationKey,
    //   signals: PublicSignals,
    //   proof: Proof,
    // ): boolean {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // contracts/verifier.algo.ts:136
    // export class PlonkVerifier extends Contract {
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    // contracts/verifier.algo.ts:137-141
    // public verify(
    //   vk: VerificationKey,
    //   signals: PublicSignals,
    //   proof: Proof,
    // ): boolean {
    callsub verify
    pushbytes 0x00
    intc_3 // 0
    uncover 2
    setbit
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_2 // 1
    return

main_bare_routing@6:
    // contracts/verifier.algo.ts:136
    // export class PlonkVerifier extends Contract {
    txn OnCompletion
    bnz main_after_if_else@10
    txn ApplicationID
    !
    assert // can only call when creating
    intc_2 // 1
    return


// contracts/verifier.algo.ts::b32(a: bytes) -> bytes:
b32:
    // contracts/verifier.algo.ts:81
    // function b32(a: biguint): bytes<32> {
    proto 1 1
    // contracts/verifier.algo.ts:82
    // return new Uint256(a).bytes.toFixed({ length: 32 });
    frame_dig -1
    len
    intc_0 // 32
    <=
    assert // overflow
    intc_0 // 32
    bzero
    frame_dig -1
    b|
    dup
    len
    intc_0 // 32
    ==
    assert // Length must be 32
    retsub


// contracts/verifier.algo.ts::PlonkVerifier.verify(vk: bytes, signals: bytes, proof: bytes) -> uint64:
verify:
    // contracts/verifier.algo.ts:137-141
    // public verify(
    //   vk: VerificationKey,
    //   signals: PublicSignals,
    //   proof: Proof,
    // ): boolean {
    proto 3 1
    intc_3 // 0
    dupn 4
    pushbytes ""
    // contracts/verifier.algo.ts:161
    // let td = op.concat(vk.Qm, vk.Ql);
    frame_dig -3
    extract 0 96
    frame_dig -3
    extract 96 96
    concat
    // contracts/verifier.algo.ts:162
    // td = op.concat(td, vk.Qr);
    frame_dig -3
    extract 192 96
    concat
    // contracts/verifier.algo.ts:163
    // td = op.concat(td, vk.Qo);
    frame_dig -3
    pushint 288 // 288
    intc_1 // 96
    extract3
    concat
    // contracts/verifier.algo.ts:164
    // td = op.concat(td, vk.Qc);
    frame_dig -3
    pushint 384 // 384
    intc_1 // 96
    extract3
    concat
    // contracts/verifier.algo.ts:165
    // td = op.concat(td, vk.S1);
    frame_dig -3
    pushint 480 // 480
    intc_1 // 96
    extract3
    concat
    // contracts/verifier.algo.ts:166
    // td = op.concat(td, vk.S2);
    frame_dig -3
    pushint 576 // 576
    intc_1 // 96
    extract3
    concat
    // contracts/verifier.algo.ts:167
    // td = op.concat(td, vk.S3);
    frame_dig -3
    pushint 672 // 672
    intc_1 // 96
    extract3
    concat
    dup
    // contracts/verifier.algo.ts:169
    // namedLog("getChallenge 8", keccak256(td));
    keccak256
    pushbytes "getChallenge 8"
    // contracts/verifier.algo.ts:132
    // log(name);
    log
    // contracts/verifier.algo.ts:133
    // log(value);
    log
    // contracts/verifier.algo.ts:170
    // for (const signal of signals) {
    frame_dig -2
    intc_3 // 0
    extract_uint16
    intc_3 // 0

verify_for_header@2:
    // contracts/verifier.algo.ts:170
    // for (const signal of signals) {
    frame_dig 8
    frame_dig 7
    <
    bz verify_after_for@5
    frame_dig -2
    extract 2 0
    frame_dig 8
    dup
    cover 2
    intc_0 // 32
    *
    intc_0 // 32
    extract3 // on error: index access is out of bounds
    // contracts/verifier.algo.ts:78
    // return a % BLS12_381_SCALAR_MODULUS;
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:171
    // td = op.concat(td, b32(frScalar(BigUint(signal))));
    callsub b32
    frame_dig 6
    swap
    concat
    frame_bury 6
    intc_2 // 1
    +
    frame_bury 8
    b verify_for_header@2

verify_after_for@5:
    // contracts/verifier.algo.ts:174
    // td = op.concat(td, proof.A);
    frame_dig -1
    extract 0 96
    frame_dig 6
    swap
    concat
    // contracts/verifier.algo.ts:175
    // td = op.concat(td, proof.B);
    frame_dig -1
    extract 96 96
    concat
    // contracts/verifier.algo.ts:176
    // td = op.concat(td, proof.C);
    frame_dig -1
    extract 192 96
    concat
    // contracts/verifier.algo.ts:149
    // let hash = op.keccak256(td);
    keccak256
    // contracts/verifier.algo.ts:78
    // return a % BLS12_381_SCALAR_MODULUS;
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:150
    // return b32(frScalar(BigUint(hash)));
    callsub b32
    dup
    frame_bury 1
    // contracts/verifier.algo.ts:149
    // let hash = op.keccak256(td);
    dup
    keccak256
    // contracts/verifier.algo.ts:78
    // return a % BLS12_381_SCALAR_MODULUS;
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:150
    // return b32(frScalar(BigUint(hash)));
    callsub b32
    dup
    frame_bury 2
    // contracts/verifier.algo.ts:190
    // td = op.concat(td, gamma);
    dig 1
    swap
    concat
    dup
    frame_bury 6
    // contracts/verifier.algo.ts:191
    // td = op.concat(td, proof.Z);
    frame_dig -1
    pushint 288 // 288
    intc_1 // 96
    extract3
    concat
    // contracts/verifier.algo.ts:149
    // let hash = op.keccak256(td);
    keccak256
    // contracts/verifier.algo.ts:78
    // return a % BLS12_381_SCALAR_MODULUS;
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:150
    // return b32(frScalar(BigUint(hash)));
    callsub b32
    frame_bury 0
    // contracts/verifier.algo.ts:199
    // td = op.concat(td, proof.T1);
    frame_dig -1
    pushint 384 // 384
    intc_1 // 96
    extract3
    concat
    // contracts/verifier.algo.ts:200
    // td = op.concat(td, proof.T2);
    frame_dig -1
    pushint 480 // 480
    intc_1 // 96
    extract3
    concat
    // contracts/verifier.algo.ts:201
    // td = op.concat(td, proof.T3);
    frame_dig -1
    pushint 576 // 576
    intc_1 // 96
    extract3
    concat
    // contracts/verifier.algo.ts:149
    // let hash = op.keccak256(td);
    keccak256
    // contracts/verifier.algo.ts:78
    // return a % BLS12_381_SCALAR_MODULUS;
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:150
    // return b32(frScalar(BigUint(hash)));
    callsub b32
    dup
    frame_bury 4
    // contracts/verifier.algo.ts:209
    // td = op.concat(td, proof.eval_a);
    frame_dig -1
    pushint 864 // 864
    intc_0 // 32
    extract3
    concat
    // contracts/verifier.algo.ts:210
    // td = op.concat(td, proof.eval_b);
    frame_dig -1
    pushint 896 // 896
    intc_0 // 32
    extract3
    concat
    // contracts/verifier.algo.ts:211
    // td = op.concat(td, proof.eval_c);
    frame_dig -1
    pushint 928 // 928
    intc_0 // 32
    extract3
    concat
    // contracts/verifier.algo.ts:212
    // td = op.concat(td, proof.eval_s1);
    frame_dig -1
    pushint 960 // 960
    intc_0 // 32
    extract3
    concat
    // contracts/verifier.algo.ts:213
    // td = op.concat(td, proof.eval_s2);
    frame_dig -1
    pushint 992 // 992
    intc_0 // 32
    extract3
    concat
    // contracts/verifier.algo.ts:214
    // td = op.concat(td, proof.eval_zw);
    frame_dig -1
    pushint 1024 // 1024
    intc_0 // 32
    extract3
    concat
    // contracts/verifier.algo.ts:216
    // const v = new FixedArray<bytes<32>, 6>();
    pushint 192 // 192
    bzero
    // contracts/verifier.algo.ts:149
    // let hash = op.keccak256(td);
    swap
    keccak256
    // contracts/verifier.algo.ts:78
    // return a % BLS12_381_SCALAR_MODULUS;
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:150
    // return b32(frScalar(BigUint(hash)));
    callsub b32
    // contracts/verifier.algo.ts:217
    // v[1] = this.getChallenge(td);
    dup
    len
    intc_0 // 32
    ==
    assert // invalid size
    replace2 32
    frame_bury 3
    // contracts/verifier.algo.ts:219
    // for (let i: uint64 = 2; i < 6; i++) {
    pushint 2 // 2
    frame_bury 5

verify_while_top@6:
    // contracts/verifier.algo.ts:219
    // for (let i: uint64 = 2; i < 6; i++) {
    frame_dig 5
    pushint 6 // 6
    <
    bz verify_after_while@8
    // contracts/verifier.algo.ts:220
    // v[i] = b32(frMul(BigUint(v[i - 1] as bytes<32>), BigUint(v[1])));
    frame_dig 5
    dup
    intc_2 // 1
    -
    intc_0 // 32
    *
    frame_dig 3
    dup
    uncover 2
    intc_0 // 32
    extract3 // on error: index access is out of bounds
    dig 1
    extract 32 32 // on error: index access is out of bounds
    // contracts/verifier.algo.ts:32
    // return (a * b) % BLS12_381_SCALAR_MODULUS;
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:220
    // v[i] = b32(frMul(BigUint(v[i - 1] as bytes<32>), BigUint(v[1])));
    callsub b32
    dup
    len
    intc_0 // 32
    ==
    assert // invalid size
    dig 2
    intc_0 // 32
    *
    swap
    replace3
    frame_bury 3
    // contracts/verifier.algo.ts:219
    // for (let i: uint64 = 2; i < 6; i++) {
    intc_2 // 1
    +
    frame_bury 5
    b verify_while_top@6

verify_after_while@8:
    // contracts/verifier.algo.ts:227
    // td = op.concat(td, proof.Wxi);
    frame_dig -1
    pushint 672 // 672
    intc_1 // 96
    extract3
    // contracts/verifier.algo.ts:228
    // td = op.concat(td, proof.Wxiw);
    frame_dig -1
    pushint 768 // 768
    intc_1 // 96
    extract3
    concat
    // contracts/verifier.algo.ts:149
    // let hash = op.keccak256(td);
    keccak256
    // contracts/verifier.algo.ts:78
    // return a % BLS12_381_SCALAR_MODULUS;
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:150
    // return b32(frScalar(BigUint(hash)));
    callsub b32
    // contracts/verifier.algo.ts:231-240
    // return {
    //   beta,
    //   gamma,
    //   alpha,
    //   xi,
    //   v,
    //   u,
    //   xin: Bytes<32>(),
    //   zh: Bytes<32>(),
    // };
    frame_dig 1
    len
    intc_0 // 32
    ==
    assert // invalid size
    frame_dig 2
    len
    intc_0 // 32
    ==
    assert // invalid size
    frame_dig 0
    dup
    len
    intc_0 // 32
    ==
    assert // invalid size
    frame_dig 6
    swap
    concat
    frame_dig 4
    dup
    cover 2
    len
    intc_0 // 32
    ==
    assert // invalid size
    swap
    concat
    frame_dig 3
    concat
    dig 1
    len
    intc_0 // 32
    ==
    assert // invalid size
    swap
    concat
    pushbytes 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
    concat
    // contracts/verifier.algo.ts:144
    // namedLog("beta", challenge.beta);
    extract 0 32
    pushbytes "beta"
    // contracts/verifier.algo.ts:132
    // log(name);
    log
    // contracts/verifier.algo.ts:133
    // log(value);
    log
    // contracts/verifier.algo.ts:145
    // return true;
    intc_2 // 1
    frame_bury 0
    retsub
