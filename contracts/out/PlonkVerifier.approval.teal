#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 32 1 96 0 384
    bytecblock 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001 0x 0x01
    // contracts/verifier.algo.ts:143
    // export class PlonkVerifier extends Contract {
    txn NumAppArgs
    bz main_bare_routing@6
    pushbytes 0xea757566 // method "verify((byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64),uint256[],(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint256,uint256,uint256,uint256,uint256,uint256))bool"
    txna ApplicationArgs 0
    match main_verify_route@3

main_after_if_else@10:
    // contracts/verifier.algo.ts:143
    // export class PlonkVerifier extends Contract {
    intc_3 // 0
    return

main_verify_route@3:
    // contracts/verifier.algo.ts:144-148
    // public verify(
    //   vk: VerificationKey,
    //   signals: PublicSignals,
    //   proof: Proof,
    // ): boolean {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // contracts/verifier.algo.ts:143
    // export class PlonkVerifier extends Contract {
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    // contracts/verifier.algo.ts:144-148
    // public verify(
    //   vk: VerificationKey,
    //   signals: PublicSignals,
    //   proof: Proof,
    // ): boolean {
    callsub verify
    pushbytes 0x00
    intc_3 // 0
    uncover 2
    setbit
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_bare_routing@6:
    // contracts/verifier.algo.ts:143
    // export class PlonkVerifier extends Contract {
    txn OnCompletion
    bnz main_after_if_else@10
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    return


// contracts/verifier.algo.ts::frSub(a: bytes, b: bytes) -> bytes:
frSub:
    // contracts/verifier.algo.ts:70
    // function frSub(a: biguint, b: biguint): biguint {
    proto 2 1
    // contracts/verifier.algo.ts:72
    // const aN: biguint = a % r;
    frame_dig -2
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:73
    // const bN: biguint = b % r;
    frame_dig -1
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:74
    // return (aN + r - bN) % r; // (a - b) mod r, guaranteed non-negative
    swap
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b+
    swap
    b-
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    retsub


// contracts/verifier.algo.ts::PlonkVerifier.verify(vk: bytes, signals: bytes, proof: bytes) -> uint64:
verify:
    // contracts/verifier.algo.ts:144-148
    // public verify(
    //   vk: VerificationKey,
    //   signals: PublicSignals,
    //   proof: Proof,
    // ): boolean {
    proto 3 1
    intc_3 // 0
    dupn 23
    bytec_1 // ""
    dupn 4
    // contracts/verifier.algo.ts:193
    // let td = op.concat(vk.Qm, vk.Ql);
    frame_dig -3
    extract 0 96
    frame_dig -3
    extract 96 96
    concat
    // contracts/verifier.algo.ts:194
    // td = op.concat(td, vk.Qr);
    frame_dig -3
    extract 192 96
    concat
    // contracts/verifier.algo.ts:195
    // td = op.concat(td, vk.Qo);
    frame_dig -3
    pushint 288 // 288
    intc_2 // 96
    extract3
    concat
    // contracts/verifier.algo.ts:196
    // td = op.concat(td, vk.Qc);
    frame_dig -3
    intc 4 // 384
    intc_2 // 96
    extract3
    concat
    // contracts/verifier.algo.ts:197
    // td = op.concat(td, vk.S1);
    frame_dig -3
    pushint 480 // 480
    intc_2 // 96
    extract3
    concat
    // contracts/verifier.algo.ts:198
    // td = op.concat(td, vk.S2);
    frame_dig -3
    pushint 576 // 576
    intc_2 // 96
    extract3
    concat
    // contracts/verifier.algo.ts:199
    // td = op.concat(td, vk.S3);
    frame_dig -3
    pushint 672 // 672
    intc_2 // 96
    extract3
    concat
    // contracts/verifier.algo.ts:201
    // for (const signal of signals) {
    frame_dig -2
    intc_3 // 0
    extract_uint16
    intc_3 // 0

verify_for_header@2:
    // contracts/verifier.algo.ts:201
    // for (const signal of signals) {
    frame_dig 31
    frame_dig 30
    <
    bz verify_after_for@5
    frame_dig -2
    extract 2 0
    frame_dig 31
    dup
    cover 2
    intc_0 // 32
    *
    intc_0 // 32
    extract3 // on error: index access is out of bounds
    // contracts/verifier.algo.ts:85
    // return a % BLS12_381_SCALAR_MODULUS;
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:89
    // return new Uint256(a).bytes.toFixed({ length: 32 });
    dup
    len
    intc_0 // 32
    <=
    assert // overflow
    intc_0 // 32
    bzero
    b|
    dup
    len
    intc_0 // 32
    ==
    assert // Length must be 32
    // contracts/verifier.algo.ts:202
    // td = op.concat(td, b32(frScalar(signal.native)));
    frame_dig 29
    swap
    concat
    frame_bury 29
    intc_1 // 1
    +
    frame_bury 31
    b verify_for_header@2

verify_after_for@5:
    // contracts/verifier.algo.ts:205
    // td = op.concat(td, proof.A);
    frame_dig -1
    extract 0 96
    frame_dig 29
    swap
    concat
    // contracts/verifier.algo.ts:206
    // td = op.concat(td, proof.B);
    frame_dig -1
    extract 96 96
    concat
    // contracts/verifier.algo.ts:207
    // td = op.concat(td, proof.C);
    frame_dig -1
    extract 192 96
    concat
    // contracts/verifier.algo.ts:209
    // const beta = this.getChallenge(td);
    callsub getChallenge
    // contracts/verifier.algo.ts:214
    // const gamma = this.getChallenge(td);
    dup
    callsub getChallenge
    // contracts/verifier.algo.ts:221
    // td = op.concat(td, gamma.bytes);
    concat
    dup
    frame_bury 29
    // contracts/verifier.algo.ts:222
    // td = op.concat(td, proof.Z);
    frame_dig -1
    pushint 288 // 288
    intc_2 // 96
    extract3
    concat
    // contracts/verifier.algo.ts:223
    // const alpha = this.getChallenge(td);
    callsub getChallenge
    dup
    frame_bury 8
    // contracts/verifier.algo.ts:230
    // td = op.concat(td, proof.T1);
    frame_dig -1
    intc 4 // 384
    intc_2 // 96
    extract3
    concat
    // contracts/verifier.algo.ts:231
    // td = op.concat(td, proof.T2);
    frame_dig -1
    pushint 480 // 480
    intc_2 // 96
    extract3
    concat
    // contracts/verifier.algo.ts:232
    // td = op.concat(td, proof.T3);
    frame_dig -1
    pushint 576 // 576
    intc_2 // 96
    extract3
    concat
    // contracts/verifier.algo.ts:233
    // const xi = this.getChallenge(td);
    callsub getChallenge
    dup
    frame_bury 22
    // contracts/verifier.algo.ts:240
    // td = op.concat(td, proof.eval_a.bytes);
    frame_dig -1
    pushint 864 // 864
    intc_0 // 32
    extract3
    dup
    frame_bury 1
    concat
    // contracts/verifier.algo.ts:241
    // td = op.concat(td, proof.eval_b.bytes);
    frame_dig -1
    pushint 896 // 896
    intc_0 // 32
    extract3
    dup
    frame_bury 3
    concat
    // contracts/verifier.algo.ts:242
    // td = op.concat(td, proof.eval_c.bytes);
    frame_dig -1
    pushint 928 // 928
    intc_0 // 32
    extract3
    dup
    frame_bury 2
    concat
    // contracts/verifier.algo.ts:243
    // td = op.concat(td, proof.eval_s1.bytes);
    frame_dig -1
    pushint 960 // 960
    intc_0 // 32
    extract3
    dup
    frame_bury 12
    concat
    // contracts/verifier.algo.ts:244
    // td = op.concat(td, proof.eval_s2.bytes);
    frame_dig -1
    pushint 992 // 992
    intc_0 // 32
    extract3
    dup
    frame_bury 10
    concat
    // contracts/verifier.algo.ts:245
    // td = op.concat(td, proof.eval_zw.bytes);
    frame_dig -1
    pushint 1024 // 1024
    intc_0 // 32
    extract3
    dup
    frame_bury 11
    concat
    // contracts/verifier.algo.ts:247
    // const v = new FixedArray<Uint256, 6>();
    pushint 192 // 192
    bzero
    // contracts/verifier.algo.ts:248
    // v[1] = this.getChallenge(td);
    swap
    callsub getChallenge
    replace2 32
    frame_bury 20
    // contracts/verifier.algo.ts:250
    // for (let i: uint64 = 2; i < 6; i++) {
    pushint 2 // 2
    frame_bury 25

verify_while_top@6:
    // contracts/verifier.algo.ts:250
    // for (let i: uint64 = 2; i < 6; i++) {
    frame_dig 25
    pushint 6 // 6
    <
    bz verify_after_while@8
    // contracts/verifier.algo.ts:251
    // v[i] = new Uint256(frMul((v[i - 1] as Uint256).native, v[1].native));
    frame_dig 25
    dup
    intc_1 // 1
    -
    intc_0 // 32
    *
    frame_dig 20
    dup
    uncover 2
    intc_0 // 32
    extract3 // on error: index access is out of bounds
    dig 1
    extract 32 32 // on error: index access is out of bounds
    // contracts/verifier.algo.ts:32
    // return (a * b) % BLS12_381_SCALAR_MODULUS;
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:251
    // v[i] = new Uint256(frMul((v[i - 1] as Uint256).native, v[1].native));
    dup
    len
    intc_0 // 32
    <=
    assert // overflow
    intc_0 // 32
    bzero
    b|
    dig 2
    intc_0 // 32
    *
    swap
    replace3
    frame_bury 20
    // contracts/verifier.algo.ts:250
    // for (let i: uint64 = 2; i < 6; i++) {
    intc_1 // 1
    +
    frame_bury 25
    b verify_while_top@6

verify_after_while@8:
    // contracts/verifier.algo.ts:258
    // td = op.concat(td, proof.Wxi);
    frame_dig -1
    pushint 672 // 672
    intc_2 // 96
    extract3
    // contracts/verifier.algo.ts:259
    // td = op.concat(td, proof.Wxiw);
    frame_dig -1
    pushint 768 // 768
    intc_2 // 96
    extract3
    concat
    // contracts/verifier.algo.ts:260
    // const u = this.getChallenge(td);
    callsub getChallenge
    // contracts/verifier.algo.ts:262-271
    // return {
    //   beta,
    //   gamma,
    //   alpha,
    //   xi,
    //   v,
    //   u,
    //   xin: new Uint256(),
    //   zh: new Uint256(),
    // };
    frame_dig 29
    frame_dig 8
    concat
    frame_dig 22
    concat
    frame_dig 20
    concat
    swap
    concat
    pushbytes 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
    concat
    dup
    frame_bury 13
    // contracts/verifier.algo.ts:151
    // namedLog("beta", challenges.beta.bytes);
    dup
    extract 0 32
    pushbytes "beta"
    // contracts/verifier.algo.ts:139
    // log(name);
    log
    // contracts/verifier.algo.ts:140
    // log(value);
    log
    // contracts/verifier.algo.ts:152
    // namedLog("gamma", challenges.gamma.bytes);
    dup
    extract 32 32
    pushbytes "gamma"
    // contracts/verifier.algo.ts:139
    // log(name);
    log
    // contracts/verifier.algo.ts:140
    // log(value);
    log
    // contracts/verifier.algo.ts:153
    // namedLog("alpha", challenges.alpha.bytes);
    dup
    extract 64 32
    pushbytes "alpha"
    // contracts/verifier.algo.ts:139
    // log(name);
    log
    // contracts/verifier.algo.ts:140
    // log(value);
    log
    // contracts/verifier.algo.ts:154
    // namedLog("xi", challenges.xi.bytes);
    dup
    extract 96 32
    pushbytes "xi"
    // contracts/verifier.algo.ts:139
    // log(name);
    log
    // contracts/verifier.algo.ts:140
    // log(value);
    dup
    log
    // contracts/verifier.algo.ts:155
    // namedLog("u", challenges.u.bytes);
    dig 1
    pushint 320 // 320
    intc_0 // 32
    extract3
    pushbytes "u"
    // contracts/verifier.algo.ts:139
    // log(name);
    log
    // contracts/verifier.algo.ts:140
    // log(value);
    log
    // contracts/verifier.algo.ts:156
    // namedLog("xin", challenges.xin.bytes);
    dig 1
    pushint 352 // 352
    intc_0 // 32
    extract3
    pushbytes "xin"
    // contracts/verifier.algo.ts:139
    // log(name);
    log
    // contracts/verifier.algo.ts:140
    // log(value);
    log
    // contracts/verifier.algo.ts:157
    // namedLog("zh", challenges.zh.bytes);
    dig 1
    intc 4 // 384
    intc_0 // 32
    extract3
    pushbytes "zh"
    // contracts/verifier.algo.ts:139
    // log(name);
    log
    // contracts/verifier.algo.ts:140
    // log(value);
    log
    // contracts/verifier.algo.ts:158
    // namedLog("v[1]", (challenges.v[1] as Uint256).bytes);
    swap
    extract 128 192
    dup
    extract 32 32 // on error: index access is out of bounds
    pushbytes "v[1]"
    // contracts/verifier.algo.ts:139
    // log(name);
    log
    // contracts/verifier.algo.ts:140
    // log(value);
    log
    // contracts/verifier.algo.ts:158-159
    // namedLog("v[1]", (challenges.v[1] as Uint256).bytes);
    // namedLog("v[2]", (challenges.v[2] as Uint256).bytes);
    dup
    extract 64 32 // on error: index access is out of bounds
    // contracts/verifier.algo.ts:159
    // namedLog("v[2]", (challenges.v[2] as Uint256).bytes);
    pushbytes "v[2]"
    // contracts/verifier.algo.ts:139
    // log(name);
    log
    // contracts/verifier.algo.ts:140
    // log(value);
    log
    // contracts/verifier.algo.ts:160
    // namedLog("v[3]", (challenges.v[3] as Uint256).bytes);
    dup
    extract 96 32 // on error: index access is out of bounds
    pushbytes "v[3]"
    // contracts/verifier.algo.ts:139
    // log(name);
    log
    // contracts/verifier.algo.ts:140
    // log(value);
    log
    // contracts/verifier.algo.ts:161
    // namedLog("v[4]", (challenges.v[4] as Uint256).bytes);
    dup
    extract 128 32 // on error: index access is out of bounds
    pushbytes "v[4]"
    // contracts/verifier.algo.ts:139
    // log(name);
    log
    // contracts/verifier.algo.ts:140
    // log(value);
    log
    // contracts/verifier.algo.ts:162
    // namedLog("v[5]", (challenges.v[5] as Uint256).bytes);
    extract 160 32 // on error: index access is out of bounds
    pushbytes "v[5]"
    // contracts/verifier.algo.ts:139
    // log(name);
    log
    // contracts/verifier.algo.ts:140
    // log(value);
    log
    // contracts/verifier.algo.ts:281
    // let domainSize: uint64 = 1;
    intc_1 // 1
    frame_bury 24
    // contracts/verifier.algo.ts:282
    // for (let i: uint64 = 0; i < vk.power; i++) {
    intc_3 // 0
    frame_bury 25
    frame_bury 23

verify_while_top@11:
    // contracts/verifier.algo.ts:282
    // for (let i: uint64 = 0; i < vk.power; i++) {
    frame_dig -3
    pushint 768 // 768
    extract_uint64
    frame_dig 25
    >
    bz verify_after_while@13
    // contracts/verifier.algo.ts:32
    // return (a * b) % BLS12_381_SCALAR_MODULUS;
    frame_dig 23
    dup
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    frame_bury 23
    // contracts/verifier.algo.ts:284
    // domainSize *= 2;
    frame_dig 24
    pushint 2 // 2
    *
    frame_bury 24
    // contracts/verifier.algo.ts:282
    // for (let i: uint64 = 0; i < vk.power; i++) {
    frame_dig 25
    intc_1 // 1
    +
    frame_bury 25
    b verify_while_top@11

verify_after_while@13:
    // contracts/verifier.algo.ts:287
    // challenges.xin = new Uint256(xin);
    frame_dig 23
    dup
    len
    intc_0 // 32
    <=
    assert // overflow
    intc_0 // 32
    bzero
    dup
    frame_bury 6
    dup2
    b|
    frame_dig 13
    pushint 352 // 352
    uncover 2
    replace3
    // contracts/verifier.algo.ts:288
    // challenges.zh = new Uint256(frSub(xin, BigUint(1)));
    uncover 2
    bytec_2 // 0x01
    callsub frSub
    dup
    len
    intc_0 // 32
    <=
    assert // overflow
    uncover 2
    b|
    intc 4 // 384
    swap
    replace3
    frame_bury 13
    // contracts/verifier.algo.ts:290
    // const n = frScalar(BigUint(domainSize));
    frame_dig 24
    itob
    // contracts/verifier.algo.ts:85
    // return a % BLS12_381_SCALAR_MODULUS;
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    frame_bury 16
    // contracts/verifier.algo.ts:292
    // let w = BigUint(1);
    bytec_2 // 0x01
    frame_bury 21
    // contracts/verifier.algo.ts:294
    // const L: Uint256[] = [new Uint256(), new Uint256()];
    pushbytes 0x000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
    frame_bury 0
    // contracts/verifier.algo.ts:295
    // const iterations: uint64 = vk.nPublic === 0 ? 1 : vk.nPublic;
    frame_dig -3
    pushint 776 // 776
    extract_uint64
    dup
    frame_bury 28
    bnz verify_ternary_false@15
    intc_1 // 1
    frame_bury 26

verify_ternary_merge@16:
    // contracts/verifier.algo.ts:296
    // for (let i: uint64 = 1; i <= iterations; i++) {
    intc_1 // 1
    frame_bury 27

verify_while_top@17:
    // contracts/verifier.algo.ts:296
    // for (let i: uint64 = 1; i <= iterations; i++) {
    frame_dig 27
    frame_dig 26
    <=
    bz verify_after_while@19
    // contracts/verifier.algo.ts:299
    // frMul(w, challenges.zh.native),
    frame_dig 13
    dup
    intc 4 // 384
    intc_0 // 32
    extract3
    // contracts/verifier.algo.ts:32
    // return (a * b) % BLS12_381_SCALAR_MODULUS;
    frame_dig 21
    dup
    uncover 2
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:300
    // frMul(n, frSub(challenges.xi.native, w)),
    uncover 2
    extract 96 32
    uncover 2
    callsub frSub
    // contracts/verifier.algo.ts:32
    // return (a * b) % BLS12_381_SCALAR_MODULUS;
    frame_dig 16
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:85
    // return a % BLS12_381_SCALAR_MODULUS;
    swap
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    frame_bury 4
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:58
    // assert(x !== (0n as biguint), "Fr inverse of zero");
    dup
    bytec_1 // 0x
    b!=
    assert // Fr inverse of zero
    // contracts/verifier.algo.ts:59
    // const inv = modPow(x, BLS12_381_R_MINUS_2, r);
    pushbytes 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfefffffffeffffffff
    // contracts/verifier.algo.ts:42
    // let result = 1n as biguint;
    bytec_2 // 0x01
    frame_bury 18
    // contracts/verifier.algo.ts:43
    // let b: biguint = base % mod;
    swap
    // contracts/verifier.algo.ts:59
    // const inv = modPow(x, BLS12_381_R_MINUS_2, r);
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    // contracts/verifier.algo.ts:43
    // let b: biguint = base % mod;
    b%
    frame_bury 9
    frame_bury 14

verify_while_top@26:
    // contracts/verifier.algo.ts:45
    // while (e > (0n as biguint)) {
    frame_dig 14
    bytec_1 // 0x
    b>
    // contracts/verifier.algo.ts:45-51
    // while (e > (0n as biguint)) {
    //   if ((e & (1n as biguint)) !== (0n as biguint)) {
    //     result = (result * b) % mod;
    //   }
    //   b = (b * b) % mod;
    //   e = e / BigUint(2); // e >> 1
    // }
    bz verify_after_while@30
    // contracts/verifier.algo.ts:46
    // if ((e & (1n as biguint)) !== (0n as biguint)) {
    frame_dig 14
    bytec_2 // 0x01
    b&
    bytec_1 // 0x
    b!=
    frame_dig 18
    frame_bury 19
    bz verify_after_if_else@29
    // contracts/verifier.algo.ts:47
    // result = (result * b) % mod;
    frame_dig 18
    frame_dig 9
    b*
    // contracts/verifier.algo.ts:59
    // const inv = modPow(x, BLS12_381_R_MINUS_2, r);
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    // contracts/verifier.algo.ts:47
    // result = (result * b) % mod;
    b%
    frame_bury 19

verify_after_if_else@29:
    frame_dig 19
    frame_bury 18
    // contracts/verifier.algo.ts:49
    // b = (b * b) % mod;
    frame_dig 9
    dup
    b*
    // contracts/verifier.algo.ts:59
    // const inv = modPow(x, BLS12_381_R_MINUS_2, r);
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    // contracts/verifier.algo.ts:49
    // b = (b * b) % mod;
    b%
    frame_bury 9
    // contracts/verifier.algo.ts:50
    // e = e / BigUint(2); // e >> 1
    frame_dig 14
    pushbytes 0x02
    b/
    frame_bury 14
    b verify_while_top@26

verify_after_while@30:
    // contracts/verifier.algo.ts:67
    // return (aN * bInv) % r;
    frame_dig 4
    frame_dig 18
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:297-302
    // L[i] = new Uint256(
    //   frDiv(
    //     frMul(w, challenges.zh.native),
    //     frMul(n, frSub(challenges.xi.native, w)),
    //   ),
    // );
    dup
    len
    intc_0 // 32
    <=
    assert // overflow
    frame_dig 6
    b|
    frame_dig 27
    dup
    cover 2
    intc_0 // 32
    *
    pushint 2 // 2
    +
    frame_dig 0
    swap
    uncover 2
    replace3
    frame_bury 0
    // contracts/verifier.algo.ts:32
    // return (a * b) % BLS12_381_SCALAR_MODULUS;
    frame_dig 21
    // contracts/verifier.algo.ts:304
    // w = frMul(w, Frw11);
    pushbytes 0x43527a8bca252472eb674a1a620890d7a534af14b61e0abe74a1f6718c130477
    // contracts/verifier.algo.ts:32
    // return (a * b) % BLS12_381_SCALAR_MODULUS;
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    frame_bury 21
    // contracts/verifier.algo.ts:296
    // for (let i: uint64 = 1; i <= iterations; i++) {
    intc_1 // 1
    +
    frame_bury 27
    b verify_while_top@17

verify_after_while@19:
    // contracts/verifier.algo.ts:306
    // return { L, challenges };
    pushbytes 0x01a2
    frame_dig 13
    concat
    frame_dig 0
    concat
    dup
    frame_bury 7
    // contracts/verifier.algo.ts:167
    // namedLog("L1(xi)", (L[1] as Uint256).bytes);
    dup
    intc_3 // 0
    extract_uint16
    dig 1
    len
    substring3
    dup
    extract 2 0
    frame_bury 5
    extract 34 32
    dup
    frame_bury 15
    pushbytes "L1(xi)"
    // contracts/verifier.algo.ts:139
    // log(name);
    log
    // contracts/verifier.algo.ts:140
    // log(value);
    log
    // contracts/verifier.algo.ts:310
    // let pi = BigUint(0);
    bytec_1 // 0x
    frame_bury 17
    // contracts/verifier.algo.ts:311
    // for (let i: uint64 = 0; i < publicSignals.length; i++) {
    intc_3 // 0
    frame_bury 25

verify_while_top@22:
    // contracts/verifier.algo.ts:311
    // for (let i: uint64 = 0; i < publicSignals.length; i++) {
    frame_dig 25
    frame_dig 30
    <
    bz verify_after_while@24
    // contracts/verifier.algo.ts:312
    // const w = frScalar((publicSignals[i] as Uint256).native);
    frame_dig -2
    extract 2 0
    frame_dig 25
    dup
    cover 2
    intc_0 // 32
    *
    intc_0 // 32
    extract3 // on error: index access is out of bounds
    // contracts/verifier.algo.ts:85
    // return a % BLS12_381_SCALAR_MODULUS;
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:313
    // pi = frSub(pi, frMul(w, (L[i + 1] as Uint256).native));
    swap
    intc_1 // 1
    +
    dup
    frame_bury 25
    intc_0 // 32
    *
    frame_dig 5
    swap
    intc_0 // 32
    extract3 // on error: index access is out of bounds
    // contracts/verifier.algo.ts:32
    // return (a * b) % BLS12_381_SCALAR_MODULUS;
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:313
    // pi = frSub(pi, frMul(w, (L[i + 1] as Uint256).native));
    frame_dig 17
    swap
    callsub frSub
    frame_bury 17
    b verify_while_top@22

verify_after_while@24:
    // contracts/verifier.algo.ts:315
    // return new Uint256(pi);
    frame_dig 17
    dup
    len
    intc_0 // 32
    <=
    assert // overflow
    frame_dig 6
    dup
    cover 2
    b|
    // contracts/verifier.algo.ts:172
    // namedLog("PI(xi)", pi.bytes);
    pushbytes "PI(xi)"
    // contracts/verifier.algo.ts:139
    // log(name);
    log
    // contracts/verifier.algo.ts:140
    // log(value);
    dup
    log
    // contracts/verifier.algo.ts:328
    // frMul(challenges.alpha.native, challenges.alpha.native),
    frame_dig 7
    pushints 2 416 // 2, 416
    extract3
    dup
    extract 64 32
    // contracts/verifier.algo.ts:32
    // return (a * b) % BLS12_381_SCALAR_MODULUS;
    dup
    dig 1
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    frame_dig 15
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:333
    // frMul(challenges.beta.native, proof.eval_s1.native),
    dig 2
    extract 0 32
    // contracts/verifier.algo.ts:32
    // return (a * b) % BLS12_381_SCALAR_MODULUS;
    dup
    frame_dig 12
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:79
    // const aN: biguint = a % r;
    frame_dig 1
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:80
    // const bN: biguint = b % r;
    swap
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:81
    // return (aN + bN) % r;
    b+
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:336
    // e3a = frAdd(e3a, challenges.gamma.native);
    uncover 4
    extract 32 32
    // contracts/verifier.algo.ts:79
    // const aN: biguint = a % r;
    swap
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:80
    // const bN: biguint = b % r;
    swap
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:81
    // return (aN + bN) % r;
    swap
    dig 1
    b+
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:32
    // return (a * b) % BLS12_381_SCALAR_MODULUS;
    uncover 2
    frame_dig 10
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:79
    // const aN: biguint = a % r;
    frame_dig 3
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:80
    // const bN: biguint = b % r;
    swap
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:81
    // return (aN + bN) % r;
    b+
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:79
    // const aN: biguint = a % r;
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:81
    // return (aN + bN) % r;
    dig 2
    b+
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:79
    // const aN: biguint = a % r;
    frame_dig 2
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:81
    // return (aN + bN) % r;
    uncover 3
    b+
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:32
    // return (a * b) % BLS12_381_SCALAR_MODULUS;
    cover 2
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    frame_dig 11
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    uncover 2
    b*
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:350
    // const r0 = frSub(frSub(e1, e2), e3);
    cover 2
    callsub frSub
    swap
    callsub frSub
    // contracts/verifier.algo.ts:352
    // return new Uint256(r0);
    dup
    len
    intc_0 // 32
    <=
    assert // overflow
    b|
    // contracts/verifier.algo.ts:175
    // namedLog("r0", r0.bytes);
    pushbytes "r0"
    // contracts/verifier.algo.ts:139
    // log(name);
    log
    // contracts/verifier.algo.ts:140
    // log(value);
    log
    // contracts/verifier.algo.ts:177
    // return true;
    intc_1 // 1
    frame_bury 0
    retsub

verify_ternary_false@15:
    frame_dig 28
    frame_bury 26
    b verify_ternary_merge@16


// contracts/verifier.algo.ts::PlonkVerifier.getChallenge(td: bytes) -> bytes:
getChallenge:
    // contracts/verifier.algo.ts:180
    // private getChallenge(td: bytes): Uint256 {
    proto 1 1
    // contracts/verifier.algo.ts:181
    // let hash = op.keccak256(td);
    frame_dig -1
    keccak256
    // contracts/verifier.algo.ts:85
    // return a % BLS12_381_SCALAR_MODULUS;
    bytec_0 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
    b%
    // contracts/verifier.algo.ts:182
    // return new Uint256(frScalar(BigUint(hash)));
    dup
    len
    intc_0 // 32
    <=
    assert // overflow
    intc_0 // 32
    bzero
    b|
    retsub
