/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"name":"PlonkVerifier","structs":{"Proof":[{"name":"a","type":"byte[96]"},{"name":"b","type":"byte[96]"},{"name":"c","type":"byte[96]"},{"name":"z","type":"byte[96]"},{"name":"t1","type":"byte[96]"},{"name":"t2","type":"byte[96]"},{"name":"t3","type":"byte[96]"},{"name":"wxi","type":"byte[96]"},{"name":"wxiw","type":"byte[96]"},{"name":"evalA","type":"uint256"},{"name":"evalB","type":"uint256"},{"name":"evalC","type":"uint256"},{"name":"evalS1","type":"uint256"},{"name":"evalS2","type":"uint256"},{"name":"evalZw","type":"uint256"}],"VerificationKey":[{"name":"qm","type":"byte[96]"},{"name":"ql","type":"byte[96]"},{"name":"qr","type":"byte[96]"},{"name":"qo","type":"byte[96]"},{"name":"qc","type":"byte[96]"},{"name":"s1","type":"byte[96]"},{"name":"s2","type":"byte[96]"},{"name":"s3","type":"byte[96]"},{"name":"power","type":"uint64"},{"name":"nPublic","type":"uint64"},{"name":"k1","type":"uint64"},{"name":"k2","type":"uint64"},{"name":"x_2","type":"byte[192]"}]},"methods":[{"name":"_dummy","args":[{"type":"(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64,uint64,uint64,byte[192])","struct":"VerificationKey","name":"_vk"}],"returns":{"type":"void"},"actions":{"create":[],"call":["CloseOut"]},"readonly":false,"desc":"Dummy function that only exists so we can have the VerificationKey type in the generated client","events":[],"recommendations":{}},{"name":"verify","args":[{"type":"uint256[]","name":"signals"},{"type":"(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint256,uint256,uint256,uint256,uint256,uint256)","struct":"Proof","name":"proof"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":0,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[1289],"errorMessage":"Fr inverse of zero"},{"pc":[406],"errorMessage":"Length must be 192"},{"pc":[566],"errorMessage":"Length must be 32"},{"pc":[145,168,191,214,237,260,283,306,1740,1751,1758,1769,1776,1787,1794,1803,1934,1961,1978,1995,2002,2012,2025,2036,2047,2054,2064,2071,2097,2107,2123,2133,2149,2159,2175,2185,2201,2211,2415,2435,2447,2457,2479,2486,2495,2506,2513,2538],"errorMessage":"Length must be 96"},{"pc":[51],"errorMessage":"OnCompletion is not CloseOut"},{"pc":[31],"errorMessage":"OnCompletion is not NoOp"},{"pc":[2591],"errorMessage":"Verification failed"},{"pc":[65],"errorMessage":"can only call when creating"},{"pc":[34,54],"errorMessage":"can only call when not creating"},{"pc":[551,774,777,1002,1014,1026,1038,1049,1504,1519,2084,2110,2136,2162,2188],"errorMessage":"index access is out of bounds"},{"pc":[99,558,787,1109,1134,1397,1540,1713],"errorMessage":"overflow"}],"pcOffsetMethod":"cblocks"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"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","clear":"CoEBQw=="},"events":[],"templateVariables":{"VERIFICATION_KEY":{"type":"AVMBytes"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type Proof = {
  a: Uint8Array,
  b: Uint8Array,
  c: Uint8Array,
  z: Uint8Array,
  t1: Uint8Array,
  t2: Uint8Array,
  t3: Uint8Array,
  wxi: Uint8Array,
  wxiw: Uint8Array,
  evalA: bigint,
  evalB: bigint,
  evalC: bigint,
  evalS1: bigint,
  evalS2: bigint,
  evalZw: bigint
}


/**
 * Converts the ABI tuple representation of a Proof to the struct representation
 */
export function ProofFromTuple(abiTuple: [Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, bigint, bigint, bigint, bigint, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.Proof, APP_SPEC.structs) as Proof
}

export type VerificationKey = {
  qm: Uint8Array,
  ql: Uint8Array,
  qr: Uint8Array,
  qo: Uint8Array,
  qc: Uint8Array,
  s1: Uint8Array,
  s2: Uint8Array,
  s3: Uint8Array,
  power: bigint,
  nPublic: bigint,
  k1: bigint,
  k2: bigint,
  x_2: Uint8Array
}


/**
 * Converts the ABI tuple representation of a VerificationKey to the struct representation
 */
export function VerificationKeyFromTuple(abiTuple: [Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, bigint, bigint, bigint, bigint, Uint8Array]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.VerificationKey, APP_SPEC.structs) as VerificationKey
}

/**
 * Deploy-time template variables
 */
export type TemplateVariables = {
  VERIFICATION_KEY: Uint8Array,
}

/**
 * The argument types for the PlonkVerifier contract
 */
export type PlonkVerifierArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    '_dummy((byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64,uint64,uint64,byte[192]))void': {
      _vk: VerificationKey
    }
    'verify(uint256[],(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint256,uint256,uint256,uint256,uint256,uint256))void': {
      signals: bigint[] | number[]
      proof: Proof
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    '_dummy((byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64,uint64,uint64,byte[192]))void': [_vk: VerificationKey]
    'verify(uint256[],(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint256,uint256,uint256,uint256,uint256,uint256))void': [signals: bigint[] | number[], proof: Proof]
  }
}

/**
 * The return type for each method
 */
export type PlonkVerifierReturns = {
  '_dummy((byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64,uint64,uint64,byte[192]))void': void
  'verify(uint256[],(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint256,uint256,uint256,uint256,uint256,uint256))void': void
}

/**
 * Defines the types of available calls and state of the PlonkVerifier smart contract.
 */
export type PlonkVerifierTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'_dummy((byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64,uint64,uint64,byte[192]))void' | '_dummy', {
      argsObj: PlonkVerifierArgs['obj']['_dummy((byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64,uint64,uint64,byte[192]))void']
      argsTuple: PlonkVerifierArgs['tuple']['_dummy((byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64,uint64,uint64,byte[192]))void']
      returns: PlonkVerifierReturns['_dummy((byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64,uint64,uint64,byte[192]))void']
    }>
    & Record<'verify(uint256[],(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint256,uint256,uint256,uint256,uint256,uint256))void' | 'verify', {
      argsObj: PlonkVerifierArgs['obj']['verify(uint256[],(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint256,uint256,uint256,uint256,uint256,uint256))void']
      argsTuple: PlonkVerifierArgs['tuple']['verify(uint256[],(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint256,uint256,uint256,uint256,uint256,uint256))void']
      returns: PlonkVerifierReturns['verify(uint256[],(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint256,uint256,uint256,uint256,uint256,uint256))void']
    }>
}

/**
 * Defines the possible abi call signatures.
 */
export type PlonkVerifierSignatures = keyof PlonkVerifierTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type PlonkVerifierNonVoidMethodSignatures = keyof PlonkVerifierTypes['methods'] extends infer T ? T extends keyof PlonkVerifierTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the PlonkVerifier smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends PlonkVerifierSignatures> = PlonkVerifierTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the PlonkVerifier smart contract to the method's return type
 */
export type MethodReturn<TSignature extends PlonkVerifierSignatures> = PlonkVerifierTypes['methods'][TSignature]['returns']


/**
 * Defines supported create method params for this smart contract
 */
export type PlonkVerifierCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type PlonkVerifierDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: PlonkVerifierCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the PlonkVerifier smart contract
 */
export abstract class PlonkVerifierParamsFactory {
  /**
   * Gets available closeOut ABI call param factories
   */
  static get closeOut() {
    return {
      /**
       * Constructs close out ABI call params for the PlonkVerifier smart contract using the _dummy((byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64,uint64,uint64,byte[192]))void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      _dummy(params: CallParams<PlonkVerifierArgs['obj']['_dummy((byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64,uint64,uint64,byte[192]))void'] | PlonkVerifierArgs['tuple']['_dummy((byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64,uint64,uint64,byte[192]))void']>): AppClientMethodCallParams {
        return {
          ...params,
          method: '_dummy((byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64,uint64,uint64,byte[192]))void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args._vk],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the verify(uint256[],(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint256,uint256,uint256,uint256,uint256,uint256))void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static verify(params: CallParams<PlonkVerifierArgs['obj']['verify(uint256[],(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint256,uint256,uint256,uint256,uint256,uint256))void'] | PlonkVerifierArgs['tuple']['verify(uint256[],(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint256,uint256,uint256,uint256,uint256,uint256))void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'verify(uint256[],(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint256,uint256,uint256,uint256,uint256,uint256))void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.signals, params.args.proof],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the PlonkVerifier smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class PlonkVerifierFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `PlonkVerifierFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new PlonkVerifierClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new PlonkVerifierClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the PlonkVerifier smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: PlonkVerifierDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new PlonkVerifierClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the PlonkVerifier smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the PlonkVerifier smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the PlonkVerifier smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new PlonkVerifierClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the PlonkVerifier smart contract
 */
export class PlonkVerifierClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `PlonkVerifierClient`
   *
   * @param appClient An `AppClient` instance which has been created with the PlonkVerifier app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `PlonkVerifierClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends PlonkVerifierNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `PlonkVerifierClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<PlonkVerifierClient> {
    return new PlonkVerifierClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `PlonkVerifierClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<PlonkVerifierClient> {
    return new PlonkVerifierClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available closeOut methods
     */
    closeOut: {
      /**
       * Makes a close out call to an existing instance of the PlonkVerifier smart contract using the `_dummy((byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64,uint64,uint64,byte[192]))void` ABI method.
       *
       * Dummy function that only exists so we can have the VerificationKey type in the generated client
       *
       * @param params The params for the smart contract call
       * @returns The closeOut params
       */
      _dummy: (params: CallParams<PlonkVerifierArgs['obj']['_dummy((byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64,uint64,uint64,byte[192]))void'] | PlonkVerifierArgs['tuple']['_dummy((byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64,uint64,uint64,byte[192]))void']>) => {
        return this.appClient.params.closeOut(PlonkVerifierParamsFactory.closeOut._dummy(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the PlonkVerifier smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the PlonkVerifier smart contract using the `verify(uint256[],(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint256,uint256,uint256,uint256,uint256,uint256))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    verify: (params: CallParams<PlonkVerifierArgs['obj']['verify(uint256[],(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint256,uint256,uint256,uint256,uint256,uint256))void'] | PlonkVerifierArgs['tuple']['verify(uint256[],(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint256,uint256,uint256,uint256,uint256,uint256))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PlonkVerifierParamsFactory.verify(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available closeOut methods
     */
    closeOut: {
      /**
       * Makes a close out call to an existing instance of the PlonkVerifier smart contract using the `_dummy((byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64,uint64,uint64,byte[192]))void` ABI method.
       *
       * Dummy function that only exists so we can have the VerificationKey type in the generated client
       *
       * @param params The params for the smart contract call
       * @returns The closeOut transaction
       */
      _dummy: (params: CallParams<PlonkVerifierArgs['obj']['_dummy((byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64,uint64,uint64,byte[192]))void'] | PlonkVerifierArgs['tuple']['_dummy((byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64,uint64,uint64,byte[192]))void']>) => {
        return this.appClient.createTransaction.closeOut(PlonkVerifierParamsFactory.closeOut._dummy(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the PlonkVerifier smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the PlonkVerifier smart contract using the `verify(uint256[],(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint256,uint256,uint256,uint256,uint256,uint256))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    verify: (params: CallParams<PlonkVerifierArgs['obj']['verify(uint256[],(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint256,uint256,uint256,uint256,uint256,uint256))void'] | PlonkVerifierArgs['tuple']['verify(uint256[],(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint256,uint256,uint256,uint256,uint256,uint256))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PlonkVerifierParamsFactory.verify(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available closeOut methods
     */
    closeOut: {
      /**
       * Makes a close out call to an existing instance of the PlonkVerifier smart contract using the `_dummy((byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64,uint64,uint64,byte[192]))void` ABI method.
       *
       * Dummy function that only exists so we can have the VerificationKey type in the generated client
       *
       * @param params The params for the smart contract call
       * @returns The closeOut result
       */
      _dummy: async (params: CallParams<PlonkVerifierArgs['obj']['_dummy((byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64,uint64,uint64,byte[192]))void'] | PlonkVerifierArgs['tuple']['_dummy((byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64,uint64,uint64,byte[192]))void']> & SendParams) => {
        const result = await this.appClient.send.closeOut(PlonkVerifierParamsFactory.closeOut._dummy(params))
        return {...result, return: result.return as unknown as (undefined | PlonkVerifierReturns['_dummy((byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64,uint64,uint64,byte[192]))void'])}
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the PlonkVerifier smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the PlonkVerifier smart contract using the `verify(uint256[],(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint256,uint256,uint256,uint256,uint256,uint256))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    verify: async (params: CallParams<PlonkVerifierArgs['obj']['verify(uint256[],(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint256,uint256,uint256,uint256,uint256,uint256))void'] | PlonkVerifierArgs['tuple']['verify(uint256[],(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint256,uint256,uint256,uint256,uint256,uint256))void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PlonkVerifierParamsFactory.verify(params))
      return {...result, return: result.return as unknown as (undefined | PlonkVerifierReturns['verify(uint256[],(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint256,uint256,uint256,uint256,uint256,uint256))void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new PlonkVerifierClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current PlonkVerifier app
   */
  state = {
  }

  public newGroup(): PlonkVerifierComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a verify(uint256[],(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint256,uint256,uint256,uint256,uint256,uint256))void method call against the PlonkVerifier contract
       */
      verify(params: CallParams<PlonkVerifierArgs['obj']['verify(uint256[],(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint256,uint256,uint256,uint256,uint256,uint256))void'] | PlonkVerifierArgs['tuple']['verify(uint256[],(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint256,uint256,uint256,uint256,uint256,uint256))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.verify(params)))
        resultMappers.push(undefined)
        return this
      },
      get closeOut() {
        return {
          _dummy: (params: CallParams<PlonkVerifierArgs['obj']['_dummy((byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64,uint64,uint64,byte[192]))void'] | PlonkVerifierArgs['tuple']['_dummy((byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64,uint64,uint64,byte[192]))void']>) => {
            promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.closeOut._dummy(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      /**
       * Add a clear state call to the PlonkVerifier contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as PlonkVerifierComposer
  }
}
export type PlonkVerifierComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the verify(uint256[],(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint256,uint256,uint256,uint256,uint256,uint256))void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  verify(params?: CallParams<PlonkVerifierArgs['obj']['verify(uint256[],(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint256,uint256,uint256,uint256,uint256,uint256))void'] | PlonkVerifierArgs['tuple']['verify(uint256[],(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint256,uint256,uint256,uint256,uint256,uint256))void']>): PlonkVerifierComposer<[...TReturns, PlonkVerifierReturns['verify(uint256[],(byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint256,uint256,uint256,uint256,uint256,uint256))void'] | undefined]>

  /**
   * Gets available closeOut methods
   */
  readonly closeOut: {
    /**
     * Makes a close out call to an existing instance of the PlonkVerifier smart contract using the _dummy((byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64,uint64,uint64,byte[192]))void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    _dummy(params?: CallParams<PlonkVerifierArgs['obj']['_dummy((byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64,uint64,uint64,byte[192]))void'] | PlonkVerifierArgs['tuple']['_dummy((byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64,uint64,uint64,byte[192]))void']>): PlonkVerifierComposer<[...TReturns, PlonkVerifierReturns['_dummy((byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],byte[96],uint64,uint64,uint64,uint64,byte[192]))void'] | undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the PlonkVerifier smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): PlonkVerifierComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): PlonkVerifierComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<PlonkVerifierComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<PlonkVerifierComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<PlonkVerifierComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<PlonkVerifierComposerResults<TReturns>>
}
export type PlonkVerifierComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

